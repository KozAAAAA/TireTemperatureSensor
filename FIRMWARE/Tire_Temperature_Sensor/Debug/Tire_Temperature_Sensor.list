
Tire_Temperature_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dec  08003dec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003dec  08003dec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dec  08003dec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  08003e00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003e00  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e946  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002484  00000000  00000000  0002e982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00030e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00031a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e21c  00000000  00000000  000325c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9a7  00000000  00000000  000607dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b7c9  00000000  00000000  00070183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017b94c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000318c  00000000  00000000  0017b99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003d8c 	.word	0x08003d8c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003d8c 	.word	0x08003d8c

080001fc <_Z15MLX90621_DumpEEPh>:
void ExtractAlphaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);
void ExtractOffsetParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);


int MLX90621_DumpEE(uint8_t *eeData)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
     return MLX90621_I2CReadEEPROM(0x50, 0, 256, eeData);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800020a:	2100      	movs	r1, #0
 800020c:	2050      	movs	r0, #80	; 0x50
 800020e:	f000 f837 	bl	8000280 <_Z22MLX90621_I2CReadEEPROMhhtPh>
 8000212:	4603      	mov	r3, r0
}
 8000214:	4618      	mov	r0, r3
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <_Z18MLX90621_ConfigurePh>:
       
    return error;    
}

int MLX90621_Configure(uint8_t *eeData)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    int error = 1;
 8000224:	2301      	movs	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
    uint16_t value;
    
    error = MLX90621_I2CWrite(0x60, 0x04, 0xAA, eeData[247]);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	33f7      	adds	r3, #247	; 0xf7
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	b29b      	uxth	r3, r3
 8000230:	22aa      	movs	r2, #170	; 0xaa
 8000232:	2104      	movs	r1, #4
 8000234:	2060      	movs	r0, #96	; 0x60
 8000236:	f000 f953 	bl	80004e0 <_Z17MLX90621_I2CWritehhht>
 800023a:	60f8      	str	r0, [r7, #12]
    
    if (error != 0)
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <_Z18MLX90621_ConfigurePh+0x2a>
    {
        return error;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	e017      	b.n	8000276 <_Z18MLX90621_ConfigurePh+0x5a>
    }
    
    value = 256*eeData[246] + eeData[245];      
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	33f6      	adds	r3, #246	; 0xf6
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	021b      	lsls	r3, r3, #8
 8000250:	b29a      	uxth	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	33f5      	adds	r3, #245	; 0xf5
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	b29b      	uxth	r3, r3
 800025a:	4413      	add	r3, r2
 800025c:	817b      	strh	r3, [r7, #10]
    value = value | 0x0400;
 800025e:	897b      	ldrh	r3, [r7, #10]
 8000260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000264:	817b      	strh	r3, [r7, #10]
    error = MLX90621_I2CWrite(0x60, 0x03, 0x55, value);
 8000266:	897b      	ldrh	r3, [r7, #10]
 8000268:	2255      	movs	r2, #85	; 0x55
 800026a:	2103      	movs	r1, #3
 800026c:	2060      	movs	r0, #96	; 0x60
 800026e:	f000 f937 	bl	80004e0 <_Z17MLX90621_I2CWritehhht>
 8000272:	60f8      	str	r0, [r7, #12]
    
    return error;      
 8000274:	68fb      	ldr	r3, [r7, #12]
    
}   
 8000276:	4618      	mov	r0, r3
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <_Z22MLX90621_I2CReadEEPROMhhtPh>:
	//initialization generated by the .ioc
	//MX_I2C2_Init();
}

int MLX90621_I2CReadEEPROM(uint8_t slaveAddr, uint8_t startAddress, uint16_t nMemAddressRead, uint8_t *data)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b0cb      	sub	sp, #300	; 0x12c
 8000284:	af04      	add	r7, sp, #16
 8000286:	4604      	mov	r4, r0
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000290:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000294:	6013      	str	r3, [r2, #0]
 8000296:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800029a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800029e:	4622      	mov	r2, r4
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002a6:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80002aa:	4602      	mov	r2, r0
 80002ac:	701a      	strb	r2, [r3, #0]
 80002ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80002b6:	460a      	mov	r2, r1
 80002b8:	801a      	strh	r2, [r3, #0]

    uint8_t sa;                           
    int ack = 0;                               
 80002ba:	2300      	movs	r3, #0
 80002bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int cnt = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    uint8_t cmd = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    uint8_t i2cData[256] = {0};
 80002cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	3304      	adds	r3, #4
 80002da:	22fc      	movs	r2, #252	; 0xfc
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f003 fd4c 	bl	8003d7c <memset>
    uint8_t *p;
    
    p = data;
 80002e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    sa = (slaveAddr << 1);
 80002f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002f6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    cmd = startAddress;
 8000302:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000306:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    
    if(HAL_I2C_Mem_Read(&hi2c2, sa, cmd, 1, i2cData, nMemAddressRead, 100) != HAL_OK)
 8000310:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8000314:	b299      	uxth	r1, r3
 8000316:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800031a:	b29a      	uxth	r2, r3
 800031c:	2364      	movs	r3, #100	; 0x64
 800031e:	9302      	str	r3, [sp, #8]
 8000320:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000324:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	f107 0308 	add.w	r3, r7, #8
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2301      	movs	r3, #1
 8000334:	481a      	ldr	r0, [pc, #104]	; (80003a0 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x120>)
 8000336:	f001 fa75 	bl	8001824 <HAL_I2C_Mem_Read>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	bf14      	ite	ne
 8000340:	2301      	movne	r3, #1
 8000342:	2300      	moveq	r3, #0
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <_Z22MLX90621_I2CReadEEPROMhhtPh+0xd0>
    {
    	return -1;
 800034a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800034e:	e021      	b.n	8000394 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x114>
    }          

    i2c.stop();   
    */
    
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8000350:	2300      	movs	r3, #0
 8000352:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000356:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800035a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000364:	429a      	cmp	r2, r3
 8000366:	da14      	bge.n	8000392 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x112>
    {
        *p++ = i2cData[cnt];
 8000368:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800036c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000374:	4413      	add	r3, r2
 8000376:	7819      	ldrb	r1, [r3, #0]
 8000378:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800037c:	1c5a      	adds	r2, r3, #1
 800037e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8000382:	460a      	mov	r2, r1
 8000384:	701a      	strb	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8000386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800038a:	3301      	adds	r3, #1
 800038c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000390:	e7e1      	b.n	8000356 <_Z22MLX90621_I2CReadEEPROMhhtPh+0xd6>
    }
    

    return 0;
 8000392:	2300      	movs	r3, #0
} 
 8000394:	4618      	mov	r0, r3
 8000396:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800039a:	46bd      	mov	sp, r7
 800039c:	bd90      	pop	{r4, r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000054 	.word	0x20000054

080003a4 <_Z16MLX90621_I2CReadhhhhhPt>:

int MLX90621_I2CRead(uint8_t slaveAddr,uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead, uint16_t *data)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b0ad      	sub	sp, #180	; 0xb4
 80003a8:	af02      	add	r7, sp, #8
 80003aa:	4604      	mov	r4, r0
 80003ac:	4608      	mov	r0, r1
 80003ae:	4611      	mov	r1, r2
 80003b0:	461a      	mov	r2, r3
 80003b2:	4623      	mov	r3, r4
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	4603      	mov	r3, r0
 80003b8:	71bb      	strb	r3, [r7, #6]
 80003ba:	460b      	mov	r3, r1
 80003bc:	717b      	strb	r3, [r7, #5]
 80003be:	4613      	mov	r3, r2
 80003c0:	713b      	strb	r3, [r7, #4]
    uint8_t sa;                           
    int ack = 0;                               
 80003c2:	2300      	movs	r3, #0
 80003c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    int cnt = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    int i = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint8_t cmd[4] = {0,0,0,0};
 80003d4:	2300      	movs	r3, #0
 80003d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint8_t i2cData[132] = {0};
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2280      	movs	r2, #128	; 0x80
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f003 fcc8 	bl	8003d7c <memset>
    uint16_t *p;
    
    p = data;
 80003ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80003f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    sa = (slaveAddr << 1);
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    cmd[0] = command;
 80003fc:	79bb      	ldrb	r3, [r7, #6]
 80003fe:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
    cmd[1] = startAddress;
 8000402:	797b      	ldrb	r3, [r7, #5]
 8000404:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
    cmd[2] = addressStep;
 8000408:	793b      	ldrb	r3, [r7, #4]
 800040a:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    cmd[3] = nMemAddressRead;
 800040e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000412:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
//    {
//    	return -1;
//    }


    if(HAL_I2C_Master_Transmit_No_Stop(&hi2c2, sa, cmd, 4, 100) != HAL_OK)
 8000416:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800041a:	b299      	uxth	r1, r3
 800041c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000420:	2364      	movs	r3, #100	; 0x64
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2304      	movs	r3, #4
 8000426:	482d      	ldr	r0, [pc, #180]	; (80004dc <_Z16MLX90621_I2CReadhhhhhPt+0x138>)
 8000428:	f001 fde2 	bl	8001ff0 <HAL_I2C_Master_Transmit_No_Stop>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	bf14      	ite	ne
 8000432:	2301      	movne	r3, #1
 8000434:	2300      	moveq	r3, #0
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b00      	cmp	r3, #0
 800043a:	d002      	beq.n	8000442 <_Z16MLX90621_I2CReadhhhhhPt+0x9e>
    {
        return -1;
 800043c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000440:	e048      	b.n	80004d4 <_Z16MLX90621_I2CReadhhhhhPt+0x130>
    }
    if(HAL_I2C_Master_Receive(&hi2c2, sa, i2cData, 2*nMemAddressRead, 100) != HAL_OK)
 8000442:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000446:	b299      	uxth	r1, r3
 8000448:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800044c:	b29b      	uxth	r3, r3
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	b29b      	uxth	r3, r3
 8000452:	f107 020c 	add.w	r2, r7, #12
 8000456:	2064      	movs	r0, #100	; 0x64
 8000458:	9000      	str	r0, [sp, #0]
 800045a:	4820      	ldr	r0, [pc, #128]	; (80004dc <_Z16MLX90621_I2CReadhhhhhPt+0x138>)
 800045c:	f001 f8ec 	bl	8001638 <HAL_I2C_Master_Receive>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	bf14      	ite	ne
 8000466:	2301      	movne	r3, #1
 8000468:	2300      	moveq	r3, #0
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	d002      	beq.n	8000476 <_Z16MLX90621_I2CReadhhhhhPt+0xd2>
    {
        return -1;
 8000470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000474:	e02e      	b.n	80004d4 <_Z16MLX90621_I2CReadhhhhhPt+0x130>
        return -1; 
    }          
    i2c.stop();
    */
    
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8000476:	2300      	movs	r3, #0
 8000478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800047c:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000480:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000484:	429a      	cmp	r2, r3
 8000486:	da24      	bge.n	80004d2 <_Z16MLX90621_I2CReadhhhhhPt+0x12e>
    {
        i = cnt << 1;
 8000488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        *p++ = (uint16_t)i2cData[i+1]*256 + (uint16_t)i2cData[i];
 8000492:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000496:	3301      	adds	r3, #1
 8000498:	33a8      	adds	r3, #168	; 0xa8
 800049a:	443b      	add	r3, r7
 800049c:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	021b      	lsls	r3, r3, #8
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	f107 010c 	add.w	r1, r7, #12
 80004aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80004ae:	440b      	add	r3, r1
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	4413      	add	r3, r2
 80004b6:	b299      	uxth	r1, r3
 80004b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80004bc:	1c9a      	adds	r2, r3, #2
 80004be:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80004c2:	460a      	mov	r2, r1
 80004c4:	801a      	strh	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 80004c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80004ca:	3301      	adds	r3, #1
 80004cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80004d0:	e7d4      	b.n	800047c <_Z16MLX90621_I2CReadhhhhhPt+0xd8>
    }
    



    return 0;   
 80004d2:	2300      	movs	r3, #0
} 
 80004d4:	4618      	mov	r0, r3
 80004d6:	37ac      	adds	r7, #172	; 0xac
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd90      	pop	{r4, r7, pc}
 80004dc:	20000054 	.word	0x20000054

080004e0 <_Z17MLX90621_I2CWritehhht>:
	//set via the .ioc
    //i2c.frequency(1000*freq);
}

int MLX90621_I2CWrite(uint8_t slaveAddr, uint8_t command, uint8_t checkValue, uint16_t data)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b089      	sub	sp, #36	; 0x24
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	4604      	mov	r4, r0
 80004e8:	4608      	mov	r0, r1
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	4623      	mov	r3, r4
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4603      	mov	r3, r0
 80004f4:	71bb      	strb	r3, [r7, #6]
 80004f6:	460b      	mov	r3, r1
 80004f8:	717b      	strb	r3, [r7, #5]
 80004fa:	4613      	mov	r3, r2
 80004fc:	807b      	strh	r3, [r7, #2]
    uint8_t sa;
    int ack = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
    uint8_t cmd[5] = {0,0,0,0,0};
 8000502:	4a26      	ldr	r2, [pc, #152]	; (800059c <_Z17MLX90621_I2CWritehhht+0xbc>)
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	e892 0003 	ldmia.w	r2, {r0, r1}
 800050c:	6018      	str	r0, [r3, #0]
 800050e:	3304      	adds	r3, #4
 8000510:	7019      	strb	r1, [r3, #0]
    static uint16_t dataCheck;
    

    sa = (slaveAddr << 1);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	74fb      	strb	r3, [r7, #19]
    cmd[0] = command;
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	733b      	strb	r3, [r7, #12]
    cmd[2] = data & 0x00FF;
 800051c:	887b      	ldrh	r3, [r7, #2]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	73bb      	strb	r3, [r7, #14]
    cmd[1] = cmd[2] - checkValue;
 8000522:	7bba      	ldrb	r2, [r7, #14]
 8000524:	797b      	ldrb	r3, [r7, #5]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	737b      	strb	r3, [r7, #13]
    cmd[4] = data >> 8;
 800052c:	887b      	ldrh	r3, [r7, #2]
 800052e:	0a1b      	lsrs	r3, r3, #8
 8000530:	b29b      	uxth	r3, r3
 8000532:	b2db      	uxtb	r3, r3
 8000534:	743b      	strb	r3, [r7, #16]
    cmd[3] = cmd[4] - checkValue;
 8000536:	7c3a      	ldrb	r2, [r7, #16]
 8000538:	797b      	ldrb	r3, [r7, #5]
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	b2db      	uxtb	r3, r3
 800053e:	73fb      	strb	r3, [r7, #15]

    if(HAL_I2C_Master_Transmit(&hi2c2, sa, cmd, 5, 100) != HAL_OK)
 8000540:	7cfb      	ldrb	r3, [r7, #19]
 8000542:	b299      	uxth	r1, r3
 8000544:	f107 020c 	add.w	r2, r7, #12
 8000548:	2364      	movs	r3, #100	; 0x64
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2305      	movs	r3, #5
 800054e:	4814      	ldr	r0, [pc, #80]	; (80005a0 <_Z17MLX90621_I2CWritehhht+0xc0>)
 8000550:	f000 ff7e 	bl	8001450 <HAL_I2C_Master_Transmit>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf14      	ite	ne
 800055a:	2301      	movne	r3, #1
 800055c:	2300      	moveq	r3, #0
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <_Z17MLX90621_I2CWritehhht+0x8a>
    {
        return -1;
 8000564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000568:	e014      	b.n	8000594 <_Z17MLX90621_I2CWritehhht+0xb4>
    }         
    i2c.stop();   
    
    */

    MLX90621_I2CRead(slaveAddr, 0x02, 0x8F+command, 0, 1, &dataCheck);
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	3b71      	subs	r3, #113	; 0x71
 800056e:	b2da      	uxtb	r2, r3
 8000570:	79f8      	ldrb	r0, [r7, #7]
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <_Z17MLX90621_I2CWritehhht+0xc4>)
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2301      	movs	r3, #1
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	2102      	movs	r1, #2
 800057e:	f7ff ff11 	bl	80003a4 <_Z16MLX90621_I2CReadhhhhhPt>
    
    if ( dataCheck != data)
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <_Z17MLX90621_I2CWritehhht+0xc4>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	887a      	ldrh	r2, [r7, #2]
 8000588:	429a      	cmp	r2, r3
 800058a:	d002      	beq.n	8000592 <_Z17MLX90621_I2CWritehhht+0xb2>
    {
        return -2;
 800058c:	f06f 0301 	mvn.w	r3, #1
 8000590:	e000      	b.n	8000594 <_Z17MLX90621_I2CWritehhht+0xb4>
    }    
    
    return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	371c      	adds	r7, #28
 8000598:	46bd      	mov	sp, r7
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	08003da4 	.word	0x08003da4
 80005a0:	20000054 	.word	0x20000054
 80005a4:	20000028 	.word	0x20000028

080005a8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_CAN1_Init+0x64>)
 80005ae:	4a18      	ldr	r2, [pc, #96]	; (8000610 <MX_CAN1_Init+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 80005b2:	4b16      	ldr	r3, [pc, #88]	; (800060c <MX_CAN1_Init+0x64>)
 80005b4:	2218      	movs	r2, #24
 80005b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_CAN1_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_CAN1_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_CAN1_Init+0x64>)
 80005c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_CAN1_Init+0x64>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_CAN1_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_CAN1_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_CAN1_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_CAN1_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_CAN1_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_CAN1_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_CAN1_Init+0x64>)
 80005f8:	f000 fb0e 	bl	8000c18 <HAL_CAN_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000602:	f000 f9e2 	bl	80009ca <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000002c 	.word	0x2000002c
 8000610:	40006400 	.word	0x40006400

08000614 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a18      	ldr	r2, [pc, #96]	; (8000694 <HAL_CAN_MspInit+0x80>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d129      	bne.n	800068a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_CAN_MspInit+0x84>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	4a17      	ldr	r2, [pc, #92]	; (8000698 <HAL_CAN_MspInit+0x84>)
 800063c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000640:	6593      	str	r3, [r2, #88]	; 0x58
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_CAN_MspInit+0x84>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_CAN_MspInit+0x84>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <HAL_CAN_MspInit+0x84>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <HAL_CAN_MspInit+0x84>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000666:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000678:	2309      	movs	r3, #9
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f000 fca9 	bl	8000fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40006400 	.word	0x40006400
 8000698:	40021000 	.word	0x40021000

0800069c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a36      	ldr	r2, [pc, #216]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006be:	4b34      	ldr	r3, [pc, #208]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a30      	ldr	r2, [pc, #192]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <MX_GPIO_Init+0xf4>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <MX_GPIO_Init+0xf4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_WAR2_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2144      	movs	r1, #68	; 0x44
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f000 fdf1 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WAR1_GPIO_Port, LED_WAR1_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2110      	movs	r1, #16
 8000722:	481c      	ldr	r0, [pc, #112]	; (8000794 <MX_GPIO_Init+0xf8>)
 8000724:	f000 fdec 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2101      	movs	r1, #1
 800072c:	481a      	ldr	r0, [pc, #104]	; (8000798 <MX_GPIO_Init+0xfc>)
 800072e:	f000 fde7 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_WAR2_Pin|LED_ERR_Pin;
 8000732:	2344      	movs	r3, #68	; 0x44
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f000 fc46 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WAR1_Pin;
 8000750:	2310      	movs	r3, #16
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_WAR1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0xf8>)
 8000768:	f000 fc38 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OK_Pin;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OK_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_GPIO_Init+0xfc>)
 8000784:	f000 fc2a 	bl	8000fdc <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	; 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	48000800 	.word	0x48000800
 8000798:	48000400 	.word	0x48000400

0800079c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C2_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C2_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x302027FF;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C2_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C2_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C2_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C2_Init+0x74>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C2_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_I2C2_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C2_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <MX_I2C2_Init+0x74>)
 80007d8:	f000 fdaa 	bl	8001330 <HAL_I2C_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007e2:	f000 f8f2 	bl	80009ca <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <MX_I2C2_Init+0x74>)
 80007ea:	f001 fcf5 	bl	80021d8 <HAL_I2CEx_ConfigAnalogFilter>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 f8e9 	bl	80009ca <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_I2C2_Init+0x74>)
 80007fc:	f001 fd37 	bl	800226e <HAL_I2CEx_ConfigDigitalFilter>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 f8e0 	bl	80009ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000054 	.word	0x20000054
 8000814:	40005800 	.word	0x40005800
 8000818:	302027ff 	.word	0x302027ff

0800081c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b0b0      	sub	sp, #192	; 0xc0
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2298      	movs	r2, #152	; 0x98
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fa9d 	bl	8003d7c <memset>
  if(i2cHandle->Instance==I2C2)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a21      	ldr	r2, [pc, #132]	; (80008cc <HAL_I2C_MspInit+0xb0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d13b      	bne.n	80008c4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000850:	2300      	movs	r3, #0
 8000852:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4618      	mov	r0, r3
 800085a:	f002 fd17 	bl	800328c <HAL_RCCEx_PeriphCLKConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000864:	f000 f8b1 	bl	80009ca <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 800086e:	f043 0302 	orr.w	r3, r3, #2
 8000872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000880:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000888:	2312      	movs	r3, #18
 800088a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800089a:	2304      	movs	r3, #4
 800089c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008a4:	4619      	mov	r1, r3
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <HAL_I2C_MspInit+0xb8>)
 80008a8:	f000 fb98 	bl	8000fdc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 80008ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 80008b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b6:	6593      	str	r3, [r2, #88]	; 0x58
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 80008ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80008c4:	bf00      	nop
 80008c6:	37c0      	adds	r7, #192	; 0xc0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40005800 	.word	0x40005800
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000400 	.word	0x48000400

080008d8 <main>:
  */



int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008de:	f000 f902 	bl	8000ae6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e2:	f000 f815 	bl	8000910 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e6:	f7ff fed9 	bl	800069c <MX_GPIO_Init>
  MX_CAN1_Init();
 80008ea:	f7ff fe5d 	bl	80005a8 <MX_CAN1_Init>
  MX_I2C2_Init();
 80008ee:	f7ff ff55 	bl	800079c <MX_I2C2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(500);
 80008f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f6:	f000 f96b 	bl	8000bd0 <HAL_Delay>
  int status;

  static uint8_t eeData[256];

  status = MLX90621_DumpEE(eeData);
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <main+0x34>)
 80008fc:	f7ff fc7e 	bl	80001fc <_Z15MLX90621_DumpEEPh>
 8000900:	6078      	str	r0, [r7, #4]

  status = MLX90621_Configure(eeData);
 8000902:	4802      	ldr	r0, [pc, #8]	; (800090c <main+0x34>)
 8000904:	f7ff fc8a 	bl	800021c <_Z18MLX90621_ConfigurePh>
 8000908:	6078      	str	r0, [r7, #4]


  while (1)
 800090a:	e7fe      	b.n	800090a <main+0x32>
 800090c:	200000a8 	.word	0x200000a8

08000910 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b098      	sub	sp, #96	; 0x60
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2248      	movs	r2, #72	; 0x48
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fa2c 	bl	8003d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000932:	2000      	movs	r0, #0
 8000934:	f001 fd08 	bl	8002348 <HAL_PWREx_ControlVoltageScaling>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8000948:	f000 f83f 	bl	80009ca <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000954:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000956:	2302      	movs	r3, #2
 8000958:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095a:	2303      	movs	r3, #3
 800095c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000962:	231e      	movs	r3, #30
 8000964:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000966:	2302      	movs	r3, #2
 8000968:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800096a:	2302      	movs	r3, #2
 800096c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800096e:	2302      	movs	r3, #2
 8000970:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000972:	f107 0318 	add.w	r3, r7, #24
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fd8a 	bl	8002490 <HAL_RCC_OscConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	bf14      	ite	ne
 8000982:	2301      	movne	r3, #1
 8000984:	2300      	moveq	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 800098c:	f000 f81d 	bl	80009ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	230f      	movs	r3, #15
 8000992:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	2303      	movs	r3, #3
 8000996:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2105      	movs	r1, #5
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 f9ed 	bl	8002d88 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 80009be:	f000 f804 	bl	80009ca <Error_Handler>
  }
}
 80009c2:	bf00      	nop
 80009c4:	3760      	adds	r7, #96	; 0x60
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ce:	b672      	cpsid	i
}
 80009d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <HAL_MspInit+0x44>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_MspInit+0x44>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6613      	str	r3, [r2, #96]	; 0x60
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_MspInit+0x44>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_MspInit+0x44>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <HAL_MspInit+0x44>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6593      	str	r3, [r2, #88]	; 0x58
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_MspInit+0x44>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f000 f892 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a98:	f7ff ffea 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	; (8000ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <LoopForever+0xe>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	; (8000ae0 <LoopForever+0x16>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f003 f937 	bl	8003d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ac6:	f7ff ff07 	bl	80008d8 <main>

08000aca <LoopForever>:

LoopForever:
    b LoopForever
 8000aca:	e7fe      	b.n	8000aca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000acc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad8:	08003df4 	.word	0x08003df4
  ldr r2, =_sbss
 8000adc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae0:	200001ac 	.word	0x200001ac

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>

08000ae6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 fa3f 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f80e 	bl	8000b18 <HAL_InitTick>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	e001      	b.n	8000b0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b08:	f7ff ff64 	bl	80009d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_InitTick+0x6c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d023      	beq.n	8000b74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_InitTick+0x70>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_InitTick+0x6c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fa3d 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10f      	bne.n	8000b6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d809      	bhi.n	8000b68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f000 fa15 	bl	8000f8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_InitTick+0x74>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e007      	b.n	8000b78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e004      	b.n	8000b78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e001      	b.n	8000b78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	200001a8 	.word	0x200001a8

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200001a8 	.word	0x200001a8

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008

08000c18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e0ed      	b.n	8000e06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fcec 	bl	8000614 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f042 0201 	orr.w	r2, r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c4c:	f7ff ffb4 	bl	8000bb8 <HAL_GetTick>
 8000c50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c52:	e012      	b.n	8000c7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c54:	f7ff ffb0 	bl	8000bb8 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b0a      	cmp	r3, #10
 8000c60:	d90b      	bls.n	8000c7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2205      	movs	r2, #5
 8000c72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e0c5      	b.n	8000e06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0e5      	beq.n	8000c54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 0202 	bic.w	r2, r2, #2
 8000c96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c98:	f7ff ff8e 	bl	8000bb8 <HAL_GetTick>
 8000c9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c9e:	e012      	b.n	8000cc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca0:	f7ff ff8a 	bl	8000bb8 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b0a      	cmp	r3, #10
 8000cac:	d90b      	bls.n	8000cc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2205      	movs	r2, #5
 8000cbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e09f      	b.n	8000e06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1e5      	bne.n	8000ca0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7e1b      	ldrb	r3, [r3, #24]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d108      	bne.n	8000cee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	e007      	b.n	8000cfe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7e5b      	ldrb	r3, [r3, #25]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d108      	bne.n	8000d18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e007      	b.n	8000d28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7e9b      	ldrb	r3, [r3, #26]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d108      	bne.n	8000d42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 0220 	orr.w	r2, r2, #32
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e007      	b.n	8000d52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0220 	bic.w	r2, r2, #32
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7edb      	ldrb	r3, [r3, #27]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d108      	bne.n	8000d6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0210 	bic.w	r2, r2, #16
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e007      	b.n	8000d7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0210 	orr.w	r2, r2, #16
 8000d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7f1b      	ldrb	r3, [r3, #28]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d108      	bne.n	8000d96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0208 	orr.w	r2, r2, #8
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e007      	b.n	8000da6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0208 	bic.w	r2, r2, #8
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7f5b      	ldrb	r3, [r3, #29]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d108      	bne.n	8000dc0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f042 0204 	orr.w	r2, r2, #4
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e007      	b.n	8000dd0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0204 	bic.w	r2, r2, #4
 8000dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	431a      	orrs	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	ea42 0103 	orr.w	r1, r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	1e5a      	subs	r2, r3, #1
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff47 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5c 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff8e 	bl	8000ec8 <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5d 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb0 	bl	8000f30 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e166      	b.n	80012ba <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8158 	beq.w	80012b4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <HAL_GPIO_Init+0x40>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d123      	bne.n	800110e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0203 	and.w	r2, r3, #3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80b2 	beq.w	80012b4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	4b61      	ldr	r3, [pc, #388]	; (80012d8 <HAL_GPIO_Init+0x2fc>)
 8001152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001154:	4a60      	ldr	r2, [pc, #384]	; (80012d8 <HAL_GPIO_Init+0x2fc>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6613      	str	r3, [r2, #96]	; 0x60
 800115c:	4b5e      	ldr	r3, [pc, #376]	; (80012d8 <HAL_GPIO_Init+0x2fc>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001168:	4a5c      	ldr	r2, [pc, #368]	; (80012dc <HAL_GPIO_Init+0x300>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001192:	d02b      	beq.n	80011ec <HAL_GPIO_Init+0x210>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_GPIO_Init+0x304>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d025      	beq.n	80011e8 <HAL_GPIO_Init+0x20c>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a51      	ldr	r2, [pc, #324]	; (80012e4 <HAL_GPIO_Init+0x308>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d01f      	beq.n	80011e4 <HAL_GPIO_Init+0x208>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d019      	beq.n	80011e0 <HAL_GPIO_Init+0x204>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <HAL_GPIO_Init+0x310>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d013      	beq.n	80011dc <HAL_GPIO_Init+0x200>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <HAL_GPIO_Init+0x314>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d00d      	beq.n	80011d8 <HAL_GPIO_Init+0x1fc>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a4d      	ldr	r2, [pc, #308]	; (80012f4 <HAL_GPIO_Init+0x318>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d007      	beq.n	80011d4 <HAL_GPIO_Init+0x1f8>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_GPIO_Init+0x31c>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d101      	bne.n	80011d0 <HAL_GPIO_Init+0x1f4>
 80011cc:	2307      	movs	r3, #7
 80011ce:	e00e      	b.n	80011ee <HAL_GPIO_Init+0x212>
 80011d0:	2308      	movs	r3, #8
 80011d2:	e00c      	b.n	80011ee <HAL_GPIO_Init+0x212>
 80011d4:	2306      	movs	r3, #6
 80011d6:	e00a      	b.n	80011ee <HAL_GPIO_Init+0x212>
 80011d8:	2305      	movs	r3, #5
 80011da:	e008      	b.n	80011ee <HAL_GPIO_Init+0x212>
 80011dc:	2304      	movs	r3, #4
 80011de:	e006      	b.n	80011ee <HAL_GPIO_Init+0x212>
 80011e0:	2303      	movs	r3, #3
 80011e2:	e004      	b.n	80011ee <HAL_GPIO_Init+0x212>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x212>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_GPIO_Init+0x212>
 80011ec:	2300      	movs	r3, #0
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	f002 0203 	and.w	r2, r2, #3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4093      	lsls	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011fe:	4937      	ldr	r1, [pc, #220]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800120c:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_GPIO_Init+0x320>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001230:	4a32      	ldr	r2, [pc, #200]	; (80012fc <HAL_GPIO_Init+0x320>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001236:	4b31      	ldr	r3, [pc, #196]	; (80012fc <HAL_GPIO_Init+0x320>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800125a:	4a28      	ldr	r2, [pc, #160]	; (80012fc <HAL_GPIO_Init+0x320>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <HAL_GPIO_Init+0x320>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001284:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_GPIO_Init+0x320>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_GPIO_Init+0x320>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ae:	4a13      	ldr	r2, [pc, #76]	; (80012fc <HAL_GPIO_Init+0x320>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f47f ae91 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000
 80012e0:	48000400 	.word	0x48000400
 80012e4:	48000800 	.word	0x48000800
 80012e8:	48000c00 	.word	0x48000c00
 80012ec:	48001000 	.word	0x48001000
 80012f0:	48001400 	.word	0x48001400
 80012f4:	48001800 	.word	0x48001800
 80012f8:	48001c00 	.word	0x48001c00
 80012fc:	40010400 	.word	0x40010400

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800131c:	e002      	b.n	8001324 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e081      	b.n	8001446 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fa60 	bl	800081c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2224      	movs	r2, #36	; 0x24
 8001360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001380:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001390:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d107      	bne.n	80013aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	e006      	b.n	80013b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d104      	bne.n	80013ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69d9      	ldr	r1, [r3, #28]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1a      	ldr	r2, [r3, #32]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2220      	movs	r2, #32
 8001432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	461a      	mov	r2, r3
 800145c:	460b      	mov	r3, r1
 800145e:	817b      	strh	r3, [r7, #10]
 8001460:	4613      	mov	r3, r2
 8001462:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b20      	cmp	r3, #32
 800146e:	f040 80da 	bne.w	8001626 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_I2C_Master_Transmit+0x30>
 800147c:	2302      	movs	r3, #2
 800147e:	e0d3      	b.n	8001628 <HAL_I2C_Master_Transmit+0x1d8>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001488:	f7ff fb96 	bl	8000bb8 <HAL_GetTick>
 800148c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2319      	movs	r3, #25
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fb54 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0be      	b.n	8001628 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2221      	movs	r2, #33	; 0x21
 80014ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2210      	movs	r2, #16
 80014b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	893a      	ldrh	r2, [r7, #8]
 80014ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	2bff      	cmp	r3, #255	; 0xff
 80014da:	d90e      	bls.n	80014fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	22ff      	movs	r2, #255	; 0xff
 80014e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	8979      	ldrh	r1, [r7, #10]
 80014ea:	4b51      	ldr	r3, [pc, #324]	; (8001630 <HAL_I2C_Master_Transmit+0x1e0>)
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 fd4a 	bl	8001f8c <I2C_TransferConfig>
 80014f8:	e06c      	b.n	80015d4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001508:	b2da      	uxtb	r2, r3
 800150a:	8979      	ldrh	r1, [r7, #10]
 800150c:	4b48      	ldr	r3, [pc, #288]	; (8001630 <HAL_I2C_Master_Transmit+0x1e0>)
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 fd39 	bl	8001f8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800151a:	e05b      	b.n	80015d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	6a39      	ldr	r1, [r7, #32]
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 fb51 	bl	8001bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e07b      	b.n	8001628 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154a:	b29b      	uxth	r3, r3
 800154c:	3b01      	subs	r3, #1
 800154e:	b29a      	uxth	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001558:	3b01      	subs	r3, #1
 800155a:	b29a      	uxth	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001564:	b29b      	uxth	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d034      	beq.n	80015d4 <HAL_I2C_Master_Transmit+0x184>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156e:	2b00      	cmp	r3, #0
 8001570:	d130      	bne.n	80015d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	2200      	movs	r2, #0
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 fae3 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e04d      	b.n	8001628 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001590:	b29b      	uxth	r3, r3
 8001592:	2bff      	cmp	r3, #255	; 0xff
 8001594:	d90e      	bls.n	80015b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	22ff      	movs	r2, #255	; 0xff
 800159a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	8979      	ldrh	r1, [r7, #10]
 80015a4:	2300      	movs	r3, #0
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 fced 	bl	8001f8c <I2C_TransferConfig>
 80015b2:	e00f      	b.n	80015d4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	8979      	ldrh	r1, [r7, #10]
 80015c6:	2300      	movs	r3, #0
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 fcdc 	bl	8001f8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d8:	b29b      	uxth	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d19e      	bne.n	800151c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	6a39      	ldr	r1, [r7, #32]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 fb30 	bl	8001c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e01a      	b.n	8001628 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2220      	movs	r2, #32
 80015f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_I2C_Master_Transmit+0x1e4>)
 8001606:	400b      	ands	r3, r1
 8001608:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001626:	2302      	movs	r3, #2
  }
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	80002000 	.word	0x80002000
 8001634:	fe00e800 	.word	0xfe00e800

08001638 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af02      	add	r7, sp, #8
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	461a      	mov	r2, r3
 8001644:	460b      	mov	r3, r1
 8001646:	817b      	strh	r3, [r7, #10]
 8001648:	4613      	mov	r3, r2
 800164a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b20      	cmp	r3, #32
 8001656:	f040 80db 	bne.w	8001810 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_I2C_Master_Receive+0x30>
 8001664:	2302      	movs	r3, #2
 8001666:	e0d4      	b.n	8001812 <HAL_I2C_Master_Receive+0x1da>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001670:	f7ff faa2 	bl	8000bb8 <HAL_GetTick>
 8001674:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2319      	movs	r3, #25
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 fa60 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0bf      	b.n	8001812 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2222      	movs	r2, #34	; 0x22
 8001696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2210      	movs	r2, #16
 800169e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	893a      	ldrh	r2, [r7, #8]
 80016b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016be:	b29b      	uxth	r3, r3
 80016c0:	2bff      	cmp	r3, #255	; 0xff
 80016c2:	d90e      	bls.n	80016e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	22ff      	movs	r2, #255	; 0xff
 80016c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	8979      	ldrh	r1, [r7, #10]
 80016d2:	4b52      	ldr	r3, [pc, #328]	; (800181c <HAL_I2C_Master_Receive+0x1e4>)
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 fc56 	bl	8001f8c <I2C_TransferConfig>
 80016e0:	e06d      	b.n	80017be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	8979      	ldrh	r1, [r7, #10]
 80016f4:	4b49      	ldr	r3, [pc, #292]	; (800181c <HAL_I2C_Master_Receive+0x1e4>)
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fc45 	bl	8001f8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001702:	e05c      	b.n	80017be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	6a39      	ldr	r1, [r7, #32]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 fad9 	bl	8001cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e07c      	b.n	8001812 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	3b01      	subs	r3, #1
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174e:	b29b      	uxth	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d034      	beq.n	80017be <HAL_I2C_Master_Receive+0x186>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	d130      	bne.n	80017be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	2200      	movs	r2, #0
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f9ee 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e04d      	b.n	8001812 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	2bff      	cmp	r3, #255	; 0xff
 800177e:	d90e      	bls.n	800179e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	22ff      	movs	r2, #255	; 0xff
 8001784:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178a:	b2da      	uxtb	r2, r3
 800178c:	8979      	ldrh	r1, [r7, #10]
 800178e:	2300      	movs	r3, #0
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fbf8 	bl	8001f8c <I2C_TransferConfig>
 800179c:	e00f      	b.n	80017be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	8979      	ldrh	r1, [r7, #10]
 80017b0:	2300      	movs	r3, #0
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 fbe7 	bl	8001f8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d19d      	bne.n	8001704 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	6a39      	ldr	r1, [r7, #32]
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 fa3b 	bl	8001c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e01a      	b.n	8001812 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2220      	movs	r2, #32
 80017e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_I2C_Master_Receive+0x1e8>)
 80017f0:	400b      	ands	r3, r1
 80017f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e000      	b.n	8001812 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001810:	2302      	movs	r3, #2
  }
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	80002400 	.word	0x80002400
 8001820:	fe00e800 	.word	0xfe00e800

08001824 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4603      	mov	r3, r0
 8001834:	817b      	strh	r3, [r7, #10]
 8001836:	460b      	mov	r3, r1
 8001838:	813b      	strh	r3, [r7, #8]
 800183a:	4613      	mov	r3, r2
 800183c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b20      	cmp	r3, #32
 8001848:	f040 80fd 	bne.w	8001a46 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_I2C_Mem_Read+0x34>
 8001852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d105      	bne.n	8001864 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0f1      	b.n	8001a48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_I2C_Mem_Read+0x4e>
 800186e:	2302      	movs	r3, #2
 8001870:	e0ea      	b.n	8001a48 <HAL_I2C_Mem_Read+0x224>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800187a:	f7ff f99d 	bl	8000bb8 <HAL_GetTick>
 800187e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2319      	movs	r3, #25
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f95b 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0d5      	b.n	8001a48 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2222      	movs	r2, #34	; 0x22
 80018a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2240      	movs	r2, #64	; 0x40
 80018a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a3a      	ldr	r2, [r7, #32]
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018c4:	88f8      	ldrh	r0, [r7, #6]
 80018c6:	893a      	ldrh	r2, [r7, #8]
 80018c8:	8979      	ldrh	r1, [r7, #10]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	4603      	mov	r3, r0
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 f8bf 	bl	8001a58 <I2C_RequestMemoryRead>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0ad      	b.n	8001a48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2bff      	cmp	r3, #255	; 0xff
 80018f4:	d90e      	bls.n	8001914 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	22ff      	movs	r2, #255	; 0xff
 80018fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001900:	b2da      	uxtb	r2, r3
 8001902:	8979      	ldrh	r1, [r7, #10]
 8001904:	4b52      	ldr	r3, [pc, #328]	; (8001a50 <HAL_I2C_Mem_Read+0x22c>)
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 fb3d 	bl	8001f8c <I2C_TransferConfig>
 8001912:	e00f      	b.n	8001934 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001922:	b2da      	uxtb	r2, r3
 8001924:	8979      	ldrh	r1, [r7, #10]
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_I2C_Mem_Read+0x22c>)
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 fb2c 	bl	8001f8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193a:	2200      	movs	r2, #0
 800193c:	2104      	movs	r1, #4
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 f902 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07c      	b.n	8001a48 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001976:	b29b      	uxth	r3, r3
 8001978:	3b01      	subs	r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001984:	b29b      	uxth	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d034      	beq.n	80019f4 <HAL_I2C_Mem_Read+0x1d0>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198e:	2b00      	cmp	r3, #0
 8001990:	d130      	bne.n	80019f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001998:	2200      	movs	r2, #0
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f8d3 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e04d      	b.n	8001a48 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	d90e      	bls.n	80019d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	22ff      	movs	r2, #255	; 0xff
 80019ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	8979      	ldrh	r1, [r7, #10]
 80019c4:	2300      	movs	r3, #0
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 fadd 	bl	8001f8c <I2C_TransferConfig>
 80019d2:	e00f      	b.n	80019f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	8979      	ldrh	r1, [r7, #10]
 80019e6:	2300      	movs	r3, #0
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 facc 	bl	8001f8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d19a      	bne.n	8001934 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f920 	bl	8001c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e01a      	b.n	8001a48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2220      	movs	r2, #32
 8001a18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_I2C_Mem_Read+0x230>)
 8001a26:	400b      	ands	r3, r1
 8001a28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a46:	2302      	movs	r3, #2
  }
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	80002400 	.word	0x80002400
 8001a54:	fe00e800 	.word	0xfe00e800

08001a58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	817b      	strh	r3, [r7, #10]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	813b      	strh	r3, [r7, #8]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	8979      	ldrh	r1, [r7, #10]
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <I2C_RequestMemoryRead+0xa4>)
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 fa84 	bl	8001f8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f89d 	bl	8001bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e02c      	b.n	8001af2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d105      	bne.n	8001aaa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a9e:	893b      	ldrh	r3, [r7, #8]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8001aa8:	e015      	b.n	8001ad6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001aaa:	893b      	ldrh	r3, [r7, #8]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	69b9      	ldr	r1, [r7, #24]
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 f883 	bl	8001bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e012      	b.n	8001af2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001acc:	893b      	ldrh	r3, [r7, #8]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2200      	movs	r2, #0
 8001ade:	2140      	movs	r1, #64	; 0x40
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 f831 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	80002000 	.word	0x80002000

08001b00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d103      	bne.n	8001b1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d007      	beq.n	8001b3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	619a      	str	r2, [r3, #24]
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	4613      	mov	r3, r2
 8001b56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b58:	e022      	b.n	8001ba0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b60:	d01e      	beq.n	8001ba0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b62:	f7ff f829 	bl	8000bb8 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d302      	bcc.n	8001b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d113      	bne.n	8001ba0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e00f      	b.n	8001bc0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d0cd      	beq.n	8001b5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd4:	e02c      	b.n	8001c30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f8ea 	bl	8001db4 <I2C_IsErrorOccurred>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e02a      	b.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf0:	d01e      	beq.n	8001c30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf2:	f7fe ffe1 	bl	8000bb8 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d302      	bcc.n	8001c08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d113      	bne.n	8001c30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f043 0220 	orr.w	r2, r3, #32
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e007      	b.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d1cb      	bne.n	8001bd6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c54:	e028      	b.n	8001ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f8aa 	bl	8001db4 <I2C_IsErrorOccurred>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e026      	b.n	8001cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6a:	f7fe ffa5 	bl	8000bb8 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d302      	bcc.n	8001c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d113      	bne.n	8001ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e007      	b.n	8001cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d1cf      	bne.n	8001c56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ccc:	e064      	b.n	8001d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f86e 	bl	8001db4 <I2C_IsErrorOccurred>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e062      	b.n	8001da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d138      	bne.n	8001d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d105      	bne.n	8001d0a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e04e      	b.n	8001da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b10      	cmp	r3, #16
 8001d16:	d107      	bne.n	8001d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2204      	movs	r2, #4
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
 8001d26:	e002      	b.n	8001d2e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2220      	movs	r2, #32
 8001d34:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001d42:	400b      	ands	r3, r1
 8001d44:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e022      	b.n	8001da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d62:	f7fe ff29 	bl	8000bb8 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d302      	bcc.n	8001d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10f      	bne.n	8001d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f043 0220 	orr.w	r2, r3, #32
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e007      	b.n	8001da8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d193      	bne.n	8001cce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	fe00e800 	.word	0xfe00e800

08001db4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d075      	beq.n	8001ecc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2210      	movs	r2, #16
 8001de6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001de8:	e056      	b.n	8001e98 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df0:	d052      	beq.n	8001e98 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001df2:	f7fe fee1 	bl	8000bb8 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d302      	bcc.n	8001e08 <I2C_IsErrorOccurred+0x54>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d147      	bne.n	8001e98 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e2a:	d12e      	bne.n	8001e8a <I2C_IsErrorOccurred+0xd6>
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e32:	d02a      	beq.n	8001e8a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d027      	beq.n	8001e8a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e4a:	f7fe feb5 	bl	8000bb8 <HAL_GetTick>
 8001e4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e50:	e01b      	b.n	8001e8a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e52:	f7fe feb1 	bl	8000bb8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b19      	cmp	r3, #25
 8001e5e:	d914      	bls.n	8001e8a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	f043 0220 	orr.w	r2, r3, #32
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d1dc      	bne.n	8001e52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d003      	beq.n	8001eae <I2C_IsErrorOccurred+0xfa>
 8001ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d09d      	beq.n	8001dea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d103      	bne.n	8001ebe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00b      	beq.n	8001f18 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f043 0308 	orr.w	r3, r3, #8
 8001f06:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01c      	beq.n	8001f7c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff fddc 	bl	8001b00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <I2C_IsErrorOccurred+0x1d4>)
 8001f54:	400b      	ands	r3, r1
 8001f56:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	fe00e800 	.word	0xfe00e800

08001f8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	817b      	strh	r3, [r7, #10]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f9e:	897b      	ldrh	r3, [r7, #10]
 8001fa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fa4:	7a7b      	ldrb	r3, [r7, #9]
 8001fa6:	041b      	lsls	r3, r3, #16
 8001fa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	0d5b      	lsrs	r3, r3, #21
 8001fc6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <I2C_TransferConfig+0x60>)
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	ea02 0103 	and.w	r1, r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fde:	bf00      	nop
 8001fe0:	371c      	adds	r7, #28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	03ff63ff 	.word	0x03ff63ff

08001ff0 <HAL_I2C_Master_Transmit_No_Stop>:
}


HAL_StatusTypeDef HAL_I2C_Master_Transmit_No_Stop(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          	  	  uint16_t Size, uint32_t Timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	817b      	strh	r3, [r7, #10]
 8002000:	4613      	mov	r3, r2
 8002002:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b20      	cmp	r3, #32
 800200e:	f040 80da 	bne.w	80021c6 <HAL_I2C_Master_Transmit_No_Stop+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_I2C_Master_Transmit_No_Stop+0x30>
 800201c:	2302      	movs	r3, #2
 800201e:	e0d3      	b.n	80021c8 <HAL_I2C_Master_Transmit_No_Stop+0x1d8>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002028:	f7fe fdc6 	bl	8000bb8 <HAL_GetTick>
 800202c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2319      	movs	r3, #25
 8002034:	2201      	movs	r2, #1
 8002036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff fd84 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Master_Transmit_No_Stop+0x5a>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0be      	b.n	80021c8 <HAL_I2C_Master_Transmit_No_Stop+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2221      	movs	r2, #33	; 0x21
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2210      	movs	r2, #16
 8002056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	893a      	ldrh	r2, [r7, #8]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	2bff      	cmp	r3, #255	; 0xff
 800207a:	d90e      	bls.n	800209a <HAL_I2C_Master_Transmit_No_Stop+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	22ff      	movs	r2, #255	; 0xff
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002086:	b2da      	uxtb	r2, r3
 8002088:	8979      	ldrh	r1, [r7, #10]
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <HAL_I2C_Master_Transmit_No_Stop+0x1e0>)
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff ff7a 	bl	8001f8c <I2C_TransferConfig>
 8002098:	e06c      	b.n	8002174 <HAL_I2C_Master_Transmit_No_Stop+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	8979      	ldrh	r1, [r7, #10]
 80020ac:	4b48      	ldr	r3, [pc, #288]	; (80021d0 <HAL_I2C_Master_Transmit_No_Stop+0x1e0>)
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff ff69 	bl	8001f8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80020ba:	e05b      	b.n	8002174 <HAL_I2C_Master_Transmit_No_Stop+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	6a39      	ldr	r1, [r7, #32]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f7ff fd81 	bl	8001bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_I2C_Master_Transmit_No_Stop+0xe0>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e07b      	b.n	80021c8 <HAL_I2C_Master_Transmit_No_Stop+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d034      	beq.n	8002174 <HAL_I2C_Master_Transmit_No_Stop+0x184>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210e:	2b00      	cmp	r3, #0
 8002110:	d130      	bne.n	8002174 <HAL_I2C_Master_Transmit_No_Stop+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	2200      	movs	r2, #0
 800211a:	2180      	movs	r1, #128	; 0x80
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fd13 	bl	8001b48 <I2C_WaitOnFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_I2C_Master_Transmit_No_Stop+0x13c>
        {
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e04d      	b.n	80021c8 <HAL_I2C_Master_Transmit_No_Stop+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	2bff      	cmp	r3, #255	; 0xff
 8002134:	d90e      	bls.n	8002154 <HAL_I2C_Master_Transmit_No_Stop+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	22ff      	movs	r2, #255	; 0xff
 800213a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	b2da      	uxtb	r2, r3
 8002142:	8979      	ldrh	r1, [r7, #10]
 8002144:	2300      	movs	r3, #0
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f7ff ff1d 	bl	8001f8c <I2C_TransferConfig>
 8002152:	e00f      	b.n	8002174 <HAL_I2C_Master_Transmit_No_Stop+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002162:	b2da      	uxtb	r2, r3
 8002164:	8979      	ldrh	r1, [r7, #10]
 8002166:	2300      	movs	r3, #0
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f7ff ff0c 	bl	8001f8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d19e      	bne.n	80020bc <HAL_I2C_Master_Transmit_No_Stop+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f7ff fd60 	bl	8001c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_Master_Transmit_No_Stop+0x1a2>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e01a      	b.n	80021c8 <HAL_I2C_Master_Transmit_No_Stop+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2220      	movs	r2, #32
 8002198:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_I2C_Master_Transmit_No_Stop+0x1e4>)
 80021a6:	400b      	ands	r3, r1
 80021a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_I2C_Master_Transmit_No_Stop+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	80002000 	.word	0x80002000
 80021d4:	fe00e800 	.word	0xfe00e800

080021d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d138      	bne.n	8002260 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e032      	b.n	8002262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	; 0x24
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800222a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e000      	b.n	8002262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002260:	2302      	movs	r3, #2
  }
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b20      	cmp	r3, #32
 8002282:	d139      	bne.n	80022f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800228e:	2302      	movs	r3, #2
 8002290:	e033      	b.n	80022fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2224      	movs	r2, #36	; 0x24
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_PWREx_GetVoltageRange+0x3c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002318:	d102      	bne.n	8002320 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800231a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231e:	e00b      	b.n	8002338 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232e:	d102      	bne.n	8002336 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002334:	e000      	b.n	8002338 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002336:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40007000 	.word	0x40007000

08002348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d141      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002356:	4b4b      	ldr	r3, [pc, #300]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002362:	d131      	bne.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002364:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800236a:	4a46      	ldr	r2, [pc, #280]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800237c:	4a41      	ldr	r2, [pc, #260]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002384:	4b40      	ldr	r3, [pc, #256]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2232      	movs	r2, #50	; 0x32
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	4a3f      	ldr	r2, [pc, #252]	; (800248c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	0c9b      	lsrs	r3, r3, #18
 8002396:	3301      	adds	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239a:	e002      	b.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3b01      	subs	r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ae:	d102      	bne.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f2      	bne.n	800239c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c2:	d158      	bne.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e057      	b.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c8:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ce:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023d8:	e04d      	b.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e0:	d141      	bne.n	8002466 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023e2:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ee:	d131      	bne.n	8002454 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f6:	4a23      	ldr	r2, [pc, #140]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002408:	4a1e      	ldr	r2, [pc, #120]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2232      	movs	r2, #50	; 0x32
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	0c9b      	lsrs	r3, r3, #18
 8002422:	3301      	adds	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002426:	e002      	b.n	800242e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3b01      	subs	r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243a:	d102      	bne.n	8002442 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f2      	bne.n	8002428 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244e:	d112      	bne.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e011      	b.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002464:	e007      	b.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002474:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40007000 	.word	0x40007000
 8002488:	20000000 	.word	0x20000000
 800248c:	431bde83 	.word	0x431bde83

08002490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f000 bc68 	b.w	8002d74 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a4:	4b97      	ldr	r3, [pc, #604]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ae:	4b95      	ldr	r3, [pc, #596]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80e6 	beq.w	8002692 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <HAL_RCC_OscConfig+0x4c>
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	f040 808d 	bne.w	80025ee <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	f040 8089 	bne.w	80025ee <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024dc:	4b89      	ldr	r3, [pc, #548]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <HAL_RCC_OscConfig+0x66>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f000 bc3f 	b.w	8002d74 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024fa:	4b82      	ldr	r3, [pc, #520]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_RCC_OscConfig+0x80>
 8002506:	4b7f      	ldr	r3, [pc, #508]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800250e:	e005      	b.n	800251c <HAL_RCC_OscConfig+0x8c>
 8002510:	4b7c      	ldr	r3, [pc, #496]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800251c:	4293      	cmp	r3, r2
 800251e:	d224      	bcs.n	800256a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fdf3 	bl	8003110 <RCC_SetFlashLatencyFromMSIRange>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f000 bc1f 	b.w	8002d74 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002536:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a72      	ldr	r2, [pc, #456]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b70      	ldr	r3, [pc, #448]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	496d      	ldr	r1, [pc, #436]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002554:	4b6b      	ldr	r3, [pc, #428]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	4968      	ldr	r1, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
 8002568:	e025      	b.n	80025b6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256a:	4b66      	ldr	r3, [pc, #408]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a65      	ldr	r2, [pc, #404]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	4960      	ldr	r1, [pc, #384]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002588:	4b5e      	ldr	r3, [pc, #376]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	495b      	ldr	r1, [pc, #364]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fdb2 	bl	8003110 <RCC_SetFlashLatencyFromMSIRange>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e3de      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b6:	f000 fd21 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 80025ba:	4602      	mov	r2, r0
 80025bc:	4b51      	ldr	r3, [pc, #324]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	4950      	ldr	r1, [pc, #320]	; (8002708 <HAL_RCC_OscConfig+0x278>)
 80025c8:	5ccb      	ldrb	r3, [r1, r3]
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	4a4e      	ldr	r2, [pc, #312]	; (800270c <HAL_RCC_OscConfig+0x27c>)
 80025d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025d6:	4b4e      	ldr	r3, [pc, #312]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fa9c 	bl	8000b18 <HAL_InitTick>
 80025e0:	4603      	mov	r3, r0
 80025e2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d052      	beq.n	8002690 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	e3c2      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d032      	beq.n	800265c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025f6:	4b43      	ldr	r3, [pc, #268]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a42      	ldr	r2, [pc, #264]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002602:	f7fe fad9 	bl	8000bb8 <HAL_GetTick>
 8002606:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800260a:	f7fe fad5 	bl	8000bb8 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e3ab      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800261c:	4b39      	ldr	r3, [pc, #228]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002628:	4b36      	ldr	r3, [pc, #216]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a35      	ldr	r2, [pc, #212]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 800262e:	f043 0308 	orr.w	r3, r3, #8
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b33      	ldr	r3, [pc, #204]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	4930      	ldr	r1, [pc, #192]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002646:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	492b      	ldr	r1, [pc, #172]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
 800265a:	e01a      	b.n	8002692 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a28      	ldr	r2, [pc, #160]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002668:	f7fe faa6 	bl	8000bb8 <HAL_GetTick>
 800266c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002670:	f7fe faa2 	bl	8000bb8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e378      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1e0>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d073      	beq.n	8002786 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x220>
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d10e      	bne.n	80026c8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d10b      	bne.n	80026c8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d063      	beq.n	8002784 <HAL_RCC_OscConfig+0x2f4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d15f      	bne.n	8002784 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e355      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_OscConfig+0x250>
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e025      	b.n	800272c <HAL_RCC_OscConfig+0x29c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e8:	d114      	bne.n	8002714 <HAL_RCC_OscConfig+0x284>
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a02      	ldr	r2, [pc, #8]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e013      	b.n	800272c <HAL_RCC_OscConfig+0x29c>
 8002704:	40021000 	.word	0x40021000
 8002708:	08003dac 	.word	0x08003dac
 800270c:	20000000 	.word	0x20000000
 8002710:	20000004 	.word	0x20000004
 8002714:	4b8f      	ldr	r3, [pc, #572]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a8e      	ldr	r2, [pc, #568]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b8c      	ldr	r3, [pc, #560]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a8b      	ldr	r2, [pc, #556]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe fa40 	bl	8000bb8 <HAL_GetTick>
 8002738:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7fe fa3c 	bl	8000bb8 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e312      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274e:	4b81      	ldr	r3, [pc, #516]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x2ac>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fa2c 	bl	8000bb8 <HAL_GetTick>
 8002760:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7fe fa28 	bl	8000bb8 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e2fe      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002776:	4b77      	ldr	r3, [pc, #476]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x2d4>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d060      	beq.n	8002854 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_OscConfig+0x314>
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d119      	bne.n	80027d2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d116      	bne.n	80027d2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a4:	4b6b      	ldr	r3, [pc, #428]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_OscConfig+0x32c>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e2db      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b65      	ldr	r3, [pc, #404]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	4962      	ldr	r1, [pc, #392]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d0:	e040      	b.n	8002854 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d023      	beq.n	8002822 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027da:	4b5e      	ldr	r3, [pc, #376]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a5d      	ldr	r2, [pc, #372]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe f9e7 	bl	8000bb8 <HAL_GetTick>
 80027ea:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fe f9e3 	bl	8000bb8 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e2b9      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002800:	4b54      	ldr	r3, [pc, #336]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b51      	ldr	r3, [pc, #324]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	494e      	ldr	r1, [pc, #312]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
 8002820:	e018      	b.n	8002854 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a4b      	ldr	r2, [pc, #300]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe f9c3 	bl	8000bb8 <HAL_GetTick>
 8002832:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe f9bf 	bl	8000bb8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e295      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002848:	4b42      	ldr	r3, [pc, #264]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 8082 	beq.w	8002966 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d05f      	beq.n	800292a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800286a:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002870:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	429a      	cmp	r2, r3
 800287e:	d037      	beq.n	80028f0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e26d      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01b      	beq.n	80028da <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a8:	4a2a      	ldr	r2, [pc, #168]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028b2:	f7fe f981 	bl	8000bb8 <HAL_GetTick>
 80028b6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ba:	f7fe f97d 	bl	8000bb8 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b11      	cmp	r3, #17
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e253      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ef      	bne.n	80028ba <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e0:	f023 0210 	bic.w	r2, r3, #16
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	491a      	ldr	r1, [pc, #104]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f0:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f6:	4a17      	ldr	r2, [pc, #92]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe f95a 	bl	8000bb8 <HAL_GetTick>
 8002904:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002908:	f7fe f956 	bl	8000bb8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b11      	cmp	r3, #17
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e22c      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ef      	beq.n	8002908 <HAL_RCC_OscConfig+0x478>
 8002928:	e01d      	b.n	8002966 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002930:	4a08      	ldr	r2, [pc, #32]	; (8002954 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293a:	f7fe f93d 	bl	8000bb8 <HAL_GetTick>
 800293e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002942:	f7fe f939 	bl	8000bb8 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b11      	cmp	r3, #17
 800294e:	d903      	bls.n	8002958 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e20f      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
 8002954:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002958:	4b83      	ldr	r3, [pc, #524]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1ed      	bne.n	8002942 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80bd 	beq.w	8002aee <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800297a:	4b7b      	ldr	r3, [pc, #492]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10e      	bne.n	80029a4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4b78      	ldr	r3, [pc, #480]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	4a77      	ldr	r2, [pc, #476]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6593      	str	r3, [r2, #88]	; 0x58
 8002992:	4b75      	ldr	r3, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a4:	4b71      	ldr	r3, [pc, #452]	; (8002b6c <HAL_RCC_OscConfig+0x6dc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d118      	bne.n	80029e2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b0:	4b6e      	ldr	r3, [pc, #440]	; (8002b6c <HAL_RCC_OscConfig+0x6dc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a6d      	ldr	r2, [pc, #436]	; (8002b6c <HAL_RCC_OscConfig+0x6dc>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029bc:	f7fe f8fc 	bl	8000bb8 <HAL_GetTick>
 80029c0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c4:	f7fe f8f8 	bl	8000bb8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1ce      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d6:	4b65      	ldr	r3, [pc, #404]	; (8002b6c <HAL_RCC_OscConfig+0x6dc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d02c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80029ee:	4b5e      	ldr	r3, [pc, #376]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	4959      	ldr	r1, [pc, #356]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d010      	beq.n	8002a36 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a14:	4b54      	ldr	r3, [pc, #336]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	4a53      	ldr	r2, [pc, #332]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	4a4f      	ldr	r2, [pc, #316]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a34:	e018      	b.n	8002a68 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a36:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a46:	e00f      	b.n	8002a68 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a48:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	4a46      	ldr	r2, [pc, #280]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a58:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	4a42      	ldr	r2, [pc, #264]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d016      	beq.n	8002a9e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe f8a2 	bl	8000bb8 <HAL_GetTick>
 8002a74:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7fe f89e 	bl	8000bb8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e172      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8e:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ed      	beq.n	8002a78 <HAL_RCC_OscConfig+0x5e8>
 8002a9c:	e01d      	b.n	8002ada <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7fe f88b 	bl	8000bb8 <HAL_GetTick>
 8002aa2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe f887 	bl	8000bb8 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e15b      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002abc:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1ed      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002aca:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	4a25      	ldr	r2, [pc, #148]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d105      	bne.n	8002aee <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	4a20      	ldr	r2, [pc, #128]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d041      	beq.n	8002b7e <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b02:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b08:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b12:	f7fe f851 	bl	8000bb8 <HAL_GetTick>
 8002b16:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b1a:	f7fe f84d 	bl	8000bb8 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e123      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ef      	beq.n	8002b1a <HAL_RCC_OscConfig+0x68a>
 8002b3a:	e020      	b.n	8002b7e <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_RCC_OscConfig+0x6d8>)
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fe f834 	bl	8000bb8 <HAL_GetTick>
 8002b50:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b52:	e00d      	b.n	8002b70 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b54:	f7fe f830 	bl	8000bb8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d906      	bls.n	8002b70 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e106      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b70:	4b82      	ldr	r3, [pc, #520]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1ea      	bne.n	8002b54 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80f5 	beq.w	8002d72 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	f040 80cb 	bne.w	8002d28 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b92:	4b7a      	ldr	r3, [pc, #488]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d12c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d123      	bne.n	8002c00 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d11b      	bne.n	8002c00 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d113      	bne.n	8002c00 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	3b01      	subs	r3, #1
 8002be6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d109      	bne.n	8002c00 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d06d      	beq.n	8002cdc <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d068      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c06:	4b5d      	ldr	r3, [pc, #372]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d105      	bne.n	8002c1e <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c12:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0a8      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c22:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a55      	ldr	r2, [pc, #340]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c2e:	f7fd ffc3 	bl	8000bb8 <HAL_GetTick>
 8002c32:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c36:	f7fd ffbf 	bl	8000bb8 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e095      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c48:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f0      	bne.n	8002c36 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c54:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <HAL_RCC_OscConfig+0x8f0>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c64:	3a01      	subs	r2, #1
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	4311      	orrs	r1, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c6e:	0212      	lsls	r2, r2, #8
 8002c70:	4311      	orrs	r1, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c76:	0852      	lsrs	r2, r2, #1
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	0552      	lsls	r2, r2, #21
 8002c7c:	4311      	orrs	r1, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c82:	0852      	lsrs	r2, r2, #1
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0652      	lsls	r2, r2, #25
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c8e:	06d2      	lsls	r2, r2, #27
 8002c90:	430a      	orrs	r2, r1
 8002c92:	493a      	ldr	r1, [pc, #232]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c98:	4b38      	ldr	r3, [pc, #224]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a37      	ldr	r2, [pc, #220]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ca4:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cb0:	f7fd ff82 	bl	8000bb8 <HAL_GetTick>
 8002cb4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fd ff7e 	bl	8000bb8 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e054      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cca:	4b2c      	ldr	r3, [pc, #176]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cd6:	e04c      	b.n	8002d72 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e04b      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d144      	bne.n	8002d72 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a23      	ldr	r2, [pc, #140]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cf4:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a20      	ldr	r2, [pc, #128]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d00:	f7fd ff5a 	bl	8000bb8 <HAL_GetTick>
 8002d04:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fd ff56 	bl	8000bb8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e02c      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x878>
 8002d26:	e024      	b.n	8002d72 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d01f      	beq.n	8002d6e <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fd ff3d 	bl	8000bb8 <HAL_GetTick>
 8002d3e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fd ff39 	bl	8000bb8 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e00f      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	4905      	ldr	r1, [pc, #20]	; (8002d7c <HAL_RCC_OscConfig+0x8ec>)
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_RCC_OscConfig+0x8f4>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60cb      	str	r3, [r1, #12]
 8002d6c:	e001      	b.n	8002d72 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3728      	adds	r7, #40	; 0x28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	019d800c 	.word	0x019d800c
 8002d84:	feeefffc 	.word	0xfeeefffc

08002d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e11d      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da0:	4b90      	ldr	r3, [pc, #576]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d910      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b8d      	ldr	r3, [pc, #564]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 020f 	bic.w	r2, r3, #15
 8002db6:	498b      	ldr	r1, [pc, #556]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b89      	ldr	r3, [pc, #548]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e105      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d010      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	4b81      	ldr	r3, [pc, #516]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d908      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dec:	4b7e      	ldr	r3, [pc, #504]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	497b      	ldr	r1, [pc, #492]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d079      	beq.n	8002efe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d11e      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e12:	4b75      	ldr	r3, [pc, #468]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e0dc      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e22:	f000 f9cf 	bl	80031c4 <RCC_GetSysClockFreqFromPLLSource>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4a70      	ldr	r2, [pc, #448]	; (8002fec <HAL_RCC_ClockConfig+0x264>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d946      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e2e:	4b6e      	ldr	r3, [pc, #440]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d140      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e3a:	4b6b      	ldr	r3, [pc, #428]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e42:	4a69      	ldr	r2, [pc, #420]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e035      	b.n	8002ebc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e58:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d115      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0b9      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e70:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0ad      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0a5      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e90:	f000 f8b4 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4a55      	ldr	r2, [pc, #340]	; (8002fec <HAL_RCC_ClockConfig+0x264>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d90f      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e9c:	4b52      	ldr	r3, [pc, #328]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ea8:	4b4f      	ldr	r3, [pc, #316]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb0:	4a4d      	ldr	r2, [pc, #308]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ebc:	4b4a      	ldr	r3, [pc, #296]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 0203 	bic.w	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4947      	ldr	r1, [pc, #284]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ece:	f7fd fe73 	bl	8000bb8 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed6:	f7fd fe6f 	bl	8000bb8 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e077      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eec:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 020c 	and.w	r2, r3, #12
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d1eb      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d105      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f04:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a37      	ldr	r2, [pc, #220]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d010      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d208      	bcs.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	492b      	ldr	r1, [pc, #172]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d210      	bcs.n	8002f6e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 020f 	bic.w	r2, r3, #15
 8002f54:	4923      	ldr	r1, [pc, #140]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <HAL_RCC_ClockConfig+0x25c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e036      	b.n	8002fdc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4918      	ldr	r1, [pc, #96]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4910      	ldr	r1, [pc, #64]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fac:	f000 f826 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_RCC_ClockConfig+0x260>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	490c      	ldr	r1, [pc, #48]	; (8002ff0 <HAL_RCC_ClockConfig+0x268>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x26c>)
 8002fca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fda1 	bl	8000b18 <HAL_InitTick>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	73fb      	strb	r3, [r7, #15]

  return status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40022000 	.word	0x40022000
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	04c4b400 	.word	0x04c4b400
 8002ff0:	08003dac 	.word	0x08003dac
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	20000004 	.word	0x20000004

08002ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800300a:	4b3e      	ldr	r3, [pc, #248]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003014:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x34>
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b0c      	cmp	r3, #12
 8003028:	d121      	bne.n	800306e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d11e      	bne.n	800306e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003030:	4b34      	ldr	r3, [pc, #208]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800303c:	4b31      	ldr	r3, [pc, #196]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e005      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003058:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <HAL_RCC_GetSysClockFreq+0x10c>)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003060:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10d      	bne.n	8003084 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d102      	bne.n	800307a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003074:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_RCC_GetSysClockFreq+0x110>)
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	e004      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d101      	bne.n	8003084 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003080:	4b22      	ldr	r3, [pc, #136]	; (800310c <HAL_RCC_GetSysClockFreq+0x110>)
 8003082:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d134      	bne.n	80030f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d003      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0xac>
 80030a0:	e005      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030a2:	4b1a      	ldr	r3, [pc, #104]	; (800310c <HAL_RCC_GetSysClockFreq+0x110>)
 80030a4:	617b      	str	r3, [r7, #20]
      break;
 80030a6:	e005      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030a8:	4b18      	ldr	r3, [pc, #96]	; (800310c <HAL_RCC_GetSysClockFreq+0x110>)
 80030aa:	617b      	str	r3, [r7, #20]
      break;
 80030ac:	e002      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	617b      	str	r3, [r7, #20]
      break;
 80030b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030b4:	4b13      	ldr	r3, [pc, #76]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3301      	adds	r3, #1
 80030c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	fb03 f202 	mul.w	r2, r3, r2
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_RCC_GetSysClockFreq+0x108>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	0e5b      	lsrs	r3, r3, #25
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	3301      	adds	r3, #1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030f4:	69bb      	ldr	r3, [r7, #24]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	08003dbc 	.word	0x08003dbc
 800310c:	00f42400 	.word	0x00f42400

08003110 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003118:	2300      	movs	r3, #0
 800311a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003128:	f7ff f8ee 	bl	8002308 <HAL_PWREx_GetVoltageRange>
 800312c:	6178      	str	r0, [r7, #20]
 800312e:	e014      	b.n	800315a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	4a21      	ldr	r2, [pc, #132]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313a:	6593      	str	r3, [r2, #88]	; 0x58
 800313c:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003148:	f7ff f8de 	bl	8002308 <HAL_PWREx_GetVoltageRange>
 800314c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	4a1a      	ldr	r2, [pc, #104]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003158:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003160:	d10b      	bne.n	800317a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b80      	cmp	r3, #128	; 0x80
 8003166:	d913      	bls.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2ba0      	cmp	r3, #160	; 0xa0
 800316c:	d902      	bls.n	8003174 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800316e:	2302      	movs	r3, #2
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	e00d      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003174:	2301      	movs	r3, #1
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	e00a      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b7f      	cmp	r3, #127	; 0x7f
 800317e:	d902      	bls.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003180:	2302      	movs	r3, #2
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e004      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b70      	cmp	r3, #112	; 0x70
 800318a:	d101      	bne.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800318c:	2301      	movs	r3, #1
 800318e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 020f 	bic.w	r2, r3, #15
 8003198:	4909      	ldr	r1, [pc, #36]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d001      	beq.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40022000 	.word	0x40022000

080031c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d00b      	beq.n	80031f2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d825      	bhi.n	800322c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d008      	beq.n	80031f8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d11f      	bne.n	800322c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031ee:	613b      	str	r3, [r7, #16]
    break;
 80031f0:	e01f      	b.n	8003232 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031f4:	613b      	str	r3, [r7, #16]
    break;
 80031f6:	e01c      	b.n	8003232 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031f8:	4b21      	ldr	r3, [pc, #132]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003204:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e005      	b.n	8003220 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	613b      	str	r3, [r7, #16]
    break;
 800322a:	e002      	b.n	8003232 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
    break;
 8003230:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003232:	4b13      	ldr	r3, [pc, #76]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	3301      	adds	r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	fb03 f202 	mul.w	r2, r3, r2
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	fbb2 f3f3 	udiv	r3, r2, r3
 8003256:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0e5b      	lsrs	r3, r3, #25
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003272:	683b      	ldr	r3, [r7, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40021000 	.word	0x40021000
 8003284:	00f42400 	.word	0x00f42400
 8003288:	08003dbc 	.word	0x08003dbc

0800328c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003294:	2300      	movs	r3, #0
 8003296:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003298:	2300      	movs	r3, #0
 800329a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d040      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ac:	2b80      	cmp	r3, #128	; 0x80
 80032ae:	d02a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032b0:	2b80      	cmp	r3, #128	; 0x80
 80032b2:	d825      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032b4:	2b60      	cmp	r3, #96	; 0x60
 80032b6:	d026      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032b8:	2b60      	cmp	r3, #96	; 0x60
 80032ba:	d821      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d006      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x42>
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d81d      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d009      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d010      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x62>
 80032cc:	e018      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032ce:	4b89      	ldr	r3, [pc, #548]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	4a88      	ldr	r2, [pc, #544]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032da:	e015      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fb3e 	bl	8003964 <RCCEx_PLLSAI1_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ec:	e00c      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3320      	adds	r3, #32
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fc29 	bl	8003b4c <RCCEx_PLLSAI2_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032fe:	e003      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	74fb      	strb	r3, [r7, #19]
      break;
 8003304:	e000      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800330e:	4b79      	ldr	r3, [pc, #484]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003310:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003314:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331c:	4975      	ldr	r1, [pc, #468]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003324:	e001      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d047      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d030      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003344:	d82a      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334a:	d02a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800334c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003350:	d824      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003356:	d008      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335c:	d81e      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003366:	d010      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003368:	e018      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800336a:	4b62      	ldr	r3, [pc, #392]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4a61      	ldr	r2, [pc, #388]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003374:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003376:	e015      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f000 faf0 	bl	8003964 <RCCEx_PLLSAI1_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003388:	e00c      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3320      	adds	r3, #32
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fbdb 	bl	8003b4c <RCCEx_PLLSAI2_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800339a:	e003      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	74fb      	strb	r3, [r7, #19]
      break;
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80033a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10b      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033aa:	4b52      	ldr	r3, [pc, #328]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	494e      	ldr	r1, [pc, #312]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80033c0:	e001      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c2:	7cfb      	ldrb	r3, [r7, #19]
 80033c4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 809f 	beq.w	8003512 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033d8:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	4a40      	ldr	r2, [pc, #256]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6593      	str	r3, [r2, #88]	; 0x58
 80033fa:	4b3e      	ldr	r3, [pc, #248]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	2301      	movs	r3, #1
 8003408:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800340a:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a3a      	ldr	r2, [pc, #232]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003414:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003416:	f7fd fbcf 	bl	8000bb8 <HAL_GetTick>
 800341a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800341c:	e009      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341e:	f7fd fbcb 	bl	8000bb8 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d902      	bls.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	74fb      	strb	r3, [r7, #19]
        break;
 8003430:	e005      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003432:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0ef      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d15b      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003444:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01f      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	429a      	cmp	r2, r3
 8003460:	d019      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800346e:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003474:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	4a1b      	ldr	r2, [pc, #108]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800348e:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d016      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fd fb8a 	bl	8000bb8 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a6:	e00b      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fd fb86 	bl	8000bb8 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d902      	bls.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	74fb      	strb	r3, [r7, #19]
            break;
 80034be:	e006      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ec      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10c      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e4:	4903      	ldr	r1, [pc, #12]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034ec:	e008      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ee:	7cfb      	ldrb	r3, [r7, #19]
 80034f0:	74bb      	strb	r3, [r7, #18]
 80034f2:	e005      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003500:	7c7b      	ldrb	r3, [r7, #17]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003506:	4ba0      	ldr	r3, [pc, #640]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350a:	4a9f      	ldr	r2, [pc, #636]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800350c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003510:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800351e:	4b9a      	ldr	r3, [pc, #616]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	f023 0203 	bic.w	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	4996      	ldr	r1, [pc, #600]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003540:	4b91      	ldr	r3, [pc, #580]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f023 020c 	bic.w	r2, r3, #12
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	498e      	ldr	r1, [pc, #568]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003562:	4b89      	ldr	r3, [pc, #548]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	4985      	ldr	r1, [pc, #532]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003584:	4b80      	ldr	r3, [pc, #512]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003592:	497d      	ldr	r1, [pc, #500]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035a6:	4b78      	ldr	r3, [pc, #480]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b4:	4974      	ldr	r1, [pc, #464]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035c8:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d6:	496c      	ldr	r1, [pc, #432]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ea:	4b67      	ldr	r3, [pc, #412]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f8:	4963      	ldr	r1, [pc, #396]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800360c:	4b5e      	ldr	r3, [pc, #376]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361a:	495b      	ldr	r1, [pc, #364]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800362e:	4b56      	ldr	r3, [pc, #344]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	4952      	ldr	r1, [pc, #328]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003650:	4b4d      	ldr	r3, [pc, #308]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	494a      	ldr	r1, [pc, #296]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003672:	4b45      	ldr	r3, [pc, #276]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	4941      	ldr	r1, [pc, #260]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003694:	4b3c      	ldr	r3, [pc, #240]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800369a:	f023 0203 	bic.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a2:	4939      	ldr	r1, [pc, #228]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d028      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036b6:	4b34      	ldr	r3, [pc, #208]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c4:	4930      	ldr	r1, [pc, #192]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d4:	d106      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d6:	4b2c      	ldr	r3, [pc, #176]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	4a2b      	ldr	r2, [pc, #172]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e0:	60d3      	str	r3, [r2, #12]
 80036e2:	e011      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f935 	bl	8003964 <RCCEx_PLLSAI1_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d04d      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800371c:	d108      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800371e:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003724:	4a18      	ldr	r2, [pc, #96]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800372a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800372e:	e012      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003730:	4b15      	ldr	r3, [pc, #84]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003736:	4a14      	ldr	r2, [pc, #80]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003738:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800373c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374e:	490e      	ldr	r1, [pc, #56]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800375e:	d106      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a08      	ldr	r2, [pc, #32]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800376a:	60d3      	str	r3, [r2, #12]
 800376c:	e020      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003776:	d109      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a02      	ldr	r2, [pc, #8]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	60d3      	str	r3, [r2, #12]
 8003784:	e014      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003794:	d10c      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3304      	adds	r3, #4
 800379a:	2101      	movs	r1, #1
 800379c:	4618      	mov	r0, r3
 800379e:	f000 f8e1 	bl	8003964 <RCCEx_PLLSAI1_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d028      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037bc:	4b68      	ldr	r3, [pc, #416]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ca:	4965      	ldr	r1, [pc, #404]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037da:	d106      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037dc:	4b60      	ldr	r3, [pc, #384]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a5f      	ldr	r2, [pc, #380]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e6:	60d3      	str	r3, [r2, #12]
 80037e8:	e011      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037f2:	d10c      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3304      	adds	r3, #4
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f8b2 	bl	8003964 <RCCEx_PLLSAI1_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01e      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800381a:	4b51      	ldr	r3, [pc, #324]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800382a:	494d      	ldr	r1, [pc, #308]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800383c:	d10c      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	2102      	movs	r1, #2
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f88d 	bl	8003964 <RCCEx_PLLSAI1_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384e:	7cfb      	ldrb	r3, [r7, #19]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003864:	4b3e      	ldr	r3, [pc, #248]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003866:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800386a:	f023 0204 	bic.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003874:	493a      	ldr	r1, [pc, #232]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003888:	4b35      	ldr	r3, [pc, #212]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800388a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800388e:	f023 0218 	bic.w	r2, r3, #24
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	4931      	ldr	r1, [pc, #196]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d035      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038ac:	4b2c      	ldr	r3, [pc, #176]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b8:	f7fd f97e 	bl	8000bb8 <HAL_GetTick>
 80038bc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038be:	e009      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038c0:	f7fd f97a 	bl	8000bb8 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d902      	bls.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	74fb      	strb	r3, [r7, #19]
        break;
 80038d2:	e005      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ef      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d113      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f6:	491a      	ldr	r1, [pc, #104]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3320      	adds	r3, #32
 8003902:	2102      	movs	r1, #2
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f921 	bl	8003b4c <RCCEx_PLLSAI2_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800390e:	7cfb      	ldrb	r3, [r7, #19]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d017      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003924:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800392a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	490a      	ldr	r1, [pc, #40]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003946:	d105      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800394e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003952:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003954:	7cbb      	ldrb	r3, [r7, #18]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000

08003964 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003972:	4b72      	ldr	r3, [pc, #456]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800397e:	4b6f      	ldr	r3, [pc, #444]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0203 	and.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d103      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
       ||
 8003992:	2b00      	cmp	r3, #0
 8003994:	d142      	bne.n	8003a1c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
 800399a:	e03f      	b.n	8003a1c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d018      	beq.n	80039d6 <RCCEx_PLLSAI1_Config+0x72>
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d825      	bhi.n	80039f4 <RCCEx_PLLSAI1_Config+0x90>
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d002      	beq.n	80039b2 <RCCEx_PLLSAI1_Config+0x4e>
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d009      	beq.n	80039c4 <RCCEx_PLLSAI1_Config+0x60>
 80039b0:	e020      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039b2:	4b62      	ldr	r3, [pc, #392]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d11d      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c2:	e01a      	b.n	80039fa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c4:	4b5d      	ldr	r3, [pc, #372]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d116      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d4:	e013      	b.n	80039fe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039d6:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039e2:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039f2:	e006      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      break;
 80039f8:	e004      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039fa:	bf00      	nop
 80039fc:	e002      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003a02:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d108      	bne.n	8003a1c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003a0a:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4949      	ldr	r1, [pc, #292]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f040 8086 	bne.w	8003b30 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a24:	4b45      	ldr	r3, [pc, #276]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a44      	ldr	r2, [pc, #272]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a30:	f7fd f8c2 	bl	8000bb8 <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a36:	e009      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a38:	f7fd f8be 	bl	8000bb8 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4a:	e005      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ef      	bne.n	8003a38 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d168      	bne.n	8003b30 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d113      	bne.n	8003a8c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a64:	4b35      	ldr	r3, [pc, #212]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6892      	ldr	r2, [r2, #8]
 8003a70:	0211      	lsls	r1, r2, #8
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68d2      	ldr	r2, [r2, #12]
 8003a76:	06d2      	lsls	r2, r2, #27
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6852      	ldr	r2, [r2, #4]
 8003a7e:	3a01      	subs	r2, #1
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	430a      	orrs	r2, r1
 8003a84:	492d      	ldr	r1, [pc, #180]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	610b      	str	r3, [r1, #16]
 8003a8a:	e02d      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d115      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a92:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6892      	ldr	r2, [r2, #8]
 8003a9e:	0211      	lsls	r1, r2, #8
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6912      	ldr	r2, [r2, #16]
 8003aa4:	0852      	lsrs	r2, r2, #1
 8003aa6:	3a01      	subs	r2, #1
 8003aa8:	0552      	lsls	r2, r2, #21
 8003aaa:	4311      	orrs	r1, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6852      	ldr	r2, [r2, #4]
 8003ab0:	3a01      	subs	r2, #1
 8003ab2:	0112      	lsls	r2, r2, #4
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	4921      	ldr	r1, [pc, #132]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	610b      	str	r3, [r1, #16]
 8003abc:	e014      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003abe:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6892      	ldr	r2, [r2, #8]
 8003aca:	0211      	lsls	r1, r2, #8
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6952      	ldr	r2, [r2, #20]
 8003ad0:	0852      	lsrs	r2, r2, #1
 8003ad2:	3a01      	subs	r2, #1
 8003ad4:	0652      	lsls	r2, r2, #25
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6852      	ldr	r2, [r2, #4]
 8003adc:	3a01      	subs	r2, #1
 8003ade:	0112      	lsls	r2, r2, #4
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	4916      	ldr	r1, [pc, #88]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ae8:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fd f860 	bl	8000bb8 <HAL_GetTick>
 8003af8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003afa:	e009      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003afc:	f7fd f85c 	bl	8000bb8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d902      	bls.n	8003b10 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b0e:	e005      	b.n	8003b1c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ef      	beq.n	8003afc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	4904      	ldr	r1, [pc, #16]	; (8003b3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	07ff800f 	.word	0x07ff800f
 8003b44:	ff9f800f 	.word	0xff9f800f
 8003b48:	f9ff800f 	.word	0xf9ff800f

08003b4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b5a:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00e      	beq.n	8003b84 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b66:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0203 	and.w	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d103      	bne.n	8003b7e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
       ||
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d142      	bne.n	8003c04 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
 8003b82:	e03f      	b.n	8003c04 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d018      	beq.n	8003bbe <RCCEx_PLLSAI2_Config+0x72>
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d825      	bhi.n	8003bdc <RCCEx_PLLSAI2_Config+0x90>
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d002      	beq.n	8003b9a <RCCEx_PLLSAI2_Config+0x4e>
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d009      	beq.n	8003bac <RCCEx_PLLSAI2_Config+0x60>
 8003b98:	e020      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b9a:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d11d      	bne.n	8003be2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003baa:	e01a      	b.n	8003be2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bac:	4b5d      	ldr	r3, [pc, #372]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d116      	bne.n	8003be6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bbc:	e013      	b.n	8003be6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bbe:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bca:	4b56      	ldr	r3, [pc, #344]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bda:	e006      	b.n	8003bea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e004      	b.n	8003bec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003be2:	bf00      	nop
 8003be4:	e002      	b.n	8003bec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d108      	bne.n	8003c04 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003bf2:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f023 0203 	bic.w	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4949      	ldr	r1, [pc, #292]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 8086 	bne.w	8003d18 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c0c:	4b45      	ldr	r3, [pc, #276]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a44      	ldr	r2, [pc, #272]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c18:	f7fc ffce 	bl	8000bb8 <HAL_GetTick>
 8003c1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c1e:	e009      	b.n	8003c34 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c20:	f7fc ffca 	bl	8000bb8 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d902      	bls.n	8003c34 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	73fb      	strb	r3, [r7, #15]
        break;
 8003c32:	e005      	b.n	8003c40 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c34:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ef      	bne.n	8003c20 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d168      	bne.n	8003d18 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d113      	bne.n	8003c74 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c4c:	4b35      	ldr	r3, [pc, #212]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6892      	ldr	r2, [r2, #8]
 8003c58:	0211      	lsls	r1, r2, #8
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68d2      	ldr	r2, [r2, #12]
 8003c5e:	06d2      	lsls	r2, r2, #27
 8003c60:	4311      	orrs	r1, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6852      	ldr	r2, [r2, #4]
 8003c66:	3a01      	subs	r2, #1
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	492d      	ldr	r1, [pc, #180]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	614b      	str	r3, [r1, #20]
 8003c72:	e02d      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d115      	bne.n	8003ca6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c7a:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <RCCEx_PLLSAI2_Config+0x1e0>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6892      	ldr	r2, [r2, #8]
 8003c86:	0211      	lsls	r1, r2, #8
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6912      	ldr	r2, [r2, #16]
 8003c8c:	0852      	lsrs	r2, r2, #1
 8003c8e:	3a01      	subs	r2, #1
 8003c90:	0552      	lsls	r2, r2, #21
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6852      	ldr	r2, [r2, #4]
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	4921      	ldr	r1, [pc, #132]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	614b      	str	r3, [r1, #20]
 8003ca4:	e014      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6892      	ldr	r2, [r2, #8]
 8003cb2:	0211      	lsls	r1, r2, #8
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6952      	ldr	r2, [r2, #20]
 8003cb8:	0852      	lsrs	r2, r2, #1
 8003cba:	3a01      	subs	r2, #1
 8003cbc:	0652      	lsls	r2, r2, #25
 8003cbe:	4311      	orrs	r1, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6852      	ldr	r2, [r2, #4]
 8003cc4:	3a01      	subs	r2, #1
 8003cc6:	0112      	lsls	r2, r2, #4
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	4916      	ldr	r1, [pc, #88]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fc ff6c 	bl	8000bb8 <HAL_GetTick>
 8003ce0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ce2:	e009      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ce4:	f7fc ff68 	bl	8000bb8 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d902      	bls.n	8003cf8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	73fb      	strb	r3, [r7, #15]
          break;
 8003cf6:	e005      	b.n	8003d04 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ef      	beq.n	8003ce4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	4904      	ldr	r1, [pc, #16]	; (8003d24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	07ff800f 	.word	0x07ff800f
 8003d2c:	ff9f800f 	.word	0xff9f800f
 8003d30:	f9ff800f 	.word	0xf9ff800f

08003d34 <__libc_init_array>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4d0d      	ldr	r5, [pc, #52]	; (8003d6c <__libc_init_array+0x38>)
 8003d38:	4c0d      	ldr	r4, [pc, #52]	; (8003d70 <__libc_init_array+0x3c>)
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	2600      	movs	r6, #0
 8003d40:	42a6      	cmp	r6, r4
 8003d42:	d109      	bne.n	8003d58 <__libc_init_array+0x24>
 8003d44:	4d0b      	ldr	r5, [pc, #44]	; (8003d74 <__libc_init_array+0x40>)
 8003d46:	4c0c      	ldr	r4, [pc, #48]	; (8003d78 <__libc_init_array+0x44>)
 8003d48:	f000 f820 	bl	8003d8c <_init>
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	2600      	movs	r6, #0
 8003d52:	42a6      	cmp	r6, r4
 8003d54:	d105      	bne.n	8003d62 <__libc_init_array+0x2e>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5c:	4798      	blx	r3
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7ee      	b.n	8003d40 <__libc_init_array+0xc>
 8003d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d66:	4798      	blx	r3
 8003d68:	3601      	adds	r6, #1
 8003d6a:	e7f2      	b.n	8003d52 <__libc_init_array+0x1e>
 8003d6c:	08003dec 	.word	0x08003dec
 8003d70:	08003dec 	.word	0x08003dec
 8003d74:	08003dec 	.word	0x08003dec
 8003d78:	08003df0 	.word	0x08003df0

08003d7c <memset>:
 8003d7c:	4402      	add	r2, r0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <_init>:
 8003d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8e:	bf00      	nop
 8003d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d92:	bc08      	pop	{r3}
 8003d94:	469e      	mov	lr, r3
 8003d96:	4770      	bx	lr

08003d98 <_fini>:
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9a:	bf00      	nop
 8003d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9e:	bc08      	pop	{r3}
 8003da0:	469e      	mov	lr, r3
 8003da2:	4770      	bx	lr


Tire_Temperature_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b38  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002cf4  08002cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d34  08002d34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d34  08002d34  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d34  08002d34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08002d48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002d48  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b896  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e80  00000000  00000000  0002b8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0002d758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c539  00000000  00000000  0002ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db92  00000000  00000000  0005b259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101d03  00000000  00000000  00068deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016aaee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d70  00000000  00000000  0016ab40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002cdc 	.word	0x08002cdc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08002cdc 	.word	0x08002cdc

080001fc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <MX_CAN1_Init+0x64>)
 8000202:	4a18      	ldr	r2, [pc, #96]	; (8000264 <MX_CAN1_Init+0x68>)
 8000204:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 8000206:	4b16      	ldr	r3, [pc, #88]	; (8000260 <MX_CAN1_Init+0x64>)
 8000208:	2218      	movs	r2, #24
 800020a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800020c:	4b14      	ldr	r3, [pc, #80]	; (8000260 <MX_CAN1_Init+0x64>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000212:	4b13      	ldr	r3, [pc, #76]	; (8000260 <MX_CAN1_Init+0x64>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000218:	4b11      	ldr	r3, [pc, #68]	; (8000260 <MX_CAN1_Init+0x64>)
 800021a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800021e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000220:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <MX_CAN1_Init+0x64>)
 8000222:	2200      	movs	r2, #0
 8000224:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <MX_CAN1_Init+0x64>)
 8000228:	2200      	movs	r2, #0
 800022a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <MX_CAN1_Init+0x64>)
 800022e:	2200      	movs	r2, #0
 8000230:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MX_CAN1_Init+0x64>)
 8000234:	2200      	movs	r2, #0
 8000236:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <MX_CAN1_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MX_CAN1_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000244:	4b06      	ldr	r3, [pc, #24]	; (8000260 <MX_CAN1_Init+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <MX_CAN1_Init+0x64>)
 800024c:	f000 fb52 	bl	80008f4 <HAL_CAN_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000256:	f000 fa26 	bl	80006a6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000028 	.word	0x20000028
 8000264:	40006400 	.word	0x40006400

08000268 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b08a      	sub	sp, #40	; 0x28
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <HAL_CAN_MspInit+0x80>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d129      	bne.n	80002de <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800028a:	4b18      	ldr	r3, [pc, #96]	; (80002ec <HAL_CAN_MspInit+0x84>)
 800028c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800028e:	4a17      	ldr	r2, [pc, #92]	; (80002ec <HAL_CAN_MspInit+0x84>)
 8000290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000294:	6593      	str	r3, [r2, #88]	; 0x58
 8000296:	4b15      	ldr	r3, [pc, #84]	; (80002ec <HAL_CAN_MspInit+0x84>)
 8000298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800029a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800029e:	613b      	str	r3, [r7, #16]
 80002a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a2:	4b12      	ldr	r3, [pc, #72]	; (80002ec <HAL_CAN_MspInit+0x84>)
 80002a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a6:	4a11      	ldr	r2, [pc, #68]	; (80002ec <HAL_CAN_MspInit+0x84>)
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ae:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <HAL_CAN_MspInit+0x84>)
 80002b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002c0:	2302      	movs	r3, #2
 80002c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	2300      	movs	r3, #0
 80002c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002c8:	2303      	movs	r3, #3
 80002ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002cc:	2309      	movs	r3, #9
 80002ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4619      	mov	r1, r3
 80002d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002da:	f000 fced 	bl	8000cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002de:	bf00      	nop
 80002e0:	3728      	adds	r7, #40	; 0x28
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40006400 	.word	0x40006400
 80002ec:	40021000 	.word	0x40021000

080002f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08a      	sub	sp, #40	; 0x28
 80002f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000306:	4b37      	ldr	r3, [pc, #220]	; (80003e4 <MX_GPIO_Init+0xf4>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	4a36      	ldr	r2, [pc, #216]	; (80003e4 <MX_GPIO_Init+0xf4>)
 800030c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000312:	4b34      	ldr	r3, [pc, #208]	; (80003e4 <MX_GPIO_Init+0xf4>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800031a:	613b      	str	r3, [r7, #16]
 800031c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031e:	4b31      	ldr	r3, [pc, #196]	; (80003e4 <MX_GPIO_Init+0xf4>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	4a30      	ldr	r2, [pc, #192]	; (80003e4 <MX_GPIO_Init+0xf4>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032a:	4b2e      	ldr	r3, [pc, #184]	; (80003e4 <MX_GPIO_Init+0xf4>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000336:	4b2b      	ldr	r3, [pc, #172]	; (80003e4 <MX_GPIO_Init+0xf4>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	4a2a      	ldr	r2, [pc, #168]	; (80003e4 <MX_GPIO_Init+0xf4>)
 800033c:	f043 0304 	orr.w	r3, r3, #4
 8000340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000342:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <MX_GPIO_Init+0xf4>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	f003 0304 	and.w	r3, r3, #4
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <MX_GPIO_Init+0xf4>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	4a24      	ldr	r2, [pc, #144]	; (80003e4 <MX_GPIO_Init+0xf4>)
 8000354:	f043 0302 	orr.w	r3, r3, #2
 8000358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <MX_GPIO_Init+0xf4>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	f003 0302 	and.w	r3, r3, #2
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_WAR2_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2144      	movs	r1, #68	; 0x44
 800036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036e:	f000 fe35 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WAR1_GPIO_Port, LED_WAR1_Pin, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	2110      	movs	r1, #16
 8000376:	481c      	ldr	r0, [pc, #112]	; (80003e8 <MX_GPIO_Init+0xf8>)
 8000378:	f000 fe30 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2101      	movs	r1, #1
 8000380:	481a      	ldr	r0, [pc, #104]	; (80003ec <MX_GPIO_Init+0xfc>)
 8000382:	f000 fe2b 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_WAR2_Pin|LED_ERR_Pin;
 8000386:	2344      	movs	r3, #68	; 0x44
 8000388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2300      	movs	r3, #0
 8000394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	4619      	mov	r1, r3
 800039c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a0:	f000 fc8a 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WAR1_Pin;
 80003a4:	2310      	movs	r3, #16
 80003a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a8:	2301      	movs	r3, #1
 80003aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b0:	2300      	movs	r3, #0
 80003b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_WAR1_GPIO_Port, &GPIO_InitStruct);
 80003b4:	f107 0314 	add.w	r3, r7, #20
 80003b8:	4619      	mov	r1, r3
 80003ba:	480b      	ldr	r0, [pc, #44]	; (80003e8 <MX_GPIO_Init+0xf8>)
 80003bc:	f000 fc7c 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OK_Pin;
 80003c0:	2301      	movs	r3, #1
 80003c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c4:	2301      	movs	r3, #1
 80003c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003cc:	2300      	movs	r3, #0
 80003ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OK_GPIO_Port, &GPIO_InitStruct);
 80003d0:	f107 0314 	add.w	r3, r7, #20
 80003d4:	4619      	mov	r1, r3
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_GPIO_Init+0xfc>)
 80003d8:	f000 fc6e 	bl	8000cb8 <HAL_GPIO_Init>

}
 80003dc:	bf00      	nop
 80003de:	3728      	adds	r7, #40	; 0x28
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40021000 	.word	0x40021000
 80003e8:	48000800 	.word	0x48000800
 80003ec:	48000400 	.word	0x48000400

080003f0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_I2C2_Init+0x74>)
 80003f6:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <MX_I2C2_Init+0x78>)
 80003f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <MX_I2C2_Init+0x74>)
 80003fc:	f640 6214 	movw	r2, #3604	; 0xe14
 8000400:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000402:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_I2C2_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000408:	4b16      	ldr	r3, [pc, #88]	; (8000464 <MX_I2C2_Init+0x74>)
 800040a:	2201      	movs	r2, #1
 800040c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_I2C2_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <MX_I2C2_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_I2C2_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000420:	4b10      	ldr	r3, [pc, #64]	; (8000464 <MX_I2C2_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_I2C2_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <MX_I2C2_Init+0x74>)
 800042e:	f000 fded 	bl	800100c <HAL_I2C_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000438:	f000 f935 	bl	80006a6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800043c:	2100      	movs	r1, #0
 800043e:	4809      	ldr	r0, [pc, #36]	; (8000464 <MX_I2C2_Init+0x74>)
 8000440:	f000 fe73 	bl	800112a <HAL_I2CEx_ConfigAnalogFilter>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800044a:	f000 f92c 	bl	80006a6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800044e:	2100      	movs	r1, #0
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <MX_I2C2_Init+0x74>)
 8000452:	f000 feb5 	bl	80011c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800045c:	f000 f923 	bl	80006a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000050 	.word	0x20000050
 8000468:	40005800 	.word	0x40005800

0800046c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b0b0      	sub	sp, #192	; 0xc0
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	2298      	movs	r2, #152	; 0x98
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f002 fc1d 	bl	8002ccc <memset>
  if(i2cHandle->Instance==I2C2)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a21      	ldr	r2, [pc, #132]	; (800051c <HAL_I2C_MspInit+0xb0>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d13b      	bne.n	8000514 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	4618      	mov	r0, r3
 80004aa:	f001 fe97 	bl	80021dc <HAL_RCCEx_PeriphCLKConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80004b4:	f000 f8f7 	bl	80006a6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b8:	4b19      	ldr	r3, [pc, #100]	; (8000520 <HAL_I2C_MspInit+0xb4>)
 80004ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004bc:	4a18      	ldr	r2, [pc, #96]	; (8000520 <HAL_I2C_MspInit+0xb4>)
 80004be:	f043 0302 	orr.w	r3, r3, #2
 80004c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c4:	4b16      	ldr	r3, [pc, #88]	; (8000520 <HAL_I2C_MspInit+0xb4>)
 80004c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c8:	f003 0302 	and.w	r3, r3, #2
 80004cc:	613b      	str	r3, [r7, #16]
 80004ce:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004d8:	2312      	movs	r3, #18
 80004da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004e4:	2303      	movs	r3, #3
 80004e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80004ea:	2304      	movs	r3, #4
 80004ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80004f4:	4619      	mov	r1, r3
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <HAL_I2C_MspInit+0xb8>)
 80004f8:	f000 fbde 	bl	8000cb8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_I2C_MspInit+0xb4>)
 80004fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_I2C_MspInit+0xb4>)
 8000502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000506:	6593      	str	r3, [r2, #88]	; 0x58
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_I2C_MspInit+0xb4>)
 800050a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800050c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000514:	bf00      	nop
 8000516:	37c0      	adds	r7, #192	; 0xc0
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40005800 	.word	0x40005800
 8000520:	40021000 	.word	0x40021000
 8000524:	48000400 	.word	0x48000400

08000528 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 f948 	bl	80007c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f85b 	bl	80005ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f7ff fedb 	bl	80002f0 <MX_GPIO_Init>
  MX_CAN1_Init();
 800053a:	f7ff fe5f 	bl	80001fc <MX_CAN1_Init>
  MX_I2C2_Init();
 800053e:	f7ff ff57 	bl	80003f0 <MX_I2C2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  float data = 0.5;
 8000542:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000546:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2101      	movs	r1, #1
 800054c:	4825      	ldr	r0, [pc, #148]	; (80005e4 <main+0xbc>)
 800054e:	f000 fd45 	bl	8000fdc <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8000552:	20fa      	movs	r0, #250	; 0xfa
 8000554:	f000 f9aa 	bl	80008ac <HAL_Delay>
	  HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2101      	movs	r1, #1
 800055c:	4821      	ldr	r0, [pc, #132]	; (80005e4 <main+0xbc>)
 800055e:	f000 fd3d 	bl	8000fdc <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8000562:	20fa      	movs	r0, #250	; 0xfa
 8000564:	f000 f9a2 	bl	80008ac <HAL_Delay>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f000 fd34 	bl	8000fdc <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8000574:	20fa      	movs	r0, #250	; 0xfa
 8000576:	f000 f999 	bl	80008ac <HAL_Delay>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2140      	movs	r1, #64	; 0x40
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 fd2b 	bl	8000fdc <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8000586:	20fa      	movs	r0, #250	; 0xfa
 8000588:	f000 f990 	bl	80008ac <HAL_Delay>
	  HAL_GPIO_WritePin(LED_WAR1_GPIO_Port, LED_WAR1_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	4815      	ldr	r0, [pc, #84]	; (80005e8 <main+0xc0>)
 8000592:	f000 fd23 	bl	8000fdc <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8000596:	20fa      	movs	r0, #250	; 0xfa
 8000598:	f000 f988 	bl	80008ac <HAL_Delay>
	  HAL_GPIO_WritePin(LED_WAR1_GPIO_Port, LED_WAR1_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2110      	movs	r1, #16
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <main+0xc0>)
 80005a2:	f000 fd1b 	bl	8000fdc <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 80005a6:	20fa      	movs	r0, #250	; 0xfa
 80005a8:	f000 f980 	bl	80008ac <HAL_Delay>
	  HAL_GPIO_WritePin(LED_WAR2_GPIO_Port, LED_WAR2_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2104      	movs	r1, #4
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b4:	f000 fd12 	bl	8000fdc <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 80005b8:	20fa      	movs	r0, #250	; 0xfa
 80005ba:	f000 f977 	bl	80008ac <HAL_Delay>
	  HAL_GPIO_WritePin(LED_WAR2_GPIO_Port, LED_WAR2_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2104      	movs	r1, #4
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f000 fd09 	bl	8000fdc <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 80005ca:	20fa      	movs	r0, #250	; 0xfa
 80005cc:	f000 f96e 	bl	80008ac <HAL_Delay>
	  data++;
 80005d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80005d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005dc:	edc7 7a01 	vstr	s15, [r7, #4]
	  HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_SET);
 80005e0:	e7b2      	b.n	8000548 <main+0x20>
 80005e2:	bf00      	nop
 80005e4:	48000400 	.word	0x48000400
 80005e8:	48000800 	.word	0x48000800

080005ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b098      	sub	sp, #96	; 0x60
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0318 	add.w	r3, r7, #24
 80005f6:	2248      	movs	r2, #72	; 0x48
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fb66 	bl	8002ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fe42 	bl	8001298 <HAL_PWREx_ControlVoltageScaling>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	bf14      	ite	ne
 800061a:	2301      	movne	r3, #1
 800061c:	2300      	moveq	r3, #0
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8000624:	f000 f83f 	bl	80006a6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	2303      	movs	r3, #3
 8000638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 800063e:	231e      	movs	r3, #30
 8000640:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fec4 	bl	80013e0 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf14      	ite	ne
 800065e:	2301      	movne	r3, #1
 8000660:	2300      	moveq	r3, #0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8000668:	f000 f81d 	bl	80006a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2303      	movs	r3, #3
 8000672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2105      	movs	r1, #5
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fb27 	bl	8001cd8 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	bf14      	ite	ne
 8000690:	2301      	movne	r3, #1
 8000692:	2300      	moveq	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 800069a:	f000 f804 	bl	80006a6 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3760      	adds	r7, #96	; 0x60
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006aa:	b672      	cpsid	i
}
 80006ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ae:	e7fe      	b.n	80006ae <Error_Handler+0x8>

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_MspInit+0x44>)
 80006b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_MspInit+0x44>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6613      	str	r3, [r2, #96]	; 0x60
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_MspInit+0x44>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_MspInit+0x44>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_MspInit+0x44>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	6593      	str	r3, [r2, #88]	; 0x58
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_MspInit+0x44>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>

0800070a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>

08000716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f892 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000774:	f7ff ffea 	bl	800074c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <LoopForever+0x6>)
  ldr r1, =_edata
 800077a:	490d      	ldr	r1, [pc, #52]	; (80007b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800077c:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <LoopForever+0xe>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000790:	4c0a      	ldr	r4, [pc, #40]	; (80007bc <LoopForever+0x16>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079e:	f002 fa71 	bl	8002c84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a2:	f7ff fec1 	bl	8000528 <main>

080007a6 <LoopForever>:

LoopForever:
    b LoopForever
 80007a6:	e7fe      	b.n	80007a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b4:	08002d3c 	.word	0x08002d3c
  ldr r2, =_sbss
 80007b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007bc:	200000a8 	.word	0x200000a8

080007c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_2_IRQHandler>

080007c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c8:	2300      	movs	r3, #0
 80007ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 fa3f 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d2:	200f      	movs	r0, #15
 80007d4:	f000 f80e 	bl	80007f4 <HAL_InitTick>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	e001      	b.n	80007e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007e4:	f7ff ff64 	bl	80006b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_InitTick+0x6c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d023      	beq.n	8000850 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_InitTick+0x70>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_InitTick+0x6c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	fbb3 f3f1 	udiv	r3, r3, r1
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fa3d 	bl	8000c9e <HAL_SYSTICK_Config>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10f      	bne.n	800084a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	d809      	bhi.n	8000844 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000830:	2200      	movs	r2, #0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000838:	f000 fa15 	bl	8000c66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800083c:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <HAL_InitTick+0x74>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	e007      	b.n	8000854 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	e004      	b.n	8000854 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	73fb      	strb	r3, [r7, #15]
 800084e:	e001      	b.n	8000854 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000008 	.word	0x20000008
 8000864:	20000000 	.word	0x20000000
 8000868:	20000004 	.word	0x20000004

0800086c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_IncTick+0x20>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_IncTick+0x24>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_IncTick+0x24>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008
 8000890:	200000a4 	.word	0x200000a4

08000894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <HAL_GetTick+0x14>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	4618      	mov	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	200000a4 	.word	0x200000a4

080008ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b4:	f7ff ffee 	bl	8000894 <HAL_GetTick>
 80008b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008c4:	d005      	beq.n	80008d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_Delay+0x44>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d2:	bf00      	nop
 80008d4:	f7ff ffde 	bl	8000894 <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d8f7      	bhi.n	80008d4 <HAL_Delay+0x28>
  {
  }
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000008 	.word	0x20000008

080008f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e0ed      	b.n	8000ae2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d102      	bne.n	8000918 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fca8 	bl	8000268 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f042 0201 	orr.w	r2, r2, #1
 8000926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000928:	f7ff ffb4 	bl	8000894 <HAL_GetTick>
 800092c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800092e:	e012      	b.n	8000956 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000930:	f7ff ffb0 	bl	8000894 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b0a      	cmp	r3, #10
 800093c:	d90b      	bls.n	8000956 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000942:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2205      	movs	r2, #5
 800094e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e0c5      	b.n	8000ae2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0e5      	beq.n	8000930 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0202 	bic.w	r2, r2, #2
 8000972:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000974:	f7ff ff8e 	bl	8000894 <HAL_GetTick>
 8000978:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800097a:	e012      	b.n	80009a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800097c:	f7ff ff8a 	bl	8000894 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b0a      	cmp	r3, #10
 8000988:	d90b      	bls.n	80009a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2205      	movs	r2, #5
 800099a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e09f      	b.n	8000ae2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1e5      	bne.n	800097c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7e1b      	ldrb	r3, [r3, #24]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d108      	bne.n	80009ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	e007      	b.n	80009da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7e5b      	ldrb	r3, [r3, #25]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d108      	bne.n	80009f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	e007      	b.n	8000a04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7e9b      	ldrb	r3, [r3, #26]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d108      	bne.n	8000a1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f042 0220 	orr.w	r2, r2, #32
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	e007      	b.n	8000a2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f022 0220 	bic.w	r2, r2, #32
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7edb      	ldrb	r3, [r3, #27]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d108      	bne.n	8000a48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f022 0210 	bic.w	r2, r2, #16
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e007      	b.n	8000a58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f042 0210 	orr.w	r2, r2, #16
 8000a56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7f1b      	ldrb	r3, [r3, #28]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d108      	bne.n	8000a72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 0208 	orr.w	r2, r2, #8
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e007      	b.n	8000a82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0208 	bic.w	r2, r2, #8
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	7f5b      	ldrb	r3, [r3, #29]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d108      	bne.n	8000a9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 0204 	orr.w	r2, r2, #4
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e007      	b.n	8000aac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f022 0204 	bic.w	r2, r2, #4
 8000aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	431a      	orrs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	ea42 0103 	orr.w	r1, r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	; (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	; 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	f7ff ff8e 	bl	8000b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff47 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff5c 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff8e 	bl	8000ba4 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5d 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffb0 	bl	8000c0c <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b087      	sub	sp, #28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc6:	e166      	b.n	8000f96 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 8158 	beq.w	8000f90 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d005      	beq.n	8000cf8 <HAL_GPIO_Init+0x40>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d130      	bne.n	8000d5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d2e:	2201      	movs	r2, #1
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	091b      	lsrs	r3, r3, #4
 8000d44:	f003 0201 	and.w	r2, r3, #1
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d017      	beq.n	8000d96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d123      	bne.n	8000dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	08da      	lsrs	r2, r3, #3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3208      	adds	r2, #8
 8000daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	220f      	movs	r2, #15
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	08da      	lsrs	r2, r3, #3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3208      	adds	r2, #8
 8000de4:	6939      	ldr	r1, [r7, #16]
 8000de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0203 	and.w	r2, r3, #3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 80b2 	beq.w	8000f90 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2c:	4b61      	ldr	r3, [pc, #388]	; (8000fb4 <HAL_GPIO_Init+0x2fc>)
 8000e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e30:	4a60      	ldr	r2, [pc, #384]	; (8000fb4 <HAL_GPIO_Init+0x2fc>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6613      	str	r3, [r2, #96]	; 0x60
 8000e38:	4b5e      	ldr	r3, [pc, #376]	; (8000fb4 <HAL_GPIO_Init+0x2fc>)
 8000e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e44:	4a5c      	ldr	r2, [pc, #368]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e6e:	d02b      	beq.n	8000ec8 <HAL_GPIO_Init+0x210>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a52      	ldr	r2, [pc, #328]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d025      	beq.n	8000ec4 <HAL_GPIO_Init+0x20c>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a51      	ldr	r2, [pc, #324]	; (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d01f      	beq.n	8000ec0 <HAL_GPIO_Init+0x208>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a50      	ldr	r2, [pc, #320]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d019      	beq.n	8000ebc <HAL_GPIO_Init+0x204>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <HAL_GPIO_Init+0x310>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d013      	beq.n	8000eb8 <HAL_GPIO_Init+0x200>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <HAL_GPIO_Init+0x314>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d00d      	beq.n	8000eb4 <HAL_GPIO_Init+0x1fc>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a4d      	ldr	r2, [pc, #308]	; (8000fd0 <HAL_GPIO_Init+0x318>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d007      	beq.n	8000eb0 <HAL_GPIO_Init+0x1f8>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a4c      	ldr	r2, [pc, #304]	; (8000fd4 <HAL_GPIO_Init+0x31c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d101      	bne.n	8000eac <HAL_GPIO_Init+0x1f4>
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	e00e      	b.n	8000eca <HAL_GPIO_Init+0x212>
 8000eac:	2308      	movs	r3, #8
 8000eae:	e00c      	b.n	8000eca <HAL_GPIO_Init+0x212>
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	e00a      	b.n	8000eca <HAL_GPIO_Init+0x212>
 8000eb4:	2305      	movs	r3, #5
 8000eb6:	e008      	b.n	8000eca <HAL_GPIO_Init+0x212>
 8000eb8:	2304      	movs	r3, #4
 8000eba:	e006      	b.n	8000eca <HAL_GPIO_Init+0x212>
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e004      	b.n	8000eca <HAL_GPIO_Init+0x212>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e002      	b.n	8000eca <HAL_GPIO_Init+0x212>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <HAL_GPIO_Init+0x212>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	f002 0203 	and.w	r2, r2, #3
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	4093      	lsls	r3, r2
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eda:	4937      	ldr	r1, [pc, #220]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee8:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f0c:	4a32      	ldr	r2, [pc, #200]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f36:	4a28      	ldr	r2, [pc, #160]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f60:	4a1d      	ldr	r2, [pc, #116]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3301      	adds	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f47f ae91 	bne.w	8000cc8 <HAL_GPIO_Init+0x10>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010000 	.word	0x40010000
 8000fbc:	48000400 	.word	0x48000400
 8000fc0:	48000800 	.word	0x48000800
 8000fc4:	48000c00 	.word	0x48000c00
 8000fc8:	48001000 	.word	0x48001000
 8000fcc:	48001400 	.word	0x48001400
 8000fd0:	48001800 	.word	0x48001800
 8000fd4:	48001c00 	.word	0x48001c00
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e081      	b.n	8001122 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d106      	bne.n	8001038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fa1a 	bl	800046c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2224      	movs	r2, #36	; 0x24
 800103c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800105c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800106c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d107      	bne.n	8001086 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	e006      	b.n	8001094 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001092:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d104      	bne.n	80010a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69d9      	ldr	r1, [r3, #28]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1a      	ldr	r2, [r3, #32]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2220      	movs	r2, #32
 800110e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b20      	cmp	r3, #32
 800113e:	d138      	bne.n	80011b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800114a:	2302      	movs	r3, #2
 800114c:	e032      	b.n	80011b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2224      	movs	r2, #36	; 0x24
 800115a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0201 	bic.w	r2, r2, #1
 800116c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800117c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 0201 	orr.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2220      	movs	r2, #32
 80011a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80011b2:	2302      	movs	r3, #2
  }
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b20      	cmp	r3, #32
 80011d4:	d139      	bne.n	800124a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e033      	b.n	800124c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2224      	movs	r2, #36	; 0x24
 80011f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001212:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0201 	orr.w	r2, r2, #1
 8001234:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2220      	movs	r2, #32
 800123a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800124a:	2302      	movs	r3, #2
  }
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_PWREx_GetVoltageRange+0x3c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001268:	d102      	bne.n	8001270 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800126a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126e:	e00b      	b.n	8001288 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800127e:	d102      	bne.n	8001286 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001284:	e000      	b.n	8001288 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001286:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40007000 	.word	0x40007000

08001298 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d141      	bne.n	800132a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012a6:	4b4b      	ldr	r3, [pc, #300]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b2:	d131      	bne.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012b4:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ba:	4a46      	ldr	r2, [pc, #280]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c4:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012cc:	4a41      	ldr	r2, [pc, #260]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80012d4:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2232      	movs	r2, #50	; 0x32
 80012da:	fb02 f303 	mul.w	r3, r2, r3
 80012de:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	0c9b      	lsrs	r3, r3, #18
 80012e6:	3301      	adds	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ea:	e002      	b.n	80012f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f2:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fe:	d102      	bne.n	8001306 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f2      	bne.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001306:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001312:	d158      	bne.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e057      	b.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001318:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800131e:	4a2d      	ldr	r2, [pc, #180]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001324:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001328:	e04d      	b.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001330:	d141      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800133a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133e:	d131      	bne.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001346:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001358:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2232      	movs	r2, #50	; 0x32
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	0c9b      	lsrs	r3, r3, #18
 8001372:	3301      	adds	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001376:	e002      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3b01      	subs	r3, #1
 800137c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d102      	bne.n	8001392 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f2      	bne.n	8001378 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800139e:	d112      	bne.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e011      	b.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013b4:	e007      	b.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40007000 	.word	0x40007000
 80013d8:	20000000 	.word	0x20000000
 80013dc:	431bde83 	.word	0x431bde83

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d102      	bne.n	80013f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f000 bc68 	b.w	8001cc4 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f4:	4b97      	ldr	r3, [pc, #604]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013fe:	4b95      	ldr	r3, [pc, #596]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80e6 	beq.w	80015e2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <HAL_RCC_OscConfig+0x4c>
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	2b0c      	cmp	r3, #12
 8001420:	f040 808d 	bne.w	800153e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b01      	cmp	r3, #1
 8001428:	f040 8089 	bne.w	800153e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800142c:	4b89      	ldr	r3, [pc, #548]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_RCC_OscConfig+0x66>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	f000 bc3f 	b.w	8001cc4 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800144a:	4b82      	ldr	r3, [pc, #520]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d004      	beq.n	8001460 <HAL_RCC_OscConfig+0x80>
 8001456:	4b7f      	ldr	r3, [pc, #508]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800145e:	e005      	b.n	800146c <HAL_RCC_OscConfig+0x8c>
 8001460:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800146c:	4293      	cmp	r3, r2
 800146e:	d224      	bcs.n	80014ba <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fdf3 	bl	8002060 <RCC_SetFlashLatencyFromMSIRange>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f000 bc1f 	b.w	8001cc4 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001486:	4b73      	ldr	r3, [pc, #460]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a72      	ldr	r2, [pc, #456]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b70      	ldr	r3, [pc, #448]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	496d      	ldr	r1, [pc, #436]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a4:	4b6b      	ldr	r3, [pc, #428]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	4968      	ldr	r1, [pc, #416]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
 80014b8:	e025      	b.n	8001506 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ba:	4b66      	ldr	r3, [pc, #408]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a65      	ldr	r2, [pc, #404]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b63      	ldr	r3, [pc, #396]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	4960      	ldr	r1, [pc, #384]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d8:	4b5e      	ldr	r3, [pc, #376]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	495b      	ldr	r1, [pc, #364]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fdb2 	bl	8002060 <RCC_SetFlashLatencyFromMSIRange>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e3de      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001506:	f000 fd21 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 800150a:	4602      	mov	r2, r0
 800150c:	4b51      	ldr	r3, [pc, #324]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	4950      	ldr	r1, [pc, #320]	; (8001658 <HAL_RCC_OscConfig+0x278>)
 8001518:	5ccb      	ldrb	r3, [r1, r3]
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	fa22 f303 	lsr.w	r3, r2, r3
 8001522:	4a4e      	ldr	r2, [pc, #312]	; (800165c <HAL_RCC_OscConfig+0x27c>)
 8001524:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001526:	4b4e      	ldr	r3, [pc, #312]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f962 	bl	80007f4 <HAL_InitTick>
 8001530:	4603      	mov	r3, r0
 8001532:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d052      	beq.n	80015e0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	e3c2      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d032      	beq.n	80015ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001546:	4b43      	ldr	r3, [pc, #268]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a42      	ldr	r2, [pc, #264]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001552:	f7ff f99f 	bl	8000894 <HAL_GetTick>
 8001556:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800155a:	f7ff f99b 	bl	8000894 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e3ab      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800156c:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a35      	ldr	r2, [pc, #212]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	4930      	ldr	r1, [pc, #192]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	492b      	ldr	r1, [pc, #172]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
 80015aa:	e01a      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a28      	ldr	r2, [pc, #160]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015b8:	f7ff f96c 	bl	8000894 <HAL_GetTick>
 80015bc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c0:	f7ff f968 	bl	8000894 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e378      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x1e0>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d073      	beq.n	80016d6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x220>
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d10e      	bne.n	8001618 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d10b      	bne.n	8001618 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d063      	beq.n	80016d4 <HAL_RCC_OscConfig+0x2f4>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d15f      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e355      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001620:	d106      	bne.n	8001630 <HAL_RCC_OscConfig+0x250>
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e025      	b.n	800167c <HAL_RCC_OscConfig+0x29c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001638:	d114      	bne.n	8001664 <HAL_RCC_OscConfig+0x284>
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a02      	ldr	r2, [pc, #8]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e013      	b.n	800167c <HAL_RCC_OscConfig+0x29c>
 8001654:	40021000 	.word	0x40021000
 8001658:	08002cf4 	.word	0x08002cf4
 800165c:	20000000 	.word	0x20000000
 8001660:	20000004 	.word	0x20000004
 8001664:	4b8f      	ldr	r3, [pc, #572]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a8e      	ldr	r2, [pc, #568]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b8c      	ldr	r3, [pc, #560]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a8b      	ldr	r2, [pc, #556]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff f906 	bl	8000894 <HAL_GetTick>
 8001688:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff f902 	bl	8000894 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e312      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x2ac>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff f8f2 	bl	8000894 <HAL_GetTick>
 80016b0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff f8ee 	bl	8000894 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e2fe      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016c6:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x2d4>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d060      	beq.n	80017a4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_OscConfig+0x314>
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d119      	bne.n	8001722 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d116      	bne.n	8001722 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f4:	4b6b      	ldr	r3, [pc, #428]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_OscConfig+0x32c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e2db      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	4962      	ldr	r1, [pc, #392]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001720:	e040      	b.n	80017a4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d023      	beq.n	8001772 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172a:	4b5e      	ldr	r3, [pc, #376]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a5d      	ldr	r2, [pc, #372]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff f8ad 	bl	8000894 <HAL_GetTick>
 800173a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173e:	f7ff f8a9 	bl	8000894 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e2b9      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001750:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	494e      	ldr	r1, [pc, #312]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
 8001770:	e018      	b.n	80017a4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001772:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a4b      	ldr	r2, [pc, #300]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff f889 	bl	8000894 <HAL_GetTick>
 8001782:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff f885 	bl	8000894 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e295      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8082 	beq.w	80018b6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d05f      	beq.n	800187a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80017ba:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d037      	beq.n	8001840 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e26d      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d01b      	beq.n	800182a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f8:	4a2a      	ldr	r2, [pc, #168]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001802:	f7ff f847 	bl	8000894 <HAL_GetTick>
 8001806:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180a:	f7ff f843 	bl	8000894 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b11      	cmp	r3, #17
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e253      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ef      	bne.n	800180a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001830:	f023 0210 	bic.w	r2, r3, #16
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	491a      	ldr	r1, [pc, #104]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	4313      	orrs	r3, r2
 800183c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff f820 	bl	8000894 <HAL_GetTick>
 8001854:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001858:	f7ff f81c 	bl	8000894 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b11      	cmp	r3, #17
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e22c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0ef      	beq.n	8001858 <HAL_RCC_OscConfig+0x478>
 8001878:	e01d      	b.n	80018b6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188a:	f7ff f803 	bl	8000894 <HAL_GetTick>
 800188e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001892:	f7fe ffff 	bl	8000894 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b11      	cmp	r3, #17
 800189e:	d903      	bls.n	80018a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e20f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
 80018a4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a8:	4b83      	ldr	r3, [pc, #524]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 80018aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1ed      	bne.n	8001892 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80bd 	beq.w	8001a3e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018ca:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10e      	bne.n	80018f4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b78      	ldr	r3, [pc, #480]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	4a77      	ldr	r2, [pc, #476]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6593      	str	r3, [r2, #88]	; 0x58
 80018e2:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f4:	4b71      	ldr	r3, [pc, #452]	; (8001abc <HAL_RCC_OscConfig+0x6dc>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d118      	bne.n	8001932 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001900:	4b6e      	ldr	r3, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x6dc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a6d      	ldr	r2, [pc, #436]	; (8001abc <HAL_RCC_OscConfig+0x6dc>)
 8001906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190c:	f7fe ffc2 	bl	8000894 <HAL_GetTick>
 8001910:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001914:	f7fe ffbe 	bl	8000894 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1ce      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001926:	4b65      	ldr	r3, [pc, #404]	; (8001abc <HAL_RCC_OscConfig+0x6dc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d02c      	beq.n	8001998 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800193e:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001944:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001950:	4959      	ldr	r1, [pc, #356]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001952:	4313      	orrs	r3, r2
 8001954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d010      	beq.n	8001986 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001964:	4b54      	ldr	r3, [pc, #336]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196a:	4a53      	ldr	r2, [pc, #332]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197a:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001984:	e018      	b.n	80019b8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	4a4a      	ldr	r2, [pc, #296]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001996:	e00f      	b.n	80019b8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001998:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199e:	4a46      	ldr	r2, [pc, #280]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019a8:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	4a42      	ldr	r2, [pc, #264]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d016      	beq.n	80019ee <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7fe ff68 	bl	8000894 <HAL_GetTick>
 80019c4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7fe ff64 	bl	8000894 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e172      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019de:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 80019e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ed      	beq.n	80019c8 <HAL_RCC_OscConfig+0x5e8>
 80019ec:	e01d      	b.n	8001a2a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7fe ff51 	bl	8000894 <HAL_GetTick>
 80019f2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7fe ff4d 	bl	8000894 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e15b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ed      	bne.n	80019f6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001a1a:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a20:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	4a20      	ldr	r2, [pc, #128]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0320 	and.w	r3, r3, #32
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d041      	beq.n	8001ace <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d01c      	beq.n	8001a8c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a58:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7fe ff17 	bl	8000894 <HAL_GetTick>
 8001a66:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a6a:	f7fe ff13 	bl	8000894 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e123      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0ef      	beq.n	8001a6a <HAL_RCC_OscConfig+0x68a>
 8001a8a:	e020      	b.n	8001ace <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <HAL_RCC_OscConfig+0x6d8>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7fe fefa 	bl	8000894 <HAL_GetTick>
 8001aa0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aa2:	e00d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa4:	f7fe fef6 	bl	8000894 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d906      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e106      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ac0:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ea      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80f5 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	f040 80cb 	bne.w	8001c78 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ae2:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0203 	and.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d12c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	3b01      	subs	r3, #1
 8001b02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d123      	bne.n	8001b50 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d11b      	bne.n	8001b50 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d113      	bne.n	8001b50 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	3b01      	subs	r3, #1
 8001b36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d109      	bne.n	8001b50 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d06d      	beq.n	8001c2c <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d068      	beq.n	8001c28 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b56:	4b5d      	ldr	r3, [pc, #372]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b62:	4b5a      	ldr	r3, [pc, #360]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e0a8      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b72:	4b56      	ldr	r3, [pc, #344]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a55      	ldr	r2, [pc, #340]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001b78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b7e:	f7fe fe89 	bl	8000894 <HAL_GetTick>
 8001b82:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b86:	f7fe fe85 	bl	8000894 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e095      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b98:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba4:	4b49      	ldr	r3, [pc, #292]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x8f0>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bb4:	3a01      	subs	r2, #1
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	4311      	orrs	r1, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bbe:	0212      	lsls	r2, r2, #8
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bc6:	0852      	lsrs	r2, r2, #1
 8001bc8:	3a01      	subs	r2, #1
 8001bca:	0552      	lsls	r2, r2, #21
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bd2:	0852      	lsrs	r2, r2, #1
 8001bd4:	3a01      	subs	r2, #1
 8001bd6:	0652      	lsls	r2, r2, #25
 8001bd8:	4311      	orrs	r1, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bde:	06d2      	lsls	r2, r2, #27
 8001be0:	430a      	orrs	r2, r1
 8001be2:	493a      	ldr	r1, [pc, #232]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001be8:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a37      	ldr	r2, [pc, #220]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4a34      	ldr	r2, [pc, #208]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c00:	f7fe fe48 	bl	8000894 <HAL_GetTick>
 8001c04:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7fe fe44 	bl	8000894 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e054      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c26:	e04c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e04b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d144      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c50:	f7fe fe20 	bl	8000894 <HAL_GetTick>
 8001c54:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7fe fe1c 	bl	8000894 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e02c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x878>
 8001c76:	e024      	b.n	8001cc2 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d01f      	beq.n	8001cbe <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fe03 	bl	8000894 <HAL_GetTick>
 8001c8e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7fe fdff 	bl	8000894 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	4905      	ldr	r1, [pc, #20]	; (8001ccc <HAL_RCC_OscConfig+0x8ec>)
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <HAL_RCC_OscConfig+0x8f4>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60cb      	str	r3, [r1, #12]
 8001cbc:	e001      	b.n	8001cc2 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3728      	adds	r7, #40	; 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	019d800c 	.word	0x019d800c
 8001cd4:	feeefffc 	.word	0xfeeefffc

08001cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e11d      	b.n	8001f2c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b90      	ldr	r3, [pc, #576]	; (8001f34 <HAL_RCC_ClockConfig+0x25c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d910      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b8d      	ldr	r3, [pc, #564]	; (8001f34 <HAL_RCC_ClockConfig+0x25c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 020f 	bic.w	r2, r3, #15
 8001d06:	498b      	ldr	r1, [pc, #556]	; (8001f34 <HAL_RCC_ClockConfig+0x25c>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b89      	ldr	r3, [pc, #548]	; (8001f34 <HAL_RCC_ClockConfig+0x25c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e105      	b.n	8001f2c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d010      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	4b81      	ldr	r3, [pc, #516]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d908      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b7e      	ldr	r3, [pc, #504]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	497b      	ldr	r1, [pc, #492]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d079      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d11e      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d62:	4b75      	ldr	r3, [pc, #468]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e0dc      	b.n	8001f2c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d72:	f000 f9cf 	bl	8002114 <RCC_GetSysClockFreqFromPLLSource>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a70      	ldr	r2, [pc, #448]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d946      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d7e:	4b6e      	ldr	r3, [pc, #440]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d140      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d8a:	4b6b      	ldr	r3, [pc, #428]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d92:	4a69      	ldr	r2, [pc, #420]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e035      	b.n	8001e0c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da8:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d115      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0b9      	b.n	8001f2c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc0:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d109      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0ad      	b.n	8001f2c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0a5      	b.n	8001f2c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001de0:	f000 f8b4 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a55      	ldr	r2, [pc, #340]	; (8001f3c <HAL_RCC_ClockConfig+0x264>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d90f      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001dec:	4b52      	ldr	r3, [pc, #328]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e00:	4a4d      	ldr	r2, [pc, #308]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e06:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e0c:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f023 0203 	bic.w	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4947      	ldr	r1, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e1e:	f7fe fd39 	bl	8000894 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e26:	f7fe fd35 	bl	8000894 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e077      	b.n	8001f2c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3c:	4b3e      	ldr	r3, [pc, #248]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 020c 	and.w	r2, r3, #12
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d1eb      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b80      	cmp	r3, #128	; 0x80
 8001e52:	d105      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e54:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a37      	ldr	r2, [pc, #220]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e5e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d010      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d208      	bcs.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	492b      	ldr	r1, [pc, #172]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <HAL_RCC_ClockConfig+0x25c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d210      	bcs.n	8001ebe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_RCC_ClockConfig+0x25c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 020f 	bic.w	r2, r3, #15
 8001ea4:	4923      	ldr	r1, [pc, #140]	; (8001f34 <HAL_RCC_ClockConfig+0x25c>)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <HAL_RCC_ClockConfig+0x25c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e036      	b.n	8001f2c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	4918      	ldr	r1, [pc, #96]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4910      	ldr	r1, [pc, #64]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001efc:	f000 f826 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <HAL_RCC_ClockConfig+0x268>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x26c>)
 8001f1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_RCC_ClockConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fc67 	bl	80007f4 <HAL_InitTick>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	04c4b400 	.word	0x04c4b400
 8001f40:	08002cf4 	.word	0x08002cf4
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000004 	.word	0x20000004

08001f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f64:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x34>
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d121      	bne.n	8001fbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d11e      	bne.n	8001fbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fa8:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d102      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	e004      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd0:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d134      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d003      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ff0:	e005      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff4:	617b      	str	r3, [r7, #20]
      break;
 8001ff6:	e005      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ffa:	617b      	str	r3, [r7, #20]
      break;
 8001ffc:	e002      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	617b      	str	r3, [r7, #20]
      break;
 8002002:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3301      	adds	r3, #1
 8002010:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	fb03 f202 	mul.w	r2, r3, r2
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	fbb2 f3f3 	udiv	r3, r2, r3
 8002028:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	0e5b      	lsrs	r3, r3, #25
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	3301      	adds	r3, #1
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002044:	69bb      	ldr	r3, [r7, #24]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	08002d04 	.word	0x08002d04
 800205c:	00f42400 	.word	0x00f42400

08002060 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002078:	f7ff f8ee 	bl	8001258 <HAL_PWREx_GetVoltageRange>
 800207c:	6178      	str	r0, [r7, #20]
 800207e:	e014      	b.n	80020aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	4b22      	ldr	r3, [pc, #136]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	4a21      	ldr	r2, [pc, #132]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208a:	6593      	str	r3, [r2, #88]	; 0x58
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002098:	f7ff f8de 	bl	8001258 <HAL_PWREx_GetVoltageRange>
 800209c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	4a1a      	ldr	r2, [pc, #104]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b0:	d10b      	bne.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b80      	cmp	r3, #128	; 0x80
 80020b6:	d913      	bls.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2ba0      	cmp	r3, #160	; 0xa0
 80020bc:	d902      	bls.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020be:	2302      	movs	r3, #2
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	e00d      	b.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c4:	2301      	movs	r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	e00a      	b.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b7f      	cmp	r3, #127	; 0x7f
 80020ce:	d902      	bls.n	80020d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80020d0:	2302      	movs	r3, #2
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	e004      	b.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b70      	cmp	r3, #112	; 0x70
 80020da:	d101      	bne.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020dc:	2301      	movs	r3, #1
 80020de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 020f 	bic.w	r2, r3, #15
 80020e8:	4909      	ldr	r1, [pc, #36]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d001      	beq.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	40022000 	.word	0x40022000

08002114 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d00b      	beq.n	8002142 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d825      	bhi.n	800217c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d008      	beq.n	8002148 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d11f      	bne.n	800217c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800213e:	613b      	str	r3, [r7, #16]
    break;
 8002140:	e01f      	b.n	8002182 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002144:	613b      	str	r3, [r7, #16]
    break;
 8002146:	e01c      	b.n	8002182 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e005      	b.n	8002170 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002178:	613b      	str	r3, [r7, #16]
    break;
 800217a:	e002      	b.n	8002182 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
    break;
 8002180:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	3301      	adds	r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	fb03 f202 	mul.w	r2, r3, r2
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0e5b      	lsrs	r3, r3, #25
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80021c2:	683b      	ldr	r3, [r7, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40021000 	.word	0x40021000
 80021d4:	00f42400 	.word	0x00f42400
 80021d8:	08002d04 	.word	0x08002d04

080021dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021e4:	2300      	movs	r3, #0
 80021e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021e8:	2300      	movs	r3, #0
 80021ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d040      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fc:	2b80      	cmp	r3, #128	; 0x80
 80021fe:	d02a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d825      	bhi.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002204:	2b60      	cmp	r3, #96	; 0x60
 8002206:	d026      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002208:	2b60      	cmp	r3, #96	; 0x60
 800220a:	d821      	bhi.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d006      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d81d      	bhi.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002218:	2b20      	cmp	r3, #32
 800221a:	d010      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800221c:	e018      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4a88      	ldr	r2, [pc, #544]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800222a:	e015      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fb3e 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800223c:	e00c      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3320      	adds	r3, #32
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fc29 	bl	8002a9c <RCCEx_PLLSAI2_Config>
 800224a:	4603      	mov	r3, r0
 800224c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800224e:	e003      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	74fb      	strb	r3, [r7, #19]
      break;
 8002254:	e000      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10b      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800225e:	4b79      	ldr	r3, [pc, #484]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002260:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002264:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800226c:	4975      	ldr	r1, [pc, #468]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002274:	e001      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d047      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d030      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002294:	d82a      	bhi.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800229a:	d02a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800229c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022a0:	d824      	bhi.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80022a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a6:	d008      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 80022a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ac:	d81e      	bhi.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80022b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b6:	d010      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80022b8:	e018      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022ba:	4b62      	ldr	r3, [pc, #392]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4a61      	ldr	r2, [pc, #388]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022c6:	e015      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 faf0 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022d8:	e00c      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3320      	adds	r3, #32
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fbdb 	bl	8002a9c <RCCEx_PLLSAI2_Config>
 80022e6:	4603      	mov	r3, r0
 80022e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ea:	e003      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	74fb      	strb	r3, [r7, #19]
      break;
 80022f0:	e000      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80022f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10b      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022fa:	4b52      	ldr	r3, [pc, #328]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	494e      	ldr	r1, [pc, #312]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002310:	e001      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 809f 	beq.w	8002462 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002328:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002338:	2300      	movs	r3, #0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	4b41      	ldr	r3, [pc, #260]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	4a40      	ldr	r2, [pc, #256]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6593      	str	r3, [r2, #88]	; 0x58
 800234a:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a3a      	ldr	r2, [pc, #232]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002366:	f7fe fa95 	bl	8000894 <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800236c:	e009      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7fe fa91 	bl	8000894 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d902      	bls.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	74fb      	strb	r3, [r7, #19]
        break;
 8002380:	e005      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ef      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d15b      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d01f      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d019      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023de:	4a19      	ldr	r2, [pc, #100]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d016      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fa50 	bl	8000894 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f6:	e00b      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe fa4c 	bl	8000894 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d902      	bls.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	74fb      	strb	r3, [r7, #19]
            break;
 800240e:	e006      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0ec      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10c      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002434:	4903      	ldr	r1, [pc, #12]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800243c:	e008      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	74bb      	strb	r3, [r7, #18]
 8002442:	e005      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002444:	40021000 	.word	0x40021000
 8002448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002450:	7c7b      	ldrb	r3, [r7, #17]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d105      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002456:	4ba0      	ldr	r3, [pc, #640]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	4a9f      	ldr	r2, [pc, #636]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800245c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002460:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800246e:	4b9a      	ldr	r3, [pc, #616]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f023 0203 	bic.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247c:	4996      	ldr	r1, [pc, #600]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002490:	4b91      	ldr	r3, [pc, #580]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f023 020c 	bic.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	498e      	ldr	r1, [pc, #568]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b2:	4b89      	ldr	r3, [pc, #548]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	4985      	ldr	r1, [pc, #532]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d4:	4b80      	ldr	r3, [pc, #512]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e2:	497d      	ldr	r1, [pc, #500]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024f6:	4b78      	ldr	r3, [pc, #480]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002504:	4974      	ldr	r1, [pc, #464]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002526:	496c      	ldr	r1, [pc, #432]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800253a:	4b67      	ldr	r3, [pc, #412]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002548:	4963      	ldr	r1, [pc, #396]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800255c:	4b5e      	ldr	r3, [pc, #376]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800256a:	495b      	ldr	r1, [pc, #364]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800257e:	4b56      	ldr	r3, [pc, #344]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258c:	4952      	ldr	r1, [pc, #328]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025a0:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	494a      	ldr	r1, [pc, #296]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025c2:	4b45      	ldr	r3, [pc, #276]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	4941      	ldr	r1, [pc, #260]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025e4:	4b3c      	ldr	r3, [pc, #240]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4939      	ldr	r1, [pc, #228]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d028      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002606:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002614:	4930      	ldr	r1, [pc, #192]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002624:	d106      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002626:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800262c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002630:	60d3      	str	r3, [r2, #12]
 8002632:	e011      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002638:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800263c:	d10c      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3304      	adds	r3, #4
 8002642:	2101      	movs	r1, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f935 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d04d      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800266c:	d108      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002674:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800267e:	e012      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800268c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269e:	490e      	ldr	r1, [pc, #56]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ae:	d106      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ba:	60d3      	str	r3, [r2, #12]
 80026bc:	e020      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c6:	d109      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a02      	ldr	r2, [pc, #8]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d2:	60d3      	str	r3, [r2, #12]
 80026d4:	e014      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2101      	movs	r1, #1
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f8e1 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d028      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800270c:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800271a:	4965      	ldr	r1, [pc, #404]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272a:	d106      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272c:	4b60      	ldr	r3, [pc, #384]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a5f      	ldr	r2, [pc, #380]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	60d3      	str	r3, [r2, #12]
 8002738:	e011      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800273e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002742:	d10c      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	2101      	movs	r1, #1
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f8b2 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01e      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800276a:	4b51      	ldr	r3, [pc, #324]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800277a:	494d      	ldr	r1, [pc, #308]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800278c:	d10c      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	2102      	movs	r1, #2
 8002794:	4618      	mov	r0, r3
 8002796:	f000 f88d 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027b4:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80027b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027ba:	f023 0204 	bic.w	r2, r3, #4
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c4:	493a      	ldr	r1, [pc, #232]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80027d8:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80027da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027de:	f023 0218 	bic.w	r2, r3, #24
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	4931      	ldr	r1, [pc, #196]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d035      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027fc:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002808:	f7fe f844 	bl	8000894 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800280e:	e009      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002810:	f7fe f840 	bl	8000894 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d902      	bls.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	74fb      	strb	r3, [r7, #19]
        break;
 8002822:	e005      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002824:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ef      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d113      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002838:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800283c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002846:	491a      	ldr	r1, [pc, #104]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3320      	adds	r3, #32
 8002852:	2102      	movs	r1, #2
 8002854:	4618      	mov	r0, r3
 8002856:	f000 f921 	bl	8002a9c <RCCEx_PLLSAI2_Config>
 800285a:	4603      	mov	r3, r0
 800285c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d017      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800287a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002884:	490a      	ldr	r1, [pc, #40]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002896:	d105      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800289e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000

080028b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028c2:	4b72      	ldr	r3, [pc, #456]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00e      	beq.n	80028ec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028ce:	4b6f      	ldr	r3, [pc, #444]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0203 	and.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d103      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
       ||
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d142      	bne.n	800296c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	e03f      	b.n	800296c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d018      	beq.n	8002926 <RCCEx_PLLSAI1_Config+0x72>
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d825      	bhi.n	8002944 <RCCEx_PLLSAI1_Config+0x90>
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d002      	beq.n	8002902 <RCCEx_PLLSAI1_Config+0x4e>
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d009      	beq.n	8002914 <RCCEx_PLLSAI1_Config+0x60>
 8002900:	e020      	b.n	8002944 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002902:	4b62      	ldr	r3, [pc, #392]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d11d      	bne.n	800294a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002912:	e01a      	b.n	800294a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002914:	4b5d      	ldr	r3, [pc, #372]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d116      	bne.n	800294e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002924:	e013      	b.n	800294e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002926:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10f      	bne.n	8002952 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002932:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002942:	e006      	b.n	8002952 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      break;
 8002948:	e004      	b.n	8002954 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800294a:	bf00      	nop
 800294c:	e002      	b.n	8002954 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800294e:	bf00      	nop
 8002950:	e000      	b.n	8002954 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002952:	bf00      	nop
    }

    if(status == HAL_OK)
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d108      	bne.n	800296c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800295a:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f023 0203 	bic.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4949      	ldr	r1, [pc, #292]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002968:	4313      	orrs	r3, r2
 800296a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 8086 	bne.w	8002a80 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002974:	4b45      	ldr	r3, [pc, #276]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a44      	ldr	r2, [pc, #272]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 800297a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800297e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fd ff88 	bl	8000894 <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002986:	e009      	b.n	800299c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002988:	f7fd ff84 	bl	8000894 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d902      	bls.n	800299c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	73fb      	strb	r3, [r7, #15]
        break;
 800299a:	e005      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800299c:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ef      	bne.n	8002988 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d168      	bne.n	8002a80 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d113      	bne.n	80029dc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b4:	4b35      	ldr	r3, [pc, #212]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6892      	ldr	r2, [r2, #8]
 80029c0:	0211      	lsls	r1, r2, #8
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	06d2      	lsls	r2, r2, #27
 80029c8:	4311      	orrs	r1, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6852      	ldr	r2, [r2, #4]
 80029ce:	3a01      	subs	r2, #1
 80029d0:	0112      	lsls	r2, r2, #4
 80029d2:	430a      	orrs	r2, r1
 80029d4:	492d      	ldr	r1, [pc, #180]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	610b      	str	r3, [r1, #16]
 80029da:	e02d      	b.n	8002a38 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d115      	bne.n	8002a0e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	0211      	lsls	r1, r2, #8
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6912      	ldr	r2, [r2, #16]
 80029f4:	0852      	lsrs	r2, r2, #1
 80029f6:	3a01      	subs	r2, #1
 80029f8:	0552      	lsls	r2, r2, #21
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6852      	ldr	r2, [r2, #4]
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0112      	lsls	r2, r2, #4
 8002a04:	430a      	orrs	r2, r1
 8002a06:	4921      	ldr	r1, [pc, #132]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	610b      	str	r3, [r1, #16]
 8002a0c:	e014      	b.n	8002a38 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6892      	ldr	r2, [r2, #8]
 8002a1a:	0211      	lsls	r1, r2, #8
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6952      	ldr	r2, [r2, #20]
 8002a20:	0852      	lsrs	r2, r2, #1
 8002a22:	3a01      	subs	r2, #1
 8002a24:	0652      	lsls	r2, r2, #25
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6852      	ldr	r2, [r2, #4]
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	0112      	lsls	r2, r2, #4
 8002a30:	430a      	orrs	r2, r1
 8002a32:	4916      	ldr	r1, [pc, #88]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fd ff26 	bl	8000894 <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a4a:	e009      	b.n	8002a60 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a4c:	f7fd ff22 	bl	8000894 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d902      	bls.n	8002a60 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a5e:	e005      	b.n	8002a6c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ef      	beq.n	8002a4c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	4904      	ldr	r1, [pc, #16]	; (8002a8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	07ff800f 	.word	0x07ff800f
 8002a94:	ff9f800f 	.word	0xff9f800f
 8002a98:	f9ff800f 	.word	0xf9ff800f

08002a9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aaa:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00e      	beq.n	8002ad4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ab6:	4b6f      	ldr	r3, [pc, #444]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0203 	and.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d103      	bne.n	8002ace <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d142      	bne.n	8002b54 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
 8002ad2:	e03f      	b.n	8002b54 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d018      	beq.n	8002b0e <RCCEx_PLLSAI2_Config+0x72>
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d825      	bhi.n	8002b2c <RCCEx_PLLSAI2_Config+0x90>
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d002      	beq.n	8002aea <RCCEx_PLLSAI2_Config+0x4e>
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d009      	beq.n	8002afc <RCCEx_PLLSAI2_Config+0x60>
 8002ae8:	e020      	b.n	8002b2c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aea:	4b62      	ldr	r3, [pc, #392]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11d      	bne.n	8002b32 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afa:	e01a      	b.n	8002b32 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002afc:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d116      	bne.n	8002b36 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0c:	e013      	b.n	8002b36 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b0e:	4b59      	ldr	r3, [pc, #356]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10f      	bne.n	8002b3a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b1a:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b2a:	e006      	b.n	8002b3a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b30:	e004      	b.n	8002b3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b32:	bf00      	nop
 8002b34:	e002      	b.n	8002b3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d108      	bne.n	8002b54 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002b42:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f023 0203 	bic.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4949      	ldr	r1, [pc, #292]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 8086 	bne.w	8002c68 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b5c:	4b45      	ldr	r3, [pc, #276]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a44      	ldr	r2, [pc, #272]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fd fe94 	bl	8000894 <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b6e:	e009      	b.n	8002b84 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b70:	f7fd fe90 	bl	8000894 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d902      	bls.n	8002b84 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	73fb      	strb	r3, [r7, #15]
        break;
 8002b82:	e005      	b.n	8002b90 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b84:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ef      	bne.n	8002b70 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d168      	bne.n	8002c68 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d113      	bne.n	8002bc4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b9c:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6892      	ldr	r2, [r2, #8]
 8002ba8:	0211      	lsls	r1, r2, #8
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68d2      	ldr	r2, [r2, #12]
 8002bae:	06d2      	lsls	r2, r2, #27
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6852      	ldr	r2, [r2, #4]
 8002bb6:	3a01      	subs	r2, #1
 8002bb8:	0112      	lsls	r2, r2, #4
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	492d      	ldr	r1, [pc, #180]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	614b      	str	r3, [r1, #20]
 8002bc2:	e02d      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d115      	bne.n	8002bf6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bca:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6892      	ldr	r2, [r2, #8]
 8002bd6:	0211      	lsls	r1, r2, #8
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6912      	ldr	r2, [r2, #16]
 8002bdc:	0852      	lsrs	r2, r2, #1
 8002bde:	3a01      	subs	r2, #1
 8002be0:	0552      	lsls	r2, r2, #21
 8002be2:	4311      	orrs	r1, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6852      	ldr	r2, [r2, #4]
 8002be8:	3a01      	subs	r2, #1
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	430a      	orrs	r2, r1
 8002bee:	4921      	ldr	r1, [pc, #132]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	614b      	str	r3, [r1, #20]
 8002bf4:	e014      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6892      	ldr	r2, [r2, #8]
 8002c02:	0211      	lsls	r1, r2, #8
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6952      	ldr	r2, [r2, #20]
 8002c08:	0852      	lsrs	r2, r2, #1
 8002c0a:	3a01      	subs	r2, #1
 8002c0c:	0652      	lsls	r2, r2, #25
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6852      	ldr	r2, [r2, #4]
 8002c14:	3a01      	subs	r2, #1
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	4916      	ldr	r1, [pc, #88]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fd fe32 	bl	8000894 <HAL_GetTick>
 8002c30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c32:	e009      	b.n	8002c48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c34:	f7fd fe2e 	bl	8000894 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d902      	bls.n	8002c48 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	73fb      	strb	r3, [r7, #15]
          break;
 8002c46:	e005      	b.n	8002c54 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0ef      	beq.n	8002c34 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	4904      	ldr	r1, [pc, #16]	; (8002c74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	07ff800f 	.word	0x07ff800f
 8002c7c:	ff9f800f 	.word	0xff9f800f
 8002c80:	f9ff800f 	.word	0xf9ff800f

08002c84 <__libc_init_array>:
 8002c84:	b570      	push	{r4, r5, r6, lr}
 8002c86:	4d0d      	ldr	r5, [pc, #52]	; (8002cbc <__libc_init_array+0x38>)
 8002c88:	4c0d      	ldr	r4, [pc, #52]	; (8002cc0 <__libc_init_array+0x3c>)
 8002c8a:	1b64      	subs	r4, r4, r5
 8002c8c:	10a4      	asrs	r4, r4, #2
 8002c8e:	2600      	movs	r6, #0
 8002c90:	42a6      	cmp	r6, r4
 8002c92:	d109      	bne.n	8002ca8 <__libc_init_array+0x24>
 8002c94:	4d0b      	ldr	r5, [pc, #44]	; (8002cc4 <__libc_init_array+0x40>)
 8002c96:	4c0c      	ldr	r4, [pc, #48]	; (8002cc8 <__libc_init_array+0x44>)
 8002c98:	f000 f820 	bl	8002cdc <_init>
 8002c9c:	1b64      	subs	r4, r4, r5
 8002c9e:	10a4      	asrs	r4, r4, #2
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	42a6      	cmp	r6, r4
 8002ca4:	d105      	bne.n	8002cb2 <__libc_init_array+0x2e>
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
 8002ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cac:	4798      	blx	r3
 8002cae:	3601      	adds	r6, #1
 8002cb0:	e7ee      	b.n	8002c90 <__libc_init_array+0xc>
 8002cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb6:	4798      	blx	r3
 8002cb8:	3601      	adds	r6, #1
 8002cba:	e7f2      	b.n	8002ca2 <__libc_init_array+0x1e>
 8002cbc:	08002d34 	.word	0x08002d34
 8002cc0:	08002d34 	.word	0x08002d34
 8002cc4:	08002d34 	.word	0x08002d34
 8002cc8:	08002d38 	.word	0x08002d38

08002ccc <memset>:
 8002ccc:	4402      	add	r2, r0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <memset+0xa>
 8002cd4:	4770      	bx	lr
 8002cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cda:	e7f9      	b.n	8002cd0 <memset+0x4>

08002cdc <_init>:
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	bf00      	nop
 8002ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce2:	bc08      	pop	{r3}
 8002ce4:	469e      	mov	lr, r3
 8002ce6:	4770      	bx	lr

08002ce8 <_fini>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	bf00      	nop
 8002cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cee:	bc08      	pop	{r3}
 8002cf0:	469e      	mov	lr, r3
 8002cf2:	4770      	bx	lr

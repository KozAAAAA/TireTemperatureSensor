
Tire_Temperature_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a6c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c70  08003c70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c70  08003c70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c70  08003c70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  08003c84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003c84  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9fd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002499  00000000  00000000  0002ea39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00030ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00031b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e21c  00000000  00000000  000326a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa33  00000000  00000000  000608bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b7ca  00000000  00000000  000702ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017bab9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b4  00000000  00000000  0017bb0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003c10 	.word	0x08003c10

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003c10 	.word	0x08003c10

080001fc <_Z15MLX90621_DumpEEPh>:
void ExtractAlphaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);
void ExtractOffsetParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);


int MLX90621_DumpEE(uint8_t *eeData)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
     return MLX90621_I2CReadEEPROM(0x50, 0, 256, eeData);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800020a:	2100      	movs	r1, #0
 800020c:	2050      	movs	r0, #80	; 0x50
 800020e:	f000 f87b 	bl	8000308 <_Z22MLX90621_I2CReadEEPROMhhtPh>
 8000212:	4603      	mov	r3, r0
}
 8000214:	4618      	mov	r0, r3
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <_Z18MLX90621_ConfigurePh>:
       
    return error;    
}

int MLX90621_Configure(uint8_t *eeData)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    int error = 1;
 8000224:	2301      	movs	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
    uint16_t value;
    
    error = MLX90621_I2CWrite(0x60, 0x04, 0xAA, eeData[247]);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	33f7      	adds	r3, #247	; 0xf7
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	b29b      	uxth	r3, r3
 8000230:	22aa      	movs	r2, #170	; 0xaa
 8000232:	2104      	movs	r1, #4
 8000234:	2060      	movs	r0, #96	; 0x60
 8000236:	f000 f975 	bl	8000524 <_Z17MLX90621_I2CWritehhht>
 800023a:	60f8      	str	r0, [r7, #12]
    
    if (error != 0)
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <_Z18MLX90621_ConfigurePh+0x2a>
    {
        return error;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	e017      	b.n	8000276 <_Z18MLX90621_ConfigurePh+0x5a>
    }
    
    value = 256*eeData[246] + eeData[245];      
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	33f6      	adds	r3, #246	; 0xf6
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	021b      	lsls	r3, r3, #8
 8000250:	b29a      	uxth	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	33f5      	adds	r3, #245	; 0xf5
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	b29b      	uxth	r3, r3
 800025a:	4413      	add	r3, r2
 800025c:	817b      	strh	r3, [r7, #10]
    value = value | 0x0400;
 800025e:	897b      	ldrh	r3, [r7, #10]
 8000260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000264:	817b      	strh	r3, [r7, #10]
    error = MLX90621_I2CWrite(0x60, 0x03, 0x55, value);
 8000266:	897b      	ldrh	r3, [r7, #10]
 8000268:	2255      	movs	r2, #85	; 0x55
 800026a:	2103      	movs	r1, #3
 800026c:	2060      	movs	r0, #96	; 0x60
 800026e:	f000 f959 	bl	8000524 <_Z17MLX90621_I2CWritehhht>
 8000272:	60f8      	str	r0, [r7, #12]
    
    return error;      
 8000274:	68fb      	ldr	r3, [r7, #12]
}   
 8000276:	4618      	mov	r0, r3
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <_Z25MLX90621_GetConfigurationPt>:
       
    return error;    
}    

int MLX90621_GetConfiguration(uint16_t *cfgReg)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b086      	sub	sp, #24
 8000282:	af02      	add	r7, sp, #8
 8000284:	6078      	str	r0, [r7, #4]
    int error = 1;
 8000286:	2301      	movs	r3, #1
 8000288:	60fb      	str	r3, [r7, #12]
        
    error = MLX90621_I2CRead(0x60, 0x02, 0x92, 0, 1, cfgReg); 
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	2301      	movs	r3, #1
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	2292      	movs	r2, #146	; 0x92
 8000296:	2102      	movs	r1, #2
 8000298:	2060      	movs	r0, #96	; 0x60
 800029a:	f000 f8c3 	bl	8000424 <_Z16MLX90621_I2CReadhhhhhPt>
 800029e:	60f8      	str	r0, [r7, #12]
       
    return error;    
 80002a0:	68fb      	ldr	r3, [r7, #12]
}   
 80002a2:	4618      	mov	r0, r3
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <_Z25MLX90621_GetCurResolutionv>:
}

//------------------------------------------------------------------------------

int MLX90621_GetCurResolution()
{
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b084      	sub	sp, #16
 80002ae:	af00      	add	r7, sp, #0
    uint16_t cfgReg;
    int resolution;
    int error;
    
    error = MLX90621_GetConfiguration(&cfgReg);
 80002b0:	1dbb      	adds	r3, r7, #6
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ffe3 	bl	800027e <_Z25MLX90621_GetConfigurationPt>
 80002b8:	60f8      	str	r0, [r7, #12]
    if(error != 0)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <_Z25MLX90621_GetCurResolutionv+0x1a>
    {
        return error;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	e006      	b.n	80002d2 <_Z25MLX90621_GetCurResolutionv+0x28>
    }    
    resolution = (cfgReg & 0x0030) >> 4;
 80002c4:	88fb      	ldrh	r3, [r7, #6]
 80002c6:	091b      	lsrs	r3, r3, #4
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	f003 0303 	and.w	r3, r3, #3
 80002ce:	60bb      	str	r3, [r7, #8]
    
    return resolution; 
 80002d0:	68bb      	ldr	r3, [r7, #8]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <_Z23MLX90621_GetRefreshRatev>:
}

//------------------------------------------------------------------------------

int MLX90621_GetRefreshRate()
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	b084      	sub	sp, #16
 80002de:	af00      	add	r7, sp, #0
    uint16_t cfgReg;
    int rr;
    int error;
    
    error = MLX90621_GetConfiguration(&cfgReg);
 80002e0:	1dbb      	adds	r3, r7, #6
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ffcb 	bl	800027e <_Z25MLX90621_GetConfigurationPt>
 80002e8:	60f8      	str	r0, [r7, #12]
    if(error != 0)
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <_Z23MLX90621_GetRefreshRatev+0x1a>
    {
        return error;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	e004      	b.n	80002fe <_Z23MLX90621_GetRefreshRatev+0x24>
    }    
    rr = (cfgReg & 0x000F);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	f003 030f 	and.w	r3, r3, #15
 80002fa:	60bb      	str	r3, [r7, #8]
    
    return rr; 
 80002fc:	68bb      	ldr	r3, [r7, #8]
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <_Z22MLX90621_I2CReadEEPROMhhtPh>:
	//set via the .ioc
    //i2c.frequency(1000*freq);
}

int MLX90621_I2CReadEEPROM(uint8_t slaveAddr, uint8_t startAddress, uint16_t nMemAddressRead, uint8_t *data)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b0cb      	sub	sp, #300	; 0x12c
 800030c:	af04      	add	r7, sp, #16
 800030e:	4604      	mov	r4, r0
 8000310:	4608      	mov	r0, r1
 8000312:	4611      	mov	r1, r2
 8000314:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000318:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800031c:	6013      	str	r3, [r2, #0]
 800031e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000322:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000326:	4622      	mov	r2, r4
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800032e:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8000332:	4602      	mov	r2, r0
 8000334:	701a      	strb	r2, [r3, #0]
 8000336:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800033a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800033e:	460a      	mov	r2, r1
 8000340:	801a      	strh	r2, [r3, #0]
    uint8_t sa;
    int cnt = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    uint8_t cmd = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    uint8_t i2cData[256] = {0};
 800034e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000352:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	3304      	adds	r3, #4
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f003 fc4d 	bl	8003c00 <memset>
    uint8_t *p;
    
    p = data;
 8000366:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800036a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    sa = (slaveAddr << 1);
 8000374:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000378:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    cmd = startAddress;
 8000384:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000388:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    
    if(HAL_I2C_Mem_Read(&hi2c2, sa, cmd, 1, i2cData, nMemAddressRead, 100) != HAL_OK)
 8000392:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8000396:	b299      	uxth	r1, r3
 8000398:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800039c:	b29a      	uxth	r2, r3
 800039e:	2364      	movs	r3, #100	; 0x64
 80003a0:	9302      	str	r3, [sp, #8]
 80003a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	9301      	str	r3, [sp, #4]
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	2301      	movs	r3, #1
 80003b6:	481a      	ldr	r0, [pc, #104]	; (8000420 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x118>)
 80003b8:	f001 f964 	bl	8001684 <HAL_I2C_Mem_Read>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	bf14      	ite	ne
 80003c2:	2301      	movne	r3, #1
 80003c4:	2300      	moveq	r3, #0
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d002      	beq.n	80003d2 <_Z22MLX90621_I2CReadEEPROMhhtPh+0xca>
    {
    	return -1;
 80003cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003d0:	e021      	b.n	8000416 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x10e>
    }
    
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 80003d2:	2300      	movs	r3, #0
 80003d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80003d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80003e6:	429a      	cmp	r2, r3
 80003e8:	da14      	bge.n	8000414 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x10c>
    {
        *p++ = i2cData[cnt];
 80003ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003ee:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80003f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80003f6:	4413      	add	r3, r2
 80003f8:	7819      	ldrb	r1, [r3, #0]
 80003fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80003fe:	1c5a      	adds	r2, r3, #1
 8000400:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8000404:	460a      	mov	r2, r1
 8000406:	701a      	strb	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8000408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800040c:	3301      	adds	r3, #1
 800040e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000412:	e7e1      	b.n	80003d8 <_Z22MLX90621_I2CReadEEPROMhhtPh+0xd0>
    }
    

    return 0;
 8000414:	2300      	movs	r3, #0
} 
 8000416:	4618      	mov	r0, r3
 8000418:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800041c:	46bd      	mov	sp, r7
 800041e:	bd90      	pop	{r4, r7, pc}
 8000420:	20000054 	.word	0x20000054

08000424 <_Z16MLX90621_I2CReadhhhhhPt>:

int MLX90621_I2CRead(uint8_t slaveAddr,uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead, uint16_t *data)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b0af      	sub	sp, #188	; 0xbc
 8000428:	af06      	add	r7, sp, #24
 800042a:	4604      	mov	r4, r0
 800042c:	4608      	mov	r0, r1
 800042e:	4611      	mov	r1, r2
 8000430:	461a      	mov	r2, r3
 8000432:	4623      	mov	r3, r4
 8000434:	71fb      	strb	r3, [r7, #7]
 8000436:	4603      	mov	r3, r0
 8000438:	71bb      	strb	r3, [r7, #6]
 800043a:	460b      	mov	r3, r1
 800043c:	717b      	strb	r3, [r7, #5]
 800043e:	4613      	mov	r3, r2
 8000440:	713b      	strb	r3, [r7, #4]
    uint8_t sa;
    int cnt = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    int i = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t i2cData[132] = {0};
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f003 fbd0 	bl	8003c00 <memset>
    uint16_t *p;
    
    p = data;
 8000460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    sa = (slaveAddr << 1);
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    

    if(Custom_HAL_I2C_Mem_Read(&hi2c2, sa, command, startAddress, addressStep, nMemAddressRead, i2cData, 2*nMemAddressRead, 100) != HAL_OK)
 8000470:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000474:	b299      	uxth	r1, r3
 8000476:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800047a:	b29b      	uxth	r3, r3
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	b29b      	uxth	r3, r3
 8000480:	7978      	ldrb	r0, [r7, #5]
 8000482:	79ba      	ldrb	r2, [r7, #6]
 8000484:	2464      	movs	r4, #100	; 0x64
 8000486:	9404      	str	r4, [sp, #16]
 8000488:	9303      	str	r3, [sp, #12]
 800048a:	f107 030c 	add.w	r3, r7, #12
 800048e:	9302      	str	r3, [sp, #8]
 8000490:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	793b      	ldrb	r3, [r7, #4]
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	4603      	mov	r3, r0
 800049c:	4820      	ldr	r0, [pc, #128]	; (8000520 <_Z16MLX90621_I2CReadhhhhhPt+0xfc>)
 800049e:	f001 fc5d 	bl	8001d5c <Custom_HAL_I2C_Mem_Read>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	bf14      	ite	ne
 80004a8:	2301      	movne	r3, #1
 80004aa:	2300      	moveq	r3, #0
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d002      	beq.n	80004b8 <_Z16MLX90621_I2CReadhhhhhPt+0x94>
    {
    	return -1;
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004b6:	e02e      	b.n	8000516 <_Z16MLX90621_I2CReadhhhhhPt+0xf2>
    }
    
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 80004b8:	2300      	movs	r3, #0
 80004ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80004be:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80004c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80004c6:	429a      	cmp	r2, r3
 80004c8:	da24      	bge.n	8000514 <_Z16MLX90621_I2CReadhhhhhPt+0xf0>
    {
        i = cnt << 1;
 80004ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        *p++ = (uint16_t)i2cData[i+1]*256 + (uint16_t)i2cData[i];
 80004d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80004d8:	3301      	adds	r3, #1
 80004da:	33a0      	adds	r3, #160	; 0xa0
 80004dc:	443b      	add	r3, r7
 80004de:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	021b      	lsls	r3, r3, #8
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	f107 010c 	add.w	r1, r7, #12
 80004ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80004f0:	440b      	add	r3, r1
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	4413      	add	r3, r2
 80004f8:	b299      	uxth	r1, r3
 80004fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80004fe:	1c9a      	adds	r2, r3, #2
 8000500:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8000504:	460a      	mov	r2, r1
 8000506:	801a      	strh	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8000508:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800050c:	3301      	adds	r3, #1
 800050e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000512:	e7d4      	b.n	80004be <_Z16MLX90621_I2CReadhhhhhPt+0x9a>
    }

    return 0;   
 8000514:	2300      	movs	r3, #0
} 
 8000516:	4618      	mov	r0, r3
 8000518:	37a4      	adds	r7, #164	; 0xa4
 800051a:	46bd      	mov	sp, r7
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	bf00      	nop
 8000520:	20000054 	.word	0x20000054

08000524 <_Z17MLX90621_I2CWritehhht>:

int MLX90621_I2CWrite(uint8_t slaveAddr, uint8_t command, uint8_t checkValue, uint16_t data)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b087      	sub	sp, #28
 8000528:	af02      	add	r7, sp, #8
 800052a:	4604      	mov	r4, r0
 800052c:	4608      	mov	r0, r1
 800052e:	4611      	mov	r1, r2
 8000530:	461a      	mov	r2, r3
 8000532:	4623      	mov	r3, r4
 8000534:	71fb      	strb	r3, [r7, #7]
 8000536:	4603      	mov	r3, r0
 8000538:	71bb      	strb	r3, [r7, #6]
 800053a:	460b      	mov	r3, r1
 800053c:	717b      	strb	r3, [r7, #5]
 800053e:	4613      	mov	r3, r2
 8000540:	807b      	strh	r3, [r7, #2]
    uint8_t sa;
    uint8_t cmd[5] = {0,0,0,0,0};
 8000542:	4a26      	ldr	r2, [pc, #152]	; (80005dc <_Z17MLX90621_I2CWritehhht+0xb8>)
 8000544:	f107 0308 	add.w	r3, r7, #8
 8000548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800054c:	6018      	str	r0, [r3, #0]
 800054e:	3304      	adds	r3, #4
 8000550:	7019      	strb	r1, [r3, #0]
    static uint16_t dataCheck;
    

    sa = (slaveAddr << 1);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	73fb      	strb	r3, [r7, #15]
    cmd[0] = command;
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	723b      	strb	r3, [r7, #8]
    cmd[2] = data & 0x00FF;
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	72bb      	strb	r3, [r7, #10]
    cmd[1] = cmd[2] - checkValue;
 8000562:	7aba      	ldrb	r2, [r7, #10]
 8000564:	797b      	ldrb	r3, [r7, #5]
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	b2db      	uxtb	r3, r3
 800056a:	727b      	strb	r3, [r7, #9]
    cmd[4] = data >> 8;
 800056c:	887b      	ldrh	r3, [r7, #2]
 800056e:	0a1b      	lsrs	r3, r3, #8
 8000570:	b29b      	uxth	r3, r3
 8000572:	b2db      	uxtb	r3, r3
 8000574:	733b      	strb	r3, [r7, #12]
    cmd[3] = cmd[4] - checkValue;
 8000576:	7b3a      	ldrb	r2, [r7, #12]
 8000578:	797b      	ldrb	r3, [r7, #5]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	b2db      	uxtb	r3, r3
 800057e:	72fb      	strb	r3, [r7, #11]

    if(HAL_I2C_Master_Transmit(&hi2c2, sa, cmd, 5, 100) != HAL_OK)
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	b299      	uxth	r1, r3
 8000584:	f107 0208 	add.w	r2, r7, #8
 8000588:	2364      	movs	r3, #100	; 0x64
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2305      	movs	r3, #5
 800058e:	4814      	ldr	r0, [pc, #80]	; (80005e0 <_Z17MLX90621_I2CWritehhht+0xbc>)
 8000590:	f000 ff84 	bl	800149c <HAL_I2C_Master_Transmit>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	bf14      	ite	ne
 800059a:	2301      	movne	r3, #1
 800059c:	2300      	moveq	r3, #0
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <_Z17MLX90621_I2CWritehhht+0x86>
    {
        return -1;
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a8:	e014      	b.n	80005d4 <_Z17MLX90621_I2CWritehhht+0xb0>
    }

    MLX90621_I2CRead(slaveAddr, 0x02, 0x8F+command, 0, 1, &dataCheck);
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	3b71      	subs	r3, #113	; 0x71
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	79f8      	ldrb	r0, [r7, #7]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <_Z17MLX90621_I2CWritehhht+0xc0>)
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2102      	movs	r1, #2
 80005be:	f7ff ff31 	bl	8000424 <_Z16MLX90621_I2CReadhhhhhPt>
    
    if ( dataCheck != data)
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <_Z17MLX90621_I2CWritehhht+0xc0>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	887a      	ldrh	r2, [r7, #2]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d002      	beq.n	80005d2 <_Z17MLX90621_I2CWritehhht+0xae>
    {
        return -2;
 80005cc:	f06f 0301 	mvn.w	r3, #1
 80005d0:	e000      	b.n	80005d4 <_Z17MLX90621_I2CWritehhht+0xb0>
    }    
    
    return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	08003c28 	.word	0x08003c28
 80005e0:	20000054 	.word	0x20000054
 80005e4:	20000028 	.word	0x20000028

080005e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_CAN1_Init+0x64>)
 80005ee:	4a18      	ldr	r2, [pc, #96]	; (8000650 <MX_CAN1_Init+0x68>)
 80005f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_CAN1_Init+0x64>)
 80005f4:	2218      	movs	r2, #24
 80005f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_CAN1_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_CAN1_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_CAN1_Init+0x64>)
 8000606:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800060a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_CAN1_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_CAN1_Init+0x64>)
 8000614:	2200      	movs	r2, #0
 8000616:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_CAN1_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_CAN1_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_CAN1_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_CAN1_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_CAN1_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_CAN1_Init+0x64>)
 8000638:	f000 fb14 	bl	8000c64 <HAL_CAN_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000642:	f000 f9e8 	bl	8000a16 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000002c 	.word	0x2000002c
 8000650:	40006400 	.word	0x40006400

08000654 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <HAL_CAN_MspInit+0x80>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d129      	bne.n	80006ca <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <HAL_CAN_MspInit+0x84>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <HAL_CAN_MspInit+0x84>)
 800067c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000680:	6593      	str	r3, [r2, #88]	; 0x58
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <HAL_CAN_MspInit+0x84>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_CAN_MspInit+0x84>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <HAL_CAN_MspInit+0x84>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_CAN_MspInit+0x84>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006b8:	2309      	movs	r3, #9
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f000 fcaf 	bl	8001028 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40006400 	.word	0x40006400
 80006d8:	40021000 	.word	0x40021000

080006dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <MX_GPIO_Init+0xf4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a36      	ldr	r2, [pc, #216]	; (80007d0 <MX_GPIO_Init+0xf4>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <MX_GPIO_Init+0xf4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xf4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_GPIO_Init+0xf4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_WAR2_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2144      	movs	r1, #68	; 0x44
 8000756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075a:	f000 fdf7 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WAR1_GPIO_Port, LED_WAR1_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2110      	movs	r1, #16
 8000762:	481c      	ldr	r0, [pc, #112]	; (80007d4 <MX_GPIO_Init+0xf8>)
 8000764:	f000 fdf2 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	481a      	ldr	r0, [pc, #104]	; (80007d8 <MX_GPIO_Init+0xfc>)
 800076e:	f000 fded 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_WAR2_Pin|LED_ERR_Pin;
 8000772:	2344      	movs	r3, #68	; 0x44
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f000 fc4c 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WAR1_Pin;
 8000790:	2310      	movs	r3, #16
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_WAR1_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <MX_GPIO_Init+0xf8>)
 80007a8:	f000 fc3e 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OK_Pin;
 80007ac:	2301      	movs	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OK_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_GPIO_Init+0xfc>)
 80007c4:	f000 fc30 	bl	8001028 <HAL_GPIO_Init>

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48000800 	.word	0x48000800
 80007d8:	48000400 	.word	0x48000400

080007dc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_I2C2_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_I2C2_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x302027FF;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_I2C2_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_I2C2_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_I2C2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_I2C2_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_I2C2_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_I2C2_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C2_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C2_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C2_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <MX_I2C2_Init+0x74>)
 8000818:	f000 fdb0 	bl	800137c <HAL_I2C_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000822:	f000 f8f8 	bl	8000a16 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <MX_I2C2_Init+0x74>)
 800082a:	f001 fc17 	bl	800205c <HAL_I2CEx_ConfigAnalogFilter>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 f8ef 	bl	8000a16 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_I2C2_Init+0x74>)
 800083c:	f001 fc59 	bl	80020f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 f8e6 	bl	8000a16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000054 	.word	0x20000054
 8000854:	40005800 	.word	0x40005800
 8000858:	302027ff 	.word	0x302027ff

0800085c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b0b0      	sub	sp, #192	; 0xc0
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2298      	movs	r2, #152	; 0x98
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 f9bf 	bl	8003c00 <memset>
  if(i2cHandle->Instance==I2C2)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a21      	ldr	r2, [pc, #132]	; (800090c <HAL_I2C_MspInit+0xb0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d13b      	bne.n	8000904 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000890:	2300      	movs	r3, #0
 8000892:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fc39 	bl	8003110 <HAL_RCCEx_PeriphCLKConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008a4:	f000 f8b7 	bl	8000a16 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 80008aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ac:	4a18      	ldr	r2, [pc, #96]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 80008b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c8:	2312      	movs	r3, #18
 80008ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008da:	2304      	movs	r3, #4
 80008dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008e4:	4619      	mov	r1, r3
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <HAL_I2C_MspInit+0xb8>)
 80008e8:	f000 fb9e 	bl	8001028 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 80008ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 80008f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008f6:	6593      	str	r3, [r2, #88]	; 0x58
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000904:	bf00      	nop
 8000906:	37c0      	adds	r7, #192	; 0xc0
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40005800 	.word	0x40005800
 8000910:	40021000 	.word	0x40021000
 8000914:	48000400 	.word	0x48000400

08000918 <main>:
  */



int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 f908 	bl	8000b32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f81b 	bl	800095c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f7ff fed9 	bl	80006dc <MX_GPIO_Init>
  MX_CAN1_Init();
 800092a:	f7ff fe5d 	bl	80005e8 <MX_CAN1_Init>
  MX_I2C2_Init();
 800092e:	f7ff ff55 	bl	80007dc <MX_I2C2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(500);
 8000932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000936:	f000 f971 	bl	8000c1c <HAL_Delay>

  int status;
  static uint8_t eeMLX90621[256];
  status = MLX90621_DumpEE(eeMLX90621);
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <main+0x40>)
 800093c:	f7ff fc5e 	bl	80001fc <_Z15MLX90621_DumpEEPh>
 8000940:	60f8      	str	r0, [r7, #12]
  status = MLX90621_Configure(eeMLX90621);
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <main+0x40>)
 8000944:	f7ff fc6a 	bl	800021c <_Z18MLX90621_ConfigurePh>
 8000948:	60f8      	str	r0, [r7, #12]


  int resolution;
  int refresh;
  resolution = MLX90621_GetCurResolution();
 800094a:	f7ff fcae 	bl	80002aa <_Z25MLX90621_GetCurResolutionv>
 800094e:	60b8      	str	r0, [r7, #8]
  refresh = MLX90621_GetRefreshRate();
 8000950:	f7ff fcc3 	bl	80002da <_Z23MLX90621_GetRefreshRatev>
 8000954:	6078      	str	r0, [r7, #4]


  while (1)
 8000956:	e7fe      	b.n	8000956 <main+0x3e>
 8000958:	200000a8 	.word	0x200000a8

0800095c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b098      	sub	sp, #96	; 0x60
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0318 	add.w	r3, r7, #24
 8000966:	2248      	movs	r2, #72	; 0x48
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 f948 	bl	8003c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800097e:	2000      	movs	r0, #0
 8000980:	f001 fc24 	bl	80021cc <HAL_PWREx_ControlVoltageScaling>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	bf14      	ite	ne
 800098a:	2301      	movne	r3, #1
 800098c:	2300      	moveq	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8000994:	f000 f83f 	bl	8000a16 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000998:	2301      	movs	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	2303      	movs	r3, #3
 80009a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 80009ae:	231e      	movs	r3, #30
 80009b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fca6 	bl	8002314 <HAL_RCC_OscConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bf14      	ite	ne
 80009ce:	2301      	movne	r3, #1
 80009d0:	2300      	moveq	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 80009d8:	f000 f81d 	bl	8000a16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	230f      	movs	r3, #15
 80009de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e0:	2303      	movs	r3, #3
 80009e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2105      	movs	r1, #5
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 f909 	bl	8002c0c <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf14      	ite	ne
 8000a00:	2301      	movne	r3, #1
 8000a02:	2300      	moveq	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8000a0a:	f000 f804 	bl	8000a16 <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3760      	adds	r7, #96	; 0x60
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1a:	b672      	cpsid	i
}
 8000a1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <Error_Handler+0x8>

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_MspInit+0x44>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_MspInit+0x44>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6613      	str	r3, [r2, #96]	; 0x60
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_MspInit+0x44>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x44>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x44>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x44>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f892 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <SystemInit+0x20>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <SystemInit+0x20>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae4:	f7ff ffea 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000aea:	490d      	ldr	r1, [pc, #52]	; (8000b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <LoopForever+0xe>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b00:	4c0a      	ldr	r4, [pc, #40]	; (8000b2c <LoopForever+0x16>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f003 f853 	bl	8003bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b12:	f7ff ff01 	bl	8000918 <main>

08000b16 <LoopForever>:

LoopForever:
    b LoopForever
 8000b16:	e7fe      	b.n	8000b16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b24:	08003c78 	.word	0x08003c78
  ldr r2, =_sbss
 8000b28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b2c:	200001ac 	.word	0x200001ac

08000b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC1_2_IRQHandler>

08000b32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 fa3f 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b42:	200f      	movs	r0, #15
 8000b44:	f000 f80e 	bl	8000b64 <HAL_InitTick>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d002      	beq.n	8000b54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	71fb      	strb	r3, [r7, #7]
 8000b52:	e001      	b.n	8000b58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b54:	f7ff ff64 	bl	8000a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d023      	beq.n	8000bc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_InitTick+0x70>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_InitTick+0x6c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fa3d 	bl	800100e <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d10f      	bne.n	8000bba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d809      	bhi.n	8000bb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba8:	f000 fa15 	bl	8000fd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_InitTick+0x74>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e007      	b.n	8000bc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e004      	b.n	8000bc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e001      	b.n	8000bc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	200001a8 	.word	0x200001a8

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200001a8 	.word	0x200001a8

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008

08000c64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e0ed      	b.n	8000e52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d102      	bne.n	8000c88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fce6 	bl	8000654 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f042 0201 	orr.w	r2, r2, #1
 8000c96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c98:	f7ff ffb4 	bl	8000c04 <HAL_GetTick>
 8000c9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c9e:	e012      	b.n	8000cc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca0:	f7ff ffb0 	bl	8000c04 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b0a      	cmp	r3, #10
 8000cac:	d90b      	bls.n	8000cc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2205      	movs	r2, #5
 8000cbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e0c5      	b.n	8000e52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0e5      	beq.n	8000ca0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0202 	bic.w	r2, r2, #2
 8000ce2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ce4:	f7ff ff8e 	bl	8000c04 <HAL_GetTick>
 8000ce8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cea:	e012      	b.n	8000d12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cec:	f7ff ff8a 	bl	8000c04 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b0a      	cmp	r3, #10
 8000cf8:	d90b      	bls.n	8000d12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2205      	movs	r2, #5
 8000d0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e09f      	b.n	8000e52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e5      	bne.n	8000cec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7e1b      	ldrb	r3, [r3, #24]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d108      	bne.n	8000d3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	e007      	b.n	8000d4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7e5b      	ldrb	r3, [r3, #25]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d108      	bne.n	8000d64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e007      	b.n	8000d74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7e9b      	ldrb	r3, [r3, #26]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d108      	bne.n	8000d8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0220 	orr.w	r2, r2, #32
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	e007      	b.n	8000d9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0220 	bic.w	r2, r2, #32
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7edb      	ldrb	r3, [r3, #27]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d108      	bne.n	8000db8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0210 	bic.w	r2, r2, #16
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0210 	orr.w	r2, r2, #16
 8000dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7f1b      	ldrb	r3, [r3, #28]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d108      	bne.n	8000de2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0208 	orr.w	r2, r2, #8
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e007      	b.n	8000df2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0208 	bic.w	r2, r2, #8
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7f5b      	ldrb	r3, [r3, #29]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d108      	bne.n	8000e0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f042 0204 	orr.w	r2, r2, #4
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e007      	b.n	8000e1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0204 	bic.w	r2, r2, #4
 8000e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	ea42 0103 	orr.w	r1, r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	1e5a      	subs	r2, r3, #1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff47 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff5c 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffb0 	bl	8000f7c <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e166      	b.n	8001306 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8158 	beq.w	8001300 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d005      	beq.n	8001068 <HAL_GPIO_Init+0x40>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d130      	bne.n	80010ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109e:	2201      	movs	r2, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	f003 0201 	and.w	r2, r3, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d017      	beq.n	8001106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d123      	bne.n	800115a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	6939      	ldr	r1, [r7, #16]
 8001156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0203 	and.w	r2, r3, #3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 80b2 	beq.w	8001300 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119c:	4b61      	ldr	r3, [pc, #388]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 800119e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a0:	4a60      	ldr	r2, [pc, #384]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6613      	str	r3, [r2, #96]	; 0x60
 80011a8:	4b5e      	ldr	r3, [pc, #376]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 80011aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b4:	4a5c      	ldr	r2, [pc, #368]	; (8001328 <HAL_GPIO_Init+0x300>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011de:	d02b      	beq.n	8001238 <HAL_GPIO_Init+0x210>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a52      	ldr	r2, [pc, #328]	; (800132c <HAL_GPIO_Init+0x304>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d025      	beq.n	8001234 <HAL_GPIO_Init+0x20c>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a51      	ldr	r2, [pc, #324]	; (8001330 <HAL_GPIO_Init+0x308>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d01f      	beq.n	8001230 <HAL_GPIO_Init+0x208>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a50      	ldr	r2, [pc, #320]	; (8001334 <HAL_GPIO_Init+0x30c>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d019      	beq.n	800122c <HAL_GPIO_Init+0x204>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <HAL_GPIO_Init+0x310>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d013      	beq.n	8001228 <HAL_GPIO_Init+0x200>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4e      	ldr	r2, [pc, #312]	; (800133c <HAL_GPIO_Init+0x314>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d00d      	beq.n	8001224 <HAL_GPIO_Init+0x1fc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <HAL_GPIO_Init+0x318>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d007      	beq.n	8001220 <HAL_GPIO_Init+0x1f8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_GPIO_Init+0x31c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d101      	bne.n	800121c <HAL_GPIO_Init+0x1f4>
 8001218:	2307      	movs	r3, #7
 800121a:	e00e      	b.n	800123a <HAL_GPIO_Init+0x212>
 800121c:	2308      	movs	r3, #8
 800121e:	e00c      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001220:	2306      	movs	r3, #6
 8001222:	e00a      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001224:	2305      	movs	r3, #5
 8001226:	e008      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001228:	2304      	movs	r3, #4
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x212>
 800122c:	2303      	movs	r3, #3
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001230:	2302      	movs	r3, #2
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001238:	2300      	movs	r3, #0
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124a:	4937      	ldr	r1, [pc, #220]	; (8001328 <HAL_GPIO_Init+0x300>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_GPIO_Init+0x320>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800127c:	4a32      	ldr	r2, [pc, #200]	; (8001348 <HAL_GPIO_Init+0x320>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_GPIO_Init+0x320>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012a6:	4a28      	ldr	r2, [pc, #160]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f ae91 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000
 800132c:	48000400 	.word	0x48000400
 8001330:	48000800 	.word	0x48000800
 8001334:	48000c00 	.word	0x48000c00
 8001338:	48001000 	.word	0x48001000
 800133c:	48001400 	.word	0x48001400
 8001340:	48001800 	.word	0x48001800
 8001344:	48001c00 	.word	0x48001c00
 8001348:	40010400 	.word	0x40010400

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001368:	e002      	b.n	8001370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e081      	b.n	8001492 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fa5a 	bl	800085c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2224      	movs	r2, #36	; 0x24
 80013ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	e006      	b.n	8001404 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001402:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d104      	bne.n	8001416 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001414:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001428:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001438:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691a      	ldr	r2, [r3, #16]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69d9      	ldr	r1, [r3, #28]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1a      	ldr	r2, [r3, #32]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2220      	movs	r2, #32
 800147e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	817b      	strh	r3, [r7, #10]
 80014ac:	4613      	mov	r3, r2
 80014ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	f040 80da 	bne.w	8001672 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_I2C_Master_Transmit+0x30>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e0d3      	b.n	8001674 <HAL_I2C_Master_Transmit+0x1d8>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014d4:	f7ff fb96 	bl	8000c04 <HAL_GetTick>
 80014d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2319      	movs	r3, #25
 80014e0:	2201      	movs	r2, #1
 80014e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 fa5e 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0be      	b.n	8001674 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2221      	movs	r2, #33	; 0x21
 80014fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2210      	movs	r2, #16
 8001502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	893a      	ldrh	r2, [r7, #8]
 8001516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001522:	b29b      	uxth	r3, r3
 8001524:	2bff      	cmp	r3, #255	; 0xff
 8001526:	d90e      	bls.n	8001546 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	22ff      	movs	r2, #255	; 0xff
 800152c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001532:	b2da      	uxtb	r2, r3
 8001534:	8979      	ldrh	r1, [r7, #10]
 8001536:	4b51      	ldr	r3, [pc, #324]	; (800167c <HAL_I2C_Master_Transmit+0x1e0>)
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fbda 	bl	8001cf8 <I2C_TransferConfig>
 8001544:	e06c      	b.n	8001620 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154a:	b29a      	uxth	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001554:	b2da      	uxtb	r2, r3
 8001556:	8979      	ldrh	r1, [r7, #10]
 8001558:	4b48      	ldr	r3, [pc, #288]	; (800167c <HAL_I2C_Master_Transmit+0x1e0>)
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 fbc9 	bl	8001cf8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001566:	e05b      	b.n	8001620 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	6a39      	ldr	r1, [r7, #32]
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 fa5b 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e07b      	b.n	8001674 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001596:	b29b      	uxth	r3, r3
 8001598:	3b01      	subs	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d034      	beq.n	8001620 <HAL_I2C_Master_Transmit+0x184>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d130      	bne.n	8001620 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	2200      	movs	r2, #0
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 f9ed 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e04d      	b.n	8001674 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015dc:	b29b      	uxth	r3, r3
 80015de:	2bff      	cmp	r3, #255	; 0xff
 80015e0:	d90e      	bls.n	8001600 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	22ff      	movs	r2, #255	; 0xff
 80015e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	8979      	ldrh	r1, [r7, #10]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f000 fb7d 	bl	8001cf8 <I2C_TransferConfig>
 80015fe:	e00f      	b.n	8001620 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001604:	b29a      	uxth	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160e:	b2da      	uxtb	r2, r3
 8001610:	8979      	ldrh	r1, [r7, #10]
 8001612:	2300      	movs	r3, #0
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 fb6c 	bl	8001cf8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001624:	b29b      	uxth	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d19e      	bne.n	8001568 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	6a39      	ldr	r1, [r7, #32]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 fa3a 	bl	8001aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e01a      	b.n	8001674 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2220      	movs	r2, #32
 8001644:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_I2C_Master_Transmit+0x1e4>)
 8001652:	400b      	ands	r3, r1
 8001654:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2220      	movs	r2, #32
 800165a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001672:	2302      	movs	r3, #2
  }
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	80002000 	.word	0x80002000
 8001680:	fe00e800 	.word	0xfe00e800

08001684 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af02      	add	r7, sp, #8
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4603      	mov	r3, r0
 8001694:	817b      	strh	r3, [r7, #10]
 8001696:	460b      	mov	r3, r1
 8001698:	813b      	strh	r3, [r7, #8]
 800169a:	4613      	mov	r3, r2
 800169c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b20      	cmp	r3, #32
 80016a8:	f040 80fd 	bne.w	80018a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <HAL_I2C_Mem_Read+0x34>
 80016b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0f1      	b.n	80018a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_I2C_Mem_Read+0x4e>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e0ea      	b.n	80018a8 <HAL_I2C_Mem_Read+0x224>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016da:	f7ff fa93 	bl	8000c04 <HAL_GetTick>
 80016de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2319      	movs	r3, #25
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f95b 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0d5      	b.n	80018a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2222      	movs	r2, #34	; 0x22
 8001700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a3a      	ldr	r2, [r7, #32]
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800171c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001724:	88f8      	ldrh	r0, [r7, #6]
 8001726:	893a      	ldrh	r2, [r7, #8]
 8001728:	8979      	ldrh	r1, [r7, #10]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	4603      	mov	r3, r0
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 f8bf 	bl	80018b8 <I2C_RequestMemoryRead>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0ad      	b.n	80018a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001750:	b29b      	uxth	r3, r3
 8001752:	2bff      	cmp	r3, #255	; 0xff
 8001754:	d90e      	bls.n	8001774 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	22ff      	movs	r2, #255	; 0xff
 800175a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	b2da      	uxtb	r2, r3
 8001762:	8979      	ldrh	r1, [r7, #10]
 8001764:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <HAL_I2C_Mem_Read+0x22c>)
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 fac3 	bl	8001cf8 <I2C_TransferConfig>
 8001772:	e00f      	b.n	8001794 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001782:	b2da      	uxtb	r2, r3
 8001784:	8979      	ldrh	r1, [r7, #10]
 8001786:	4b4a      	ldr	r3, [pc, #296]	; (80018b0 <HAL_I2C_Mem_Read+0x22c>)
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 fab2 	bl	8001cf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179a:	2200      	movs	r2, #0
 800179c:	2104      	movs	r1, #4
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f902 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e07c      	b.n	80018a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d034      	beq.n	8001854 <HAL_I2C_Mem_Read+0x1d0>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d130      	bne.n	8001854 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	2200      	movs	r2, #0
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 f8d3 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e04d      	b.n	80018a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	2bff      	cmp	r3, #255	; 0xff
 8001814:	d90e      	bls.n	8001834 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	22ff      	movs	r2, #255	; 0xff
 800181a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001820:	b2da      	uxtb	r2, r3
 8001822:	8979      	ldrh	r1, [r7, #10]
 8001824:	2300      	movs	r3, #0
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 fa63 	bl	8001cf8 <I2C_TransferConfig>
 8001832:	e00f      	b.n	8001854 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	b2da      	uxtb	r2, r3
 8001844:	8979      	ldrh	r1, [r7, #10]
 8001846:	2300      	movs	r3, #0
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fa52 	bl	8001cf8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29b      	uxth	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d19a      	bne.n	8001794 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f920 	bl	8001aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e01a      	b.n	80018a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2220      	movs	r2, #32
 8001878:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_I2C_Mem_Read+0x230>)
 8001886:	400b      	ands	r3, r1
 8001888:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80018a6:	2302      	movs	r3, #2
  }
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	80002400 	.word	0x80002400
 80018b4:	fe00e800 	.word	0xfe00e800

080018b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af02      	add	r7, sp, #8
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	817b      	strh	r3, [r7, #10]
 80018ca:	460b      	mov	r3, r1
 80018cc:	813b      	strh	r3, [r7, #8]
 80018ce:	4613      	mov	r3, r2
 80018d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	8979      	ldrh	r1, [r7, #10]
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <I2C_RequestMemoryRead+0xa4>)
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 fa0a 	bl	8001cf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f89d 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e02c      	b.n	8001952 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d105      	bne.n	800190a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018fe:	893b      	ldrh	r3, [r7, #8]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
 8001908:	e015      	b.n	8001936 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800190a:	893b      	ldrh	r3, [r7, #8]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	b29b      	uxth	r3, r3
 8001910:	b2da      	uxtb	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	69b9      	ldr	r1, [r7, #24]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 f883 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e012      	b.n	8001952 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800192c:	893b      	ldrh	r3, [r7, #8]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2200      	movs	r2, #0
 800193e:	2140      	movs	r1, #64	; 0x40
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f831 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	80002000 	.word	0x80002000

08001960 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b02      	cmp	r3, #2
 8001974:	d103      	bne.n	800197e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b01      	cmp	r3, #1
 800198a:	d007      	beq.n	800199c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699a      	ldr	r2, [r3, #24]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	619a      	str	r2, [r3, #24]
  }
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019b8:	e022      	b.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c0:	d01e      	beq.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c2:	f7ff f91f 	bl	8000c04 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d302      	bcc.n	80019d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d113      	bne.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	f043 0220 	orr.w	r2, r3, #32
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e00f      	b.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699a      	ldr	r2, [r3, #24]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	bf0c      	ite	eq
 8001a10:	2301      	moveq	r3, #1
 8001a12:	2300      	movne	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d0cd      	beq.n	80019ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a34:	e02c      	b.n	8001a90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f870 	bl	8001b20 <I2C_IsErrorOccurred>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e02a      	b.n	8001aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a50:	d01e      	beq.n	8001a90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a52:	f7ff f8d7 	bl	8000c04 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d302      	bcc.n	8001a68 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d113      	bne.n	8001a90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f043 0220 	orr.w	r2, r3, #32
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e007      	b.n	8001aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d1cb      	bne.n	8001a36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ab4:	e028      	b.n	8001b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f830 	bl	8001b20 <I2C_IsErrorOccurred>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e026      	b.n	8001b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aca:	f7ff f89b 	bl	8000c04 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d302      	bcc.n	8001ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d113      	bne.n	8001b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e007      	b.n	8001b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d1cf      	bne.n	8001ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d075      	beq.n	8001c38 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2210      	movs	r2, #16
 8001b52:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b54:	e056      	b.n	8001c04 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b5c:	d052      	beq.n	8001c04 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b5e:	f7ff f851 	bl	8000c04 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d302      	bcc.n	8001b74 <I2C_IsErrorOccurred+0x54>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d147      	bne.n	8001c04 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b86:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b96:	d12e      	bne.n	8001bf6 <I2C_IsErrorOccurred+0xd6>
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b9e:	d02a      	beq.n	8001bf6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001ba0:	7cfb      	ldrb	r3, [r7, #19]
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d027      	beq.n	8001bf6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bb4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001bb6:	f7ff f825 	bl	8000c04 <HAL_GetTick>
 8001bba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bbc:	e01b      	b.n	8001bf6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bbe:	f7ff f821 	bl	8000c04 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b19      	cmp	r3, #25
 8001bca:	d914      	bls.n	8001bf6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f043 0220 	orr.w	r2, r3, #32
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d1dc      	bne.n	8001bbe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d003      	beq.n	8001c1a <I2C_IsErrorOccurred+0xfa>
 8001c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d09d      	beq.n	8001b56 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d103      	bne.n	8001c2a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2220      	movs	r2, #32
 8001c28:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00b      	beq.n	8001c84 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00b      	beq.n	8001ca6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01c      	beq.n	8001ce8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff fe56 	bl	8001960 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6859      	ldr	r1, [r3, #4]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <I2C_IsErrorOccurred+0x1d4>)
 8001cc0:	400b      	ands	r3, r1
 8001cc2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	fe00e800 	.word	0xfe00e800

08001cf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	817b      	strh	r3, [r7, #10]
 8001d06:	4613      	mov	r3, r2
 8001d08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d0a:	897b      	ldrh	r3, [r7, #10]
 8001d0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d10:	7a7b      	ldrb	r3, [r7, #9]
 8001d12:	041b      	lsls	r3, r3, #16
 8001d14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	0d5b      	lsrs	r3, r3, #21
 8001d32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <I2C_TransferConfig+0x60>)
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	ea02 0103 	and.w	r1, r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d4a:	bf00      	nop
 8001d4c:	371c      	adds	r7, #28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	03ff63ff 	.word	0x03ff63ff

08001d5c <Custom_HAL_I2C_Mem_Read>:
HAL_StatusTypeDef Custom_HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,

										  uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead,

										  uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af04      	add	r7, sp, #16
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	4608      	mov	r0, r1
 8001d66:	4611      	mov	r1, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	807b      	strh	r3, [r7, #2]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	707b      	strb	r3, [r7, #1]
 8001d72:	4613      	mov	r3, r2
 8001d74:	703b      	strb	r3, [r7, #0]
  uint32_t tickstart;

  /* Check the parameters */
  //assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b20      	cmp	r3, #32
 8001d80:	f040 8101 	bne.w	8001f86 <Custom_HAL_I2C_Mem_Read+0x22a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <Custom_HAL_I2C_Mem_Read+0x34>
 8001d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <Custom_HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0f5      	b.n	8001f88 <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <Custom_HAL_I2C_Mem_Read+0x4e>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e0ee      	b.n	8001f88 <Custom_HAL_I2C_Mem_Read+0x22c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001db2:	f7fe ff27 	bl	8000c04 <HAL_GetTick>
 8001db6:	60f8      	str	r0, [r7, #12]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2319      	movs	r3, #25
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fdef 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <Custom_HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0d9      	b.n	8001f88 <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2222      	movs	r2, #34	; 0x22
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2240      	movs	r2, #64	; 0x40
 8001de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a3a      	ldr	r2, [r7, #32]
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001df4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(Custom_I2C_RequestMemoryRead(hi2c, DevAddress,
 8001dfc:	7838      	ldrb	r0, [r7, #0]
 8001dfe:	787a      	ldrb	r2, [r7, #1]
 8001e00:	8879      	ldrh	r1, [r7, #2]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	9303      	str	r3, [sp, #12]
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	9302      	str	r3, [sp, #8]
 8001e0a:	7f3b      	ldrb	r3, [r7, #28]
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	7e3b      	ldrb	r3, [r7, #24]
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	4603      	mov	r3, r0
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8bf 	bl	8001f98 <Custom_I2C_RequestMemoryRead>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <Custom_HAL_I2C_Mem_Read+0xd0>
    								command, startAddress,
									addressStep, nMemAddressRead,
									Timeout, tickstart) != HAL_OK)
    {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0ad      	b.n	8001f88 <Custom_HAL_I2C_Mem_Read+0x22c>
    }


    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2bff      	cmp	r3, #255	; 0xff
 8001e34:	d90e      	bls.n	8001e54 <Custom_HAL_I2C_Mem_Read+0xf8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	22ff      	movs	r2, #255	; 0xff
 8001e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	8879      	ldrh	r1, [r7, #2]
 8001e44:	4b52      	ldr	r3, [pc, #328]	; (8001f90 <Custom_HAL_I2C_Mem_Read+0x234>)
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff53 	bl	8001cf8 <I2C_TransferConfig>
 8001e52:	e00f      	b.n	8001e74 <Custom_HAL_I2C_Mem_Read+0x118>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	8879      	ldrh	r1, [r7, #2]
 8001e66:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <Custom_HAL_I2C_Mem_Read+0x234>)
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ff42 	bl	8001cf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fd92 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <Custom_HAL_I2C_Mem_Read+0x132>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e07c      	b.n	8001f88 <Custom_HAL_I2C_Mem_Read+0x22c>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d034      	beq.n	8001f34 <Custom_HAL_I2C_Mem_Read+0x1d8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d130      	bne.n	8001f34 <Custom_HAL_I2C_Mem_Read+0x1d8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff fd63 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <Custom_HAL_I2C_Mem_Read+0x190>
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e04d      	b.n	8001f88 <Custom_HAL_I2C_Mem_Read+0x22c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d90e      	bls.n	8001f14 <Custom_HAL_I2C_Mem_Read+0x1b8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	22ff      	movs	r2, #255	; 0xff
 8001efa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	8879      	ldrh	r1, [r7, #2]
 8001f04:	2300      	movs	r3, #0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fef3 	bl	8001cf8 <I2C_TransferConfig>
 8001f12:	e00f      	b.n	8001f34 <Custom_HAL_I2C_Mem_Read+0x1d8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	8879      	ldrh	r1, [r7, #2]
 8001f26:	2300      	movs	r3, #0
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fee2 	bl	8001cf8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d19a      	bne.n	8001e74 <Custom_HAL_I2C_Mem_Read+0x118>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fdb0 	bl	8001aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <Custom_HAL_I2C_Mem_Read+0x1f6>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e01a      	b.n	8001f88 <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2220      	movs	r2, #32
 8001f58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <Custom_HAL_I2C_Mem_Read+0x238>)
 8001f66:	400b      	ands	r3, r1
 8001f68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <Custom_HAL_I2C_Mem_Read+0x22c>
  }
  else
  {
    return HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
  }
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	80002400 	.word	0x80002400
 8001f94:	fe00e800 	.word	0xfe00e800

08001f98 <Custom_I2C_RequestMemoryRead>:

static HAL_StatusTypeDef Custom_I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead,
											   uint32_t Timeout, uint32_t Tickstart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	807b      	strh	r3, [r7, #2]
 8001faa:	460b      	mov	r3, r1
 8001fac:	707b      	strb	r3, [r7, #1]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	703b      	strb	r3, [r7, #0]

									//The_num_of_bytes
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)4, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001fb2:	8879      	ldrh	r1, [r7, #2]
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <Custom_I2C_RequestMemoryRead+0xc0>)
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2204      	movs	r2, #4
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fe9b 	bl	8001cf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	69b9      	ldr	r1, [r7, #24]
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fd2e 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <Custom_I2C_RequestMemoryRead+0x3e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e03b      	b.n	800204e <Custom_I2C_RequestMemoryRead+0xb6>
  }

// "mem_write"
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(command);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	787a      	ldrb	r2, [r7, #1]
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	69b9      	ldr	r1, [r7, #24]
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fd20 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <Custom_I2C_RequestMemoryRead+0x5a>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e02d      	b.n	800204e <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(startAddress);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	783a      	ldrb	r2, [r7, #0]
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	69b9      	ldr	r1, [r7, #24]
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fd12 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <Custom_I2C_RequestMemoryRead+0x76>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e01f      	b.n	800204e <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(addressStep);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	7c3a      	ldrb	r2, [r7, #16]
 8002014:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	69b9      	ldr	r1, [r7, #24]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fd04 	bl	8001a28 <I2C_WaitOnTXISFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <Custom_I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e011      	b.n	800204e <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(nMemAddressRead);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	7d3a      	ldrb	r2, [r7, #20]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
//

  /* Wait until [Transfer Complete] flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2200      	movs	r2, #0
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fcb3 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <Custom_I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <Custom_I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	80002000 	.word	0x80002000

0800205c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b20      	cmp	r3, #32
 8002070:	d138      	bne.n	80020e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800207c:	2302      	movs	r3, #2
 800207e:	e032      	b.n	80020e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2224      	movs	r2, #36	; 0x24
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6819      	ldr	r1, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e000      	b.n	80020e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b20      	cmp	r3, #32
 8002106:	d139      	bne.n	800217c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002112:	2302      	movs	r3, #2
 8002114:	e033      	b.n	800217e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2224      	movs	r2, #36	; 0x24
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002144:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
  }
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219c:	d102      	bne.n	80021a4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800219e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a2:	e00b      	b.n	80021bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80021a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b2:	d102      	bne.n	80021ba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80021b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b8:	e000      	b.n	80021bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80021ba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40007000 	.word	0x40007000

080021cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d141      	bne.n	800225e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021da:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e6:	d131      	bne.n	800224c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021e8:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ee:	4a46      	ldr	r2, [pc, #280]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002200:	4a41      	ldr	r2, [pc, #260]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002206:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002208:	4b40      	ldr	r3, [pc, #256]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2232      	movs	r2, #50	; 0x32
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	4a3f      	ldr	r2, [pc, #252]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	0c9b      	lsrs	r3, r3, #18
 800221a:	3301      	adds	r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800221e:	e002      	b.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3b01      	subs	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002226:	4b38      	ldr	r3, [pc, #224]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002232:	d102      	bne.n	800223a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f2      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002246:	d158      	bne.n	80022fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e057      	b.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800224c:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002252:	4a2d      	ldr	r2, [pc, #180]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002258:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800225c:	e04d      	b.n	80022fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002264:	d141      	bne.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002266:	4b28      	ldr	r3, [pc, #160]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800226e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002272:	d131      	bne.n	80022d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800227a:	4a23      	ldr	r2, [pc, #140]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002284:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800228c:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002292:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2232      	movs	r2, #50	; 0x32
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	0c9b      	lsrs	r3, r3, #18
 80022a6:	3301      	adds	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022aa:	e002      	b.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022be:	d102      	bne.n	80022c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f2      	bne.n	80022ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d2:	d112      	bne.n	80022fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e011      	b.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022e8:	e007      	b.n	80022fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40007000 	.word	0x40007000
 800230c:	20000000 	.word	0x20000000
 8002310:	431bde83 	.word	0x431bde83

08002314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	f000 bc68 	b.w	8002bf8 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002328:	4b97      	ldr	r3, [pc, #604]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002332:	4b95      	ldr	r3, [pc, #596]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80e6 	beq.w	8002516 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_RCC_OscConfig+0x4c>
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	f040 808d 	bne.w	8002472 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	2b01      	cmp	r3, #1
 800235c:	f040 8089 	bne.w	8002472 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002360:	4b89      	ldr	r3, [pc, #548]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <HAL_RCC_OscConfig+0x66>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	f000 bc3f 	b.w	8002bf8 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237e:	4b82      	ldr	r3, [pc, #520]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <HAL_RCC_OscConfig+0x80>
 800238a:	4b7f      	ldr	r3, [pc, #508]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002392:	e005      	b.n	80023a0 <HAL_RCC_OscConfig+0x8c>
 8002394:	4b7c      	ldr	r3, [pc, #496]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d224      	bcs.n	80023ee <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fdf3 	bl	8002f94 <RCC_SetFlashLatencyFromMSIRange>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f000 bc1f 	b.w	8002bf8 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ba:	4b73      	ldr	r3, [pc, #460]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a72      	ldr	r2, [pc, #456]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80023c0:	f043 0308 	orr.w	r3, r3, #8
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b70      	ldr	r3, [pc, #448]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	496d      	ldr	r1, [pc, #436]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d8:	4b6b      	ldr	r3, [pc, #428]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	4968      	ldr	r1, [pc, #416]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
 80023ec:	e025      	b.n	800243a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ee:	4b66      	ldr	r3, [pc, #408]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a65      	ldr	r2, [pc, #404]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b63      	ldr	r3, [pc, #396]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	4960      	ldr	r1, [pc, #384]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800240c:	4b5e      	ldr	r3, [pc, #376]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	495b      	ldr	r1, [pc, #364]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fdb2 	bl	8002f94 <RCC_SetFlashLatencyFromMSIRange>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e3de      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800243a:	f000 fd21 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 800243e:	4602      	mov	r2, r0
 8002440:	4b51      	ldr	r3, [pc, #324]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	4950      	ldr	r1, [pc, #320]	; (800258c <HAL_RCC_OscConfig+0x278>)
 800244c:	5ccb      	ldrb	r3, [r1, r3]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	fa22 f303 	lsr.w	r3, r2, r3
 8002456:	4a4e      	ldr	r2, [pc, #312]	; (8002590 <HAL_RCC_OscConfig+0x27c>)
 8002458:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800245a:	4b4e      	ldr	r3, [pc, #312]	; (8002594 <HAL_RCC_OscConfig+0x280>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fb80 	bl	8000b64 <HAL_InitTick>
 8002464:	4603      	mov	r3, r0
 8002466:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d052      	beq.n	8002514 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	e3c2      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d032      	beq.n	80024e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800247a:	4b43      	ldr	r3, [pc, #268]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a42      	ldr	r2, [pc, #264]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002486:	f7fe fbbd 	bl	8000c04 <HAL_GetTick>
 800248a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800248e:	f7fe fbb9 	bl	8000c04 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e3ab      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a0:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ac:	4b36      	ldr	r3, [pc, #216]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a35      	ldr	r2, [pc, #212]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80024b2:	f043 0308 	orr.w	r3, r3, #8
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b33      	ldr	r3, [pc, #204]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	4930      	ldr	r1, [pc, #192]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ca:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	492b      	ldr	r1, [pc, #172]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
 80024de:	e01a      	b.n	8002516 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024e0:	4b29      	ldr	r3, [pc, #164]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a28      	ldr	r2, [pc, #160]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fb8a 	bl	8000c04 <HAL_GetTick>
 80024f0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024f4:	f7fe fb86 	bl	8000c04 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e378      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1e0>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d073      	beq.n	800260a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x220>
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d10e      	bne.n	800254c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d10b      	bne.n	800254c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d063      	beq.n	8002608 <HAL_RCC_OscConfig+0x2f4>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d15f      	bne.n	8002608 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e355      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002554:	d106      	bne.n	8002564 <HAL_RCC_OscConfig+0x250>
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e025      	b.n	80025b0 <HAL_RCC_OscConfig+0x29c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800256c:	d114      	bne.n	8002598 <HAL_RCC_OscConfig+0x284>
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b03      	ldr	r3, [pc, #12]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a02      	ldr	r2, [pc, #8]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e013      	b.n	80025b0 <HAL_RCC_OscConfig+0x29c>
 8002588:	40021000 	.word	0x40021000
 800258c:	08003c30 	.word	0x08003c30
 8002590:	20000000 	.word	0x20000000
 8002594:	20000004 	.word	0x20000004
 8002598:	4b8f      	ldr	r3, [pc, #572]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a8e      	ldr	r2, [pc, #568]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b8c      	ldr	r3, [pc, #560]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a8b      	ldr	r2, [pc, #556]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fb24 	bl	8000c04 <HAL_GetTick>
 80025bc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7fe fb20 	bl	8000c04 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e312      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d2:	4b81      	ldr	r3, [pc, #516]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x2ac>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fb10 	bl	8000c04 <HAL_GetTick>
 80025e4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe fb0c 	bl	8000c04 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e2fe      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025fa:	4b77      	ldr	r3, [pc, #476]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x2d4>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d060      	beq.n	80026d8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	2b04      	cmp	r3, #4
 800261a:	d005      	beq.n	8002628 <HAL_RCC_OscConfig+0x314>
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d119      	bne.n	8002656 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d116      	bne.n	8002656 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002628:	4b6b      	ldr	r3, [pc, #428]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_OscConfig+0x32c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e2db      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b65      	ldr	r3, [pc, #404]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	061b      	lsls	r3, r3, #24
 800264e:	4962      	ldr	r1, [pc, #392]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002654:	e040      	b.n	80026d8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d023      	beq.n	80026a6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265e:	4b5e      	ldr	r3, [pc, #376]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a5d      	ldr	r2, [pc, #372]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe facb 	bl	8000c04 <HAL_GetTick>
 800266e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002672:	f7fe fac7 	bl	8000c04 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e2b9      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002684:	4b54      	ldr	r3, [pc, #336]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b51      	ldr	r3, [pc, #324]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	494e      	ldr	r1, [pc, #312]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
 80026a4:	e018      	b.n	80026d8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a4b      	ldr	r2, [pc, #300]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7fe faa7 	bl	8000c04 <HAL_GetTick>
 80026b6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ba:	f7fe faa3 	bl	8000c04 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e295      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026cc:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8082 	beq.w	80027ea <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d05f      	beq.n	80027ae <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80026ee:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	429a      	cmp	r2, r3
 8002702:	d037      	beq.n	8002774 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e26d      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01b      	beq.n	800275e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002726:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272c:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002736:	f7fe fa65 	bl	8000c04 <HAL_GetTick>
 800273a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273e:	f7fe fa61 	bl	8000c04 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b11      	cmp	r3, #17
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e253      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002750:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1ef      	bne.n	800273e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800275e:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002764:	f023 0210 	bic.w	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	491a      	ldr	r1, [pc, #104]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002774:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277a:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fe fa3e 	bl	8000c04 <HAL_GetTick>
 8002788:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe fa3a 	bl	8000c04 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b11      	cmp	r3, #17
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e22c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ef      	beq.n	800278c <HAL_RCC_OscConfig+0x478>
 80027ac:	e01d      	b.n	80027ea <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b4:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fe fa21 	bl	8000c04 <HAL_GetTick>
 80027c2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c6:	f7fe fa1d 	bl	8000c04 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b11      	cmp	r3, #17
 80027d2:	d903      	bls.n	80027dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e20f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
 80027d8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027dc:	4b83      	ldr	r3, [pc, #524]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80027de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1ed      	bne.n	80027c6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80bd 	beq.w	8002972 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027fe:	4b7b      	ldr	r3, [pc, #492]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10e      	bne.n	8002828 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	4b78      	ldr	r3, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	4a77      	ldr	r2, [pc, #476]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6593      	str	r3, [r2, #88]	; 0x58
 8002816:	4b75      	ldr	r3, [pc, #468]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002828:	4b71      	ldr	r3, [pc, #452]	; (80029f0 <HAL_RCC_OscConfig+0x6dc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d118      	bne.n	8002866 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002834:	4b6e      	ldr	r3, [pc, #440]	; (80029f0 <HAL_RCC_OscConfig+0x6dc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a6d      	ldr	r2, [pc, #436]	; (80029f0 <HAL_RCC_OscConfig+0x6dc>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002840:	f7fe f9e0 	bl	8000c04 <HAL_GetTick>
 8002844:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7fe f9dc 	bl	8000c04 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1ce      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285a:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <HAL_RCC_OscConfig+0x6dc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d02c      	beq.n	80028cc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002872:	4b5e      	ldr	r3, [pc, #376]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002878:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002884:	4959      	ldr	r1, [pc, #356]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d010      	beq.n	80028ba <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002898:	4b54      	ldr	r3, [pc, #336]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	4a53      	ldr	r2, [pc, #332]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028a8:	4b50      	ldr	r3, [pc, #320]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	4a4f      	ldr	r2, [pc, #316]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b8:	e018      	b.n	80028ec <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028ba:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	4a4a      	ldr	r2, [pc, #296]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ca:	e00f      	b.n	80028ec <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028cc:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	4a46      	ldr	r2, [pc, #280]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e2:	4a42      	ldr	r2, [pc, #264]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d016      	beq.n	8002922 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe f986 	bl	8000c04 <HAL_GetTick>
 80028f8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe f982 	bl	8000c04 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e172      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ed      	beq.n	80028fc <HAL_RCC_OscConfig+0x5e8>
 8002920:	e01d      	b.n	800295e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fe f96f 	bl	8000c04 <HAL_GetTick>
 8002926:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe f96b 	bl	8000c04 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e15b      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ed      	bne.n	800292a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800294e:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002954:	4a25      	ldr	r2, [pc, #148]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 8002956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800295a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800295e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	4a20      	ldr	r2, [pc, #128]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 800296c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002970:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b00      	cmp	r3, #0
 800297c:	d041      	beq.n	8002a02 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002986:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 8002988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800298c:	4a17      	ldr	r2, [pc, #92]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7fe f935 	bl	8000c04 <HAL_GetTick>
 800299a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800299e:	f7fe f931 	bl	8000c04 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e123      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80029b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0ef      	beq.n	800299e <HAL_RCC_OscConfig+0x68a>
 80029be:	e020      	b.n	8002a02 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80029c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_OscConfig+0x6d8>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe f918 	bl	8000c04 <HAL_GetTick>
 80029d4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029d6:	e00d      	b.n	80029f4 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029d8:	f7fe f914 	bl	8000c04 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d906      	bls.n	80029f4 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e106      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029f4:	4b82      	ldr	r3, [pc, #520]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 80029f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ea      	bne.n	80029d8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80f5 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	f040 80cb 	bne.w	8002bac <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a16:	4b7a      	ldr	r3, [pc, #488]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0203 	and.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d12c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	3b01      	subs	r3, #1
 8002a36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d123      	bne.n	8002a84 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d11b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d113      	bne.n	8002a84 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d109      	bne.n	8002a84 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d06d      	beq.n	8002b60 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d068      	beq.n	8002b5c <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a96:	4b5a      	ldr	r3, [pc, #360]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0a8      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b56      	ldr	r3, [pc, #344]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a55      	ldr	r2, [pc, #340]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ab2:	f7fe f8a7 	bl	8000c04 <HAL_GetTick>
 8002ab6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fe f8a3 	bl	8000c04 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e095      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002acc:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad8:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCC_OscConfig+0x8f0>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ae8:	3a01      	subs	r2, #1
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	4311      	orrs	r1, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002af2:	0212      	lsls	r2, r2, #8
 8002af4:	4311      	orrs	r1, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002afa:	0852      	lsrs	r2, r2, #1
 8002afc:	3a01      	subs	r2, #1
 8002afe:	0552      	lsls	r2, r2, #21
 8002b00:	4311      	orrs	r1, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b06:	0852      	lsrs	r2, r2, #1
 8002b08:	3a01      	subs	r2, #1
 8002b0a:	0652      	lsls	r2, r2, #25
 8002b0c:	4311      	orrs	r1, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b12:	06d2      	lsls	r2, r2, #27
 8002b14:	430a      	orrs	r2, r1
 8002b16:	493a      	ldr	r1, [pc, #232]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b1c:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a37      	ldr	r2, [pc, #220]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b28:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a34      	ldr	r2, [pc, #208]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b34:	f7fe f866 	bl	8000c04 <HAL_GetTick>
 8002b38:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fe f862 	bl	8000c04 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e054      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4e:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b5a:	e04c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e04b      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d144      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b78:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a20      	ldr	r2, [pc, #128]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b84:	f7fe f83e 	bl	8000c04 <HAL_GetTick>
 8002b88:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe f83a 	bl	8000c04 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e02c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x878>
 8002baa:	e024      	b.n	8002bf6 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	d01f      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fe f821 	bl	8000c04 <HAL_GetTick>
 8002bc2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc6:	f7fe f81d 	bl	8000c04 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e00f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4905      	ldr	r1, [pc, #20]	; (8002c00 <HAL_RCC_OscConfig+0x8ec>)
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <HAL_RCC_OscConfig+0x8f4>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	60cb      	str	r3, [r1, #12]
 8002bf0:	e001      	b.n	8002bf6 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3728      	adds	r7, #40	; 0x28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	019d800c 	.word	0x019d800c
 8002c08:	feeefffc 	.word	0xfeeefffc

08002c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e11d      	b.n	8002e60 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b90      	ldr	r3, [pc, #576]	; (8002e68 <HAL_RCC_ClockConfig+0x25c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d910      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b8d      	ldr	r3, [pc, #564]	; (8002e68 <HAL_RCC_ClockConfig+0x25c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 020f 	bic.w	r2, r3, #15
 8002c3a:	498b      	ldr	r1, [pc, #556]	; (8002e68 <HAL_RCC_ClockConfig+0x25c>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b89      	ldr	r3, [pc, #548]	; (8002e68 <HAL_RCC_ClockConfig+0x25c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e105      	b.n	8002e60 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d010      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	4b81      	ldr	r3, [pc, #516]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d908      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c70:	4b7e      	ldr	r3, [pc, #504]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	497b      	ldr	r1, [pc, #492]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d079      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d11e      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c96:	4b75      	ldr	r3, [pc, #468]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0dc      	b.n	8002e60 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002ca6:	f000 f9cf 	bl	8003048 <RCC_GetSysClockFreqFromPLLSource>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4a70      	ldr	r2, [pc, #448]	; (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d946      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cb2:	4b6e      	ldr	r3, [pc, #440]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d140      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cbe:	4b6b      	ldr	r3, [pc, #428]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cc6:	4a69      	ldr	r2, [pc, #420]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ccc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e035      	b.n	8002d40 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cdc:	4b63      	ldr	r3, [pc, #396]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d115      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0b9      	b.n	8002e60 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf4:	4b5d      	ldr	r3, [pc, #372]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0ad      	b.n	8002e60 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0a5      	b.n	8002e60 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d14:	f000 f8b4 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4a55      	ldr	r2, [pc, #340]	; (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d90f      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d20:	4b52      	ldr	r3, [pc, #328]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d34:	4a4d      	ldr	r2, [pc, #308]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d40:	4b4a      	ldr	r3, [pc, #296]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 0203 	bic.w	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4947      	ldr	r1, [pc, #284]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d52:	f7fd ff57 	bl	8000c04 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5a:	f7fd ff53 	bl	8000c04 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e077      	b.n	8002e60 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d70:	4b3e      	ldr	r3, [pc, #248]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 020c 	and.w	r2, r3, #12
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d1eb      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b80      	cmp	r3, #128	; 0x80
 8002d86:	d105      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d88:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a37      	ldr	r2, [pc, #220]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d92:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d010      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d208      	bcs.n	8002dc2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	492b      	ldr	r1, [pc, #172]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc2:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCC_ClockConfig+0x25c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d210      	bcs.n	8002df2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_RCC_ClockConfig+0x25c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 020f 	bic.w	r2, r3, #15
 8002dd8:	4923      	ldr	r1, [pc, #140]	; (8002e68 <HAL_RCC_ClockConfig+0x25c>)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de0:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <HAL_RCC_ClockConfig+0x25c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e036      	b.n	8002e60 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4918      	ldr	r1, [pc, #96]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4910      	ldr	r1, [pc, #64]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e30:	f000 f826 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	490c      	ldr	r1, [pc, #48]	; (8002e74 <HAL_RCC_ClockConfig+0x268>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4c:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <HAL_RCC_ClockConfig+0x26c>)
 8002e4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_RCC_ClockConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fe85 	bl	8000b64 <HAL_InitTick>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40022000 	.word	0x40022000
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	04c4b400 	.word	0x04c4b400
 8002e74:	08003c30 	.word	0x08003c30
 8002e78:	20000000 	.word	0x20000000
 8002e7c:	20000004 	.word	0x20000004

08002e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e98:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d121      	bne.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d11e      	bne.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eb4:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ec0:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	e005      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002edc:	4a2b      	ldr	r2, [pc, #172]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10d      	bne.n	8002f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d102      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	e004      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f04:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d134      	bne.n	8002f78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d003      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0xac>
 8002f24:	e005      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f26:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f28:	617b      	str	r3, [r7, #20]
      break;
 8002f2a:	e005      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f2c:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f2e:	617b      	str	r3, [r7, #20]
      break;
 8002f30:	e002      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	617b      	str	r3, [r7, #20]
      break;
 8002f36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3301      	adds	r3, #1
 8002f44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	fb03 f202 	mul.w	r2, r3, r2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	0e5b      	lsrs	r3, r3, #25
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f78:	69bb      	ldr	r3, [r7, #24]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	; 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	08003c40 	.word	0x08003c40
 8002f90:	00f42400 	.word	0x00f42400

08002f94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fac:	f7ff f8ee 	bl	800218c <HAL_PWREx_GetVoltageRange>
 8002fb0:	6178      	str	r0, [r7, #20]
 8002fb2:	e014      	b.n	8002fde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fb4:	4b22      	ldr	r3, [pc, #136]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	4a21      	ldr	r2, [pc, #132]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fcc:	f7ff f8de 	bl	800218c <HAL_PWREx_GetVoltageRange>
 8002fd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe4:	d10b      	bne.n	8002ffe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b80      	cmp	r3, #128	; 0x80
 8002fea:	d913      	bls.n	8003014 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2ba0      	cmp	r3, #160	; 0xa0
 8002ff0:	d902      	bls.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	e00d      	b.n	8003014 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	e00a      	b.n	8003014 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b7f      	cmp	r3, #127	; 0x7f
 8003002:	d902      	bls.n	800300a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003004:	2302      	movs	r3, #2
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	e004      	b.n	8003014 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b70      	cmp	r3, #112	; 0x70
 800300e:	d101      	bne.n	8003014 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003010:	2301      	movs	r3, #1
 8003012:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 020f 	bic.w	r2, r3, #15
 800301c:	4909      	ldr	r1, [pc, #36]	; (8003044 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003024:	4b07      	ldr	r3, [pc, #28]	; (8003044 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	429a      	cmp	r2, r3
 8003030:	d001      	beq.n	8003036 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	40022000 	.word	0x40022000

08003048 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800304e:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d00b      	beq.n	8003076 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d825      	bhi.n	80030b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d008      	beq.n	800307c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d11f      	bne.n	80030b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003072:	613b      	str	r3, [r7, #16]
    break;
 8003074:	e01f      	b.n	80030b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003078:	613b      	str	r3, [r7, #16]
    break;
 800307a:	e01c      	b.n	80030b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d107      	bne.n	8003098 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800308a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e005      	b.n	80030a4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003098:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80030a4:	4a19      	ldr	r2, [pc, #100]	; (800310c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ac:	613b      	str	r3, [r7, #16]
    break;
 80030ae:	e002      	b.n	80030b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
    break;
 80030b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030b6:	4b13      	ldr	r3, [pc, #76]	; (8003104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	3301      	adds	r3, #1
 80030c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	fb03 f202 	mul.w	r2, r3, r2
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	0e5b      	lsrs	r3, r3, #25
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	3301      	adds	r3, #1
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80030f6:	683b      	ldr	r3, [r7, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40021000 	.word	0x40021000
 8003108:	00f42400 	.word	0x00f42400
 800310c:	08003c40 	.word	0x08003c40

08003110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003118:	2300      	movs	r3, #0
 800311a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800311c:	2300      	movs	r3, #0
 800311e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003128:	2b00      	cmp	r3, #0
 800312a:	d040      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d02a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d825      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003138:	2b60      	cmp	r3, #96	; 0x60
 800313a:	d026      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800313c:	2b60      	cmp	r3, #96	; 0x60
 800313e:	d821      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d006      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d81d      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d009      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800314c:	2b20      	cmp	r3, #32
 800314e:	d010      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003150:	e018      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003152:	4b89      	ldr	r3, [pc, #548]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	4a88      	ldr	r2, [pc, #544]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800315e:	e015      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fb3e 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003170:	e00c      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3320      	adds	r3, #32
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fc29 	bl	80039d0 <RCCEx_PLLSAI2_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003182:	e003      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	74fb      	strb	r3, [r7, #19]
      break;
 8003188:	e000      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800318a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003192:	4b79      	ldr	r3, [pc, #484]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003194:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003198:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a0:	4975      	ldr	r1, [pc, #468]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80031a8:	e001      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d047      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c2:	d030      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80031c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c8:	d82a      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80031ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ce:	d02a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80031d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031d4:	d824      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80031d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031da:	d008      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xde>
 80031dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e0:	d81e      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80031e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ea:	d010      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80031ec:	e018      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031ee:	4b62      	ldr	r3, [pc, #392]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4a61      	ldr	r2, [pc, #388]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031fa:	e015      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3304      	adds	r3, #4
 8003200:	2100      	movs	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f000 faf0 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800320c:	e00c      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3320      	adds	r3, #32
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fbdb 	bl	80039d0 <RCCEx_PLLSAI2_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800321e:	e003      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	74fb      	strb	r3, [r7, #19]
      break;
 8003224:	e000      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003226:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10b      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800322e:	4b52      	ldr	r3, [pc, #328]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003230:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	494e      	ldr	r1, [pc, #312]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003244:	e001      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 809f 	beq.w	8003396 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800325c:	4b46      	ldr	r3, [pc, #280]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800326c:	2300      	movs	r3, #0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b41      	ldr	r3, [pc, #260]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	4a40      	ldr	r2, [pc, #256]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	6593      	str	r3, [r2, #88]	; 0x58
 800327e:	4b3e      	ldr	r3, [pc, #248]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800328a:	2301      	movs	r3, #1
 800328c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328e:	4b3b      	ldr	r3, [pc, #236]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a3a      	ldr	r2, [pc, #232]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800329a:	f7fd fcb3 	bl	8000c04 <HAL_GetTick>
 800329e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a0:	e009      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7fd fcaf 	bl	8000c04 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d902      	bls.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	74fb      	strb	r3, [r7, #19]
        break;
 80032b4:	e005      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032b6:	4b31      	ldr	r3, [pc, #196]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0ef      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80032c2:	7cfb      	ldrb	r3, [r7, #19]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d15b      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032c8:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01f      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d019      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032e6:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032f2:	4b21      	ldr	r3, [pc, #132]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800330a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003312:	4a19      	ldr	r2, [pc, #100]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d016      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fd fc6e 	bl	8000c04 <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332a:	e00b      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fd fc6a 	bl	8000c04 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	; 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d902      	bls.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	74fb      	strb	r3, [r7, #19]
            break;
 8003342:	e006      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0ec      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003352:	7cfb      	ldrb	r3, [r7, #19]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10c      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003358:	4b07      	ldr	r3, [pc, #28]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003368:	4903      	ldr	r1, [pc, #12]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003370:	e008      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	74bb      	strb	r3, [r7, #18]
 8003376:	e005      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003378:	40021000 	.word	0x40021000
 800337c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003384:	7c7b      	ldrb	r3, [r7, #17]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338a:	4ba0      	ldr	r3, [pc, #640]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	4a9f      	ldr	r2, [pc, #636]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003394:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033a2:	4b9a      	ldr	r3, [pc, #616]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f023 0203 	bic.w	r2, r3, #3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	4996      	ldr	r1, [pc, #600]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033c4:	4b91      	ldr	r3, [pc, #580]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f023 020c 	bic.w	r2, r3, #12
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	498e      	ldr	r1, [pc, #568]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033e6:	4b89      	ldr	r3, [pc, #548]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	4985      	ldr	r1, [pc, #532]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003408:	4b80      	ldr	r3, [pc, #512]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003416:	497d      	ldr	r1, [pc, #500]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800342a:	4b78      	ldr	r3, [pc, #480]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003438:	4974      	ldr	r1, [pc, #464]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800344c:	4b6f      	ldr	r3, [pc, #444]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345a:	496c      	ldr	r1, [pc, #432]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800346e:	4b67      	ldr	r3, [pc, #412]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800347c:	4963      	ldr	r1, [pc, #396]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003490:	4b5e      	ldr	r3, [pc, #376]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800349e:	495b      	ldr	r1, [pc, #364]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034b2:	4b56      	ldr	r3, [pc, #344]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	4952      	ldr	r1, [pc, #328]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034d4:	4b4d      	ldr	r3, [pc, #308]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	494a      	ldr	r1, [pc, #296]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034f6:	4b45      	ldr	r3, [pc, #276]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	4941      	ldr	r1, [pc, #260]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003518:	4b3c      	ldr	r3, [pc, #240]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800351e:	f023 0203 	bic.w	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003526:	4939      	ldr	r1, [pc, #228]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d028      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800353a:	4b34      	ldr	r3, [pc, #208]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	4930      	ldr	r1, [pc, #192]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003558:	d106      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800355a:	4b2c      	ldr	r3, [pc, #176]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	4a2b      	ldr	r2, [pc, #172]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003564:	60d3      	str	r3, [r2, #12]
 8003566:	e011      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003570:	d10c      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3304      	adds	r3, #4
 8003576:	2101      	movs	r1, #1
 8003578:	4618      	mov	r0, r3
 800357a:	f000 f935 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003582:	7cfb      	ldrb	r3, [r7, #19]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d04d      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800359c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a0:	d108      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80035a2:	4b1a      	ldr	r3, [pc, #104]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035a8:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80035b2:	e012      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80035b4:	4b15      	ldr	r3, [pc, #84]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ba:	4a14      	ldr	r2, [pc, #80]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035c0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d2:	490e      	ldr	r1, [pc, #56]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e2:	d106      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a08      	ldr	r2, [pc, #32]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ee:	60d3      	str	r3, [r2, #12]
 80035f0:	e020      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035fa:	d109      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a02      	ldr	r2, [pc, #8]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003606:	60d3      	str	r3, [r2, #12]
 8003608:	e014      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003618:	d10c      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3304      	adds	r3, #4
 800361e:	2101      	movs	r1, #1
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f8e1 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d028      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003640:	4b68      	ldr	r3, [pc, #416]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800364e:	4965      	ldr	r1, [pc, #404]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800365e:	d106      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003660:	4b60      	ldr	r3, [pc, #384]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a5f      	ldr	r2, [pc, #380]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366a:	60d3      	str	r3, [r2, #12]
 800366c:	e011      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003672:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003676:	d10c      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	2101      	movs	r1, #1
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f8b2 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800368e:	7cfb      	ldrb	r3, [r7, #19]
 8003690:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01e      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800369e:	4b51      	ldr	r3, [pc, #324]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ae:	494d      	ldr	r1, [pc, #308]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2102      	movs	r1, #2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f88d 	bl	80037e8 <RCCEx_PLLSAI1_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036e8:	4b3e      	ldr	r3, [pc, #248]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ee:	f023 0204 	bic.w	r2, r3, #4
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f8:	493a      	ldr	r1, [pc, #232]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00b      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800370c:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800370e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003712:	f023 0218 	bic.w	r2, r3, #24
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	4931      	ldr	r1, [pc, #196]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d035      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003730:	4b2c      	ldr	r3, [pc, #176]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2b      	ldr	r2, [pc, #172]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fd fa62 	bl	8000c04 <HAL_GetTick>
 8003740:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003742:	e009      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003744:	f7fd fa5e 	bl	8000c04 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d902      	bls.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	74fb      	strb	r3, [r7, #19]
        break;
 8003756:	e005      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003758:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ef      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d113      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800376a:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800376c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800377a:	491a      	ldr	r1, [pc, #104]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3320      	adds	r3, #32
 8003786:	2102      	movs	r1, #2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f921 	bl	80039d0 <RCCEx_PLLSAI2_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d017      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	490a      	ldr	r1, [pc, #40]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ca:	d105      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80037d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000

080037e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037f6:	4b72      	ldr	r3, [pc, #456]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00e      	beq.n	8003820 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003802:	4b6f      	ldr	r3, [pc, #444]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0203 	and.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d103      	bne.n	800381a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
       ||
 8003816:	2b00      	cmp	r3, #0
 8003818:	d142      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	e03f      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d018      	beq.n	800385a <RCCEx_PLLSAI1_Config+0x72>
 8003828:	2b03      	cmp	r3, #3
 800382a:	d825      	bhi.n	8003878 <RCCEx_PLLSAI1_Config+0x90>
 800382c:	2b01      	cmp	r3, #1
 800382e:	d002      	beq.n	8003836 <RCCEx_PLLSAI1_Config+0x4e>
 8003830:	2b02      	cmp	r3, #2
 8003832:	d009      	beq.n	8003848 <RCCEx_PLLSAI1_Config+0x60>
 8003834:	e020      	b.n	8003878 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003836:	4b62      	ldr	r3, [pc, #392]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d11d      	bne.n	800387e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003846:	e01a      	b.n	800387e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003848:	4b5d      	ldr	r3, [pc, #372]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d116      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003858:	e013      	b.n	8003882 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800385a:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10f      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003866:	4b56      	ldr	r3, [pc, #344]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003876:	e006      	b.n	8003886 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
      break;
 800387c:	e004      	b.n	8003888 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800387e:	bf00      	nop
 8003880:	e002      	b.n	8003888 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003882:	bf00      	nop
 8003884:	e000      	b.n	8003888 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003886:	bf00      	nop
    }

    if(status == HAL_OK)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d108      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800388e:	4b4c      	ldr	r3, [pc, #304]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f023 0203 	bic.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4949      	ldr	r1, [pc, #292]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800389c:	4313      	orrs	r3, r2
 800389e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 8086 	bne.w	80039b4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038a8:	4b45      	ldr	r3, [pc, #276]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a44      	ldr	r2, [pc, #272]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b4:	f7fd f9a6 	bl	8000c04 <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ba:	e009      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038bc:	f7fd f9a2 	bl	8000c04 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d902      	bls.n	80038d0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	73fb      	strb	r3, [r7, #15]
        break;
 80038ce:	e005      	b.n	80038dc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038d0:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ef      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d168      	bne.n	80039b4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d113      	bne.n	8003910 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e8:	4b35      	ldr	r3, [pc, #212]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	4b35      	ldr	r3, [pc, #212]	; (80039c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6892      	ldr	r2, [r2, #8]
 80038f4:	0211      	lsls	r1, r2, #8
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68d2      	ldr	r2, [r2, #12]
 80038fa:	06d2      	lsls	r2, r2, #27
 80038fc:	4311      	orrs	r1, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6852      	ldr	r2, [r2, #4]
 8003902:	3a01      	subs	r2, #1
 8003904:	0112      	lsls	r2, r2, #4
 8003906:	430a      	orrs	r2, r1
 8003908:	492d      	ldr	r1, [pc, #180]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800390a:	4313      	orrs	r3, r2
 800390c:	610b      	str	r3, [r1, #16]
 800390e:	e02d      	b.n	800396c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d115      	bne.n	8003942 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003916:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800391c:	4013      	ands	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	0211      	lsls	r1, r2, #8
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6912      	ldr	r2, [r2, #16]
 8003928:	0852      	lsrs	r2, r2, #1
 800392a:	3a01      	subs	r2, #1
 800392c:	0552      	lsls	r2, r2, #21
 800392e:	4311      	orrs	r1, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6852      	ldr	r2, [r2, #4]
 8003934:	3a01      	subs	r2, #1
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	430a      	orrs	r2, r1
 800393a:	4921      	ldr	r1, [pc, #132]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800393c:	4313      	orrs	r3, r2
 800393e:	610b      	str	r3, [r1, #16]
 8003940:	e014      	b.n	800396c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	4b21      	ldr	r3, [pc, #132]	; (80039cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003948:	4013      	ands	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6892      	ldr	r2, [r2, #8]
 800394e:	0211      	lsls	r1, r2, #8
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6952      	ldr	r2, [r2, #20]
 8003954:	0852      	lsrs	r2, r2, #1
 8003956:	3a01      	subs	r2, #1
 8003958:	0652      	lsls	r2, r2, #25
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6852      	ldr	r2, [r2, #4]
 8003960:	3a01      	subs	r2, #1
 8003962:	0112      	lsls	r2, r2, #4
 8003964:	430a      	orrs	r2, r1
 8003966:	4916      	ldr	r1, [pc, #88]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003968:	4313      	orrs	r3, r2
 800396a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800396c:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003976:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fd f944 	bl	8000c04 <HAL_GetTick>
 800397c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800397e:	e009      	b.n	8003994 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003980:	f7fd f940 	bl	8000c04 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d902      	bls.n	8003994 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	73fb      	strb	r3, [r7, #15]
          break;
 8003992:	e005      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ef      	beq.n	8003980 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	4904      	ldr	r1, [pc, #16]	; (80039c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	07ff800f 	.word	0x07ff800f
 80039c8:	ff9f800f 	.word	0xff9f800f
 80039cc:	f9ff800f 	.word	0xf9ff800f

080039d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039de:	4b72      	ldr	r3, [pc, #456]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00e      	beq.n	8003a08 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039ea:	4b6f      	ldr	r3, [pc, #444]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0203 	and.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d103      	bne.n	8003a02 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
       ||
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d142      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
 8003a06:	e03f      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d018      	beq.n	8003a42 <RCCEx_PLLSAI2_Config+0x72>
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d825      	bhi.n	8003a60 <RCCEx_PLLSAI2_Config+0x90>
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d002      	beq.n	8003a1e <RCCEx_PLLSAI2_Config+0x4e>
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d009      	beq.n	8003a30 <RCCEx_PLLSAI2_Config+0x60>
 8003a1c:	e020      	b.n	8003a60 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a1e:	4b62      	ldr	r3, [pc, #392]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d11d      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2e:	e01a      	b.n	8003a66 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a30:	4b5d      	ldr	r3, [pc, #372]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d116      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a40:	e013      	b.n	8003a6a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a42:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10f      	bne.n	8003a6e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a4e:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a5e:	e006      	b.n	8003a6e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
      break;
 8003a64:	e004      	b.n	8003a70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a66:	bf00      	nop
 8003a68:	e002      	b.n	8003a70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e000      	b.n	8003a70 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d108      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003a76:	4b4c      	ldr	r3, [pc, #304]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4949      	ldr	r1, [pc, #292]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f040 8086 	bne.w	8003b9c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a90:	4b45      	ldr	r3, [pc, #276]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a44      	ldr	r2, [pc, #272]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fd f8b2 	bl	8000c04 <HAL_GetTick>
 8003aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa2:	e009      	b.n	8003ab8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa4:	f7fd f8ae 	bl	8000c04 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d902      	bls.n	8003ab8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab6:	e005      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ab8:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ef      	bne.n	8003aa4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d168      	bne.n	8003b9c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d113      	bne.n	8003af8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad0:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	4b35      	ldr	r3, [pc, #212]	; (8003bac <RCCEx_PLLSAI2_Config+0x1dc>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6892      	ldr	r2, [r2, #8]
 8003adc:	0211      	lsls	r1, r2, #8
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	06d2      	lsls	r2, r2, #27
 8003ae4:	4311      	orrs	r1, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6852      	ldr	r2, [r2, #4]
 8003aea:	3a01      	subs	r2, #1
 8003aec:	0112      	lsls	r2, r2, #4
 8003aee:	430a      	orrs	r2, r1
 8003af0:	492d      	ldr	r1, [pc, #180]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	614b      	str	r3, [r1, #20]
 8003af6:	e02d      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d115      	bne.n	8003b2a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003afe:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6892      	ldr	r2, [r2, #8]
 8003b0a:	0211      	lsls	r1, r2, #8
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6912      	ldr	r2, [r2, #16]
 8003b10:	0852      	lsrs	r2, r2, #1
 8003b12:	3a01      	subs	r2, #1
 8003b14:	0552      	lsls	r2, r2, #21
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6852      	ldr	r2, [r2, #4]
 8003b1c:	3a01      	subs	r2, #1
 8003b1e:	0112      	lsls	r2, r2, #4
 8003b20:	430a      	orrs	r2, r1
 8003b22:	4921      	ldr	r1, [pc, #132]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	614b      	str	r3, [r1, #20]
 8003b28:	e014      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6892      	ldr	r2, [r2, #8]
 8003b36:	0211      	lsls	r1, r2, #8
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6952      	ldr	r2, [r2, #20]
 8003b3c:	0852      	lsrs	r2, r2, #1
 8003b3e:	3a01      	subs	r2, #1
 8003b40:	0652      	lsls	r2, r2, #25
 8003b42:	4311      	orrs	r1, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6852      	ldr	r2, [r2, #4]
 8003b48:	3a01      	subs	r2, #1
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	4916      	ldr	r1, [pc, #88]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b54:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a13      	ldr	r2, [pc, #76]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fd f850 	bl	8000c04 <HAL_GetTick>
 8003b64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b66:	e009      	b.n	8003b7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b68:	f7fd f84c 	bl	8000c04 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d902      	bls.n	8003b7c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	73fb      	strb	r3, [r7, #15]
          break;
 8003b7a:	e005      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ef      	beq.n	8003b68 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	4904      	ldr	r1, [pc, #16]	; (8003ba8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	07ff800f 	.word	0x07ff800f
 8003bb0:	ff9f800f 	.word	0xff9f800f
 8003bb4:	f9ff800f 	.word	0xf9ff800f

08003bb8 <__libc_init_array>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	4d0d      	ldr	r5, [pc, #52]	; (8003bf0 <__libc_init_array+0x38>)
 8003bbc:	4c0d      	ldr	r4, [pc, #52]	; (8003bf4 <__libc_init_array+0x3c>)
 8003bbe:	1b64      	subs	r4, r4, r5
 8003bc0:	10a4      	asrs	r4, r4, #2
 8003bc2:	2600      	movs	r6, #0
 8003bc4:	42a6      	cmp	r6, r4
 8003bc6:	d109      	bne.n	8003bdc <__libc_init_array+0x24>
 8003bc8:	4d0b      	ldr	r5, [pc, #44]	; (8003bf8 <__libc_init_array+0x40>)
 8003bca:	4c0c      	ldr	r4, [pc, #48]	; (8003bfc <__libc_init_array+0x44>)
 8003bcc:	f000 f820 	bl	8003c10 <_init>
 8003bd0:	1b64      	subs	r4, r4, r5
 8003bd2:	10a4      	asrs	r4, r4, #2
 8003bd4:	2600      	movs	r6, #0
 8003bd6:	42a6      	cmp	r6, r4
 8003bd8:	d105      	bne.n	8003be6 <__libc_init_array+0x2e>
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be0:	4798      	blx	r3
 8003be2:	3601      	adds	r6, #1
 8003be4:	e7ee      	b.n	8003bc4 <__libc_init_array+0xc>
 8003be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bea:	4798      	blx	r3
 8003bec:	3601      	adds	r6, #1
 8003bee:	e7f2      	b.n	8003bd6 <__libc_init_array+0x1e>
 8003bf0:	08003c70 	.word	0x08003c70
 8003bf4:	08003c70 	.word	0x08003c70
 8003bf8:	08003c70 	.word	0x08003c70
 8003bfc:	08003c74 	.word	0x08003c74

08003c00 <memset>:
 8003c00:	4402      	add	r2, r0
 8003c02:	4603      	mov	r3, r0
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d100      	bne.n	8003c0a <memset+0xa>
 8003c08:	4770      	bx	lr
 8003c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0e:	e7f9      	b.n	8003c04 <memset+0x4>

08003c10 <_init>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr

08003c1c <_fini>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	bf00      	nop
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr

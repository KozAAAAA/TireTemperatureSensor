
Tire_Temperature_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed4  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007098  08007098  00017098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c0  080072c0  00020294  2**0
                  CONTENTS
  4 .ARM          00000000  080072c0  080072c0  00020294  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072c0  080072c0  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  080072c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000294  0800755c  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  0800755c  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001551d  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b32  00000000  00000000  000357e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00038318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00039108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e980  00000000  00000000  00039dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010be2  00000000  00000000  00068750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001127d9  00000000  00000000  00079332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018bb0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd0  00000000  00000000  0018bb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000294 	.word	0x20000294
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800707c 	.word	0x0800707c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000298 	.word	0x20000298
 80001fc:	0800707c 	.word	0x0800707c

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b82:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b86:	f005 fb6d 	bl	8006264 <sqrtf>
 8000b8a:	eef0 7a40 	vmov.f32	s15, s0
 8000b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_Z15MLX90621_DumpEEPh>:
void ExtractAlphaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);
void ExtractOffsetParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);


int MLX90621_DumpEE(uint8_t *eeData)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
     return MLX90621_I2CReadEEPROM(0x50, 0, 256, eeData);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2050      	movs	r0, #80	; 0x50
 8000baa:	f000 fdd3 	bl	8001754 <_Z22MLX90621_I2CReadEEPROMhhtPh>
 8000bae:	4603      	mov	r3, r0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_Z21MLX90621_GetFrameDataPt>:


int MLX90621_GetFrameData(uint16_t *frameData)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	6078      	str	r0, [r7, #4]
    int error = 1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
        
    error = MLX90621_I2CRead(0x60, 0x02, 0, 1, 66, frameData);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	2342      	movs	r3, #66	; 0x42
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	2060      	movs	r0, #96	; 0x60
 8000bd4:	f000 fe4c 	bl	8001870 <_Z16MLX90621_I2CReadhhhhhPt>
 8000bd8:	60f8      	str	r0, [r7, #12]
       
    return error;    
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_Z18MLX90621_ConfigurePh>:

int MLX90621_Configure(uint8_t *eeData)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    int error = 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
    uint16_t value;
    
    error = MLX90621_I2CWrite(0x60, 0x04, 0xAA, eeData[247]);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	33f7      	adds	r3, #247	; 0xf7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	22aa      	movs	r2, #170	; 0xaa
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	2060      	movs	r0, #96	; 0x60
 8000bfe:	f000 feb7 	bl	8001970 <_Z17MLX90621_I2CWritehhht>
 8000c02:	60f8      	str	r0, [r7, #12]
    
    if (error != 0)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <_Z18MLX90621_ConfigurePh+0x2a>
    {
        return error;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	e017      	b.n	8000c3e <_Z18MLX90621_ConfigurePh+0x5a>
    }
    
    value = 256*eeData[246] + eeData[245];      
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	33f6      	adds	r3, #246	; 0xf6
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	33f5      	adds	r3, #245	; 0xf5
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	4413      	add	r3, r2
 8000c24:	817b      	strh	r3, [r7, #10]
    value = value | 0x0400;
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2c:	817b      	strh	r3, [r7, #10]
    error = MLX90621_I2CWrite(0x60, 0x03, 0x55, value);
 8000c2e:	897b      	ldrh	r3, [r7, #10]
 8000c30:	2255      	movs	r2, #85	; 0x55
 8000c32:	2103      	movs	r1, #3
 8000c34:	2060      	movs	r0, #96	; 0x60
 8000c36:	f000 fe9b 	bl	8001970 <_Z17MLX90621_I2CWritehhht>
 8000c3a:	60f8      	str	r0, [r7, #12]
    
    return error;      
 8000c3c:	68fb      	ldr	r3, [r7, #12]
}   
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_Z25MLX90621_GetConfigurationPt>:
       
    return error;    
}    

int MLX90621_GetConfiguration(uint16_t *cfgReg)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af02      	add	r7, sp, #8
 8000c4c:	6078      	str	r0, [r7, #4]
    int error = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
        
    error = MLX90621_I2CRead(0x60, 0x02, 0x92, 0, 1, cfgReg); 
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	2301      	movs	r3, #1
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2292      	movs	r2, #146	; 0x92
 8000c5e:	2102      	movs	r1, #2
 8000c60:	2060      	movs	r0, #96	; 0x60
 8000c62:	f000 fe05 	bl	8001870 <_Z16MLX90621_I2CReadhhhhhPt>
 8000c66:	60f8      	str	r0, [r7, #12]
       
    return error;    
 8000c68:	68fb      	ldr	r3, [r7, #12]
}   
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_Z26MLX90621_ExtractParametersPhP14paramsMLX90621>:
 

int MLX90621_ExtractParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b084      	sub	sp, #16
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
    int error = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
    
    ExtractPTATParameters(eeData, mlx90621);
 8000c80:	6839      	ldr	r1, [r7, #0]
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 fa06 	bl	8001094 <_Z21ExtractPTATParametersPhP14paramsMLX90621>
    ExtractTgcParameters(eeData, mlx90621);
 8000c88:	6839      	ldr	r1, [r7, #0]
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 faa4 	bl	80011d8 <_Z20ExtractTgcParametersPhP14paramsMLX90621>
    ExtractKsTaParameters(eeData, mlx90621);
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 fabe 	bl	8001214 <_Z21ExtractKsTaParametersPhP14paramsMLX90621>
    ExtractKsToParameters(eeData, mlx90621);
 8000c98:	6839      	ldr	r1, [r7, #0]
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 faf6 	bl	800128c <_Z21ExtractKsToParametersPhP14paramsMLX90621>
    ExtractAlphaParameters(eeData, mlx90621);
 8000ca0:	6839      	ldr	r1, [r7, #0]
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fb38 	bl	8001318 <_Z22ExtractAlphaParametersPhP14paramsMLX90621>
    ExtractOffsetParameters(eeData, mlx90621);
 8000ca8:	6839      	ldr	r1, [r7, #0]
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 fbec 	bl	8001488 <_Z23ExtractOffsetParametersPhP14paramsMLX90621>
        
    return error;
 8000cb0:	68fb      	ldr	r3, [r7, #12]

}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_Z25MLX90621_GetCurResolutionv>:
}

//------------------------------------------------------------------------------

int MLX90621_GetCurResolution()
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
    uint16_t cfgReg;
    int resolution;
    int error;
    
    error = MLX90621_GetConfiguration(&cfgReg);
 8000cc0:	1dbb      	adds	r3, r7, #6
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ffbf 	bl	8000c46 <_Z25MLX90621_GetConfigurationPt>
 8000cc8:	60f8      	str	r0, [r7, #12]
    if(error != 0)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <_Z25MLX90621_GetCurResolutionv+0x1a>
    {
        return error;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	e006      	b.n	8000ce2 <_Z25MLX90621_GetCurResolutionv+0x28>
    }    
    resolution = (cfgReg & 0x0030) >> 4;
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	60bb      	str	r3, [r7, #8]
    
    return resolution; 
 8000ce0:	68bb      	ldr	r3, [r7, #8]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf>:
}

//------------------------------------------------------------------------------

void MLX90621_CalculateTo(uint16_t *frameData, const paramsMLX90621 *params, float emissivity, float tr, float *result)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b090      	sub	sp, #64	; 0x40
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6178      	str	r0, [r7, #20]
 8000cf4:	6139      	str	r1, [r7, #16]
 8000cf6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000cfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
    float irData;
    float alphaCompensated;
    float Sx;
    float To;
    
    ta = MLX90621_GetTa(frameData, params);
 8000d00:	6939      	ldr	r1, [r7, #16]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f000 f952 	bl	8000fac <_Z14MLX90621_GetTaPtPK14paramsMLX90621>
 8000d08:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    
    ta4 = (ta + 273.15f);
 8000d0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d10:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8000fa0 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x2b4>
 8000d14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d18:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    ta4 = ta4 * ta4;
 8000d1c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d24:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    ta4 = ta4 * ta4;
 8000d28:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    tr4 = (tr + 273.15f);
 8000d34:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d38:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8000fa0 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x2b4>
 8000d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d40:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tr4 = tr4 * tr4;
 8000d44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d4c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tr4 = tr4 * tr4;
 8000d50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d58:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    taTr = tr4 - (tr4-ta4)/emissivity;
 8000d5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000d60:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d64:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000d68:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d78:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
//------------------------- To calculation -------------------------------------    
        
    irDataCP = frameData[65];
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	3382      	adds	r3, #130	; 0x82
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d8a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    if(irDataCP > 32767)
 8000d8e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d92:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8000fa4 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x2b8>
 8000d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9e:	dd07      	ble.n	8000db0 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0xc4>
    {
        irDataCP = irDataCP - 65536;
 8000da0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000da4:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8000fa8 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x2bc>
 8000da8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }

    irDataCP = irDataCP - (params->cpA + params->cpB * (ta - 25));
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	ed93 7ac7 	vldr	s14, [r3, #796]	; 0x31c
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	edd3 6ac8 	vldr	s13, [r3, #800]	; 0x320
 8000dbc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000dc0:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8000dc4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    
    for( int pixelNumber = 0; pixelNumber < 64; pixelNumber++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
 8000de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de2:	2b3f      	cmp	r3, #63	; 0x3f
 8000de4:	f300 80d7 	bgt.w	8000f96 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x2aa>
    {    
        irData = frameData[pixelNumber];
 8000de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	4413      	add	r3, r2
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dfa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        if(irData > 32767)
 8000dfe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e02:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8000fa4 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x2b8>
 8000e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0e:	dd07      	ble.n	8000e20 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x134>
        {
            irData = irData - 65536;
 8000e10:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e14:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8000fa8 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x2bc>
 8000e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e1c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        }
        
        irData = irData - (params->ai[pixelNumber] + params->bi[pixelNumber] * (ta - 25));
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e24:	3346      	adds	r3, #70	; 0x46
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	ed93 7a00 	vldr	s14, [r3]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e32:	3386      	adds	r3, #134	; 0x86
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	edd3 6a00 	vldr	s13, [r3]
 8000e3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e40:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8000e44:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e50:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e58:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        
        irData = irData - params->tgc * irDataCP;
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e62:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e72:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        irData = irData / emissivity;
 8000e76:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000e7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e82:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        
        alphaCompensated = params->alpha[pixelNumber] - params->tgc * params->cpAlpha;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8a:	3306      	adds	r3, #6
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	ed93 7a00 	vldr	s14, [r3]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	edd3 6a03 	vldr	s13, [r3, #12]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	edd3 7ac6 	vldr	s15, [r3, #792]	; 0x318
 8000ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea8:	edc7 7a08 	vstr	s15, [r7, #32]
        alphaCompensated = alphaCompensated *(1 + params->KsTa * (ta - 25));
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	ed93 7a04 	vldr	s14, [r3, #16]
 8000eb2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000eb6:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8000eba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eca:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed2:	edc7 7a08 	vstr	s15, [r7, #32]
                    
        Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8000ed6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000eda:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ede:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee6:	edd7 6a08 	vldr	s13, [r7, #32]
 8000eea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000eee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000ef2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efe:	edc7 7a07 	vstr	s15, [r7, #28]
        Sx = sqrt(sqrt(Sx)) * params->ksTo;            
 8000f02:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f06:	f7ff fe37 	bl	8000b78 <_ZSt4sqrtf>
 8000f0a:	eef0 7a40 	vmov.f32	s15, s0
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	f7ff fe31 	bl	8000b78 <_ZSt4sqrtf>
 8000f16:	eeb0 7a40 	vmov.f32	s14, s0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f24:	edc7 7a07 	vstr	s15, [r7, #28]
        
        To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo * 273.15f) + Sx) + taTr)) - 273.15f;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f2e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000fa0 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x2b4>
 8000f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f46:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f62:	f7ff fe09 	bl	8000b78 <_ZSt4sqrtf>
 8000f66:	eef0 7a40 	vmov.f32	s15, s0
 8000f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6e:	f7ff fe03 	bl	8000b78 <_ZSt4sqrtf>
 8000f72:	eef0 7a40 	vmov.f32	s15, s0
 8000f76:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000fa0 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x2b4>
 8000f7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f7e:	edc7 7a06 	vstr	s15, [r7, #24]
                                    
        result[pixelNumber] = To;
 8000f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 64; pixelNumber++)
 8000f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f90:	3301      	adds	r3, #1
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
 8000f94:	e724      	b.n	8000de0 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0xf4>
    
    }
}
 8000f96:	bf00      	nop
 8000f98:	3740      	adds	r7, #64	; 0x40
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	43889333 	.word	0x43889333
 8000fa4:	46fffe00 	.word	0x46fffe00
 8000fa8:	47800000 	.word	0x47800000

08000fac <_Z14MLX90621_GetTaPtPK14paramsMLX90621>:
}

//------------------------------------------------------------------------------

float MLX90621_GetTa(uint16_t *frameData, const paramsMLX90621 *params)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    float ptat;
    float ta;
    
    ptat = frameData[64];
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3380      	adds	r3, #128	; 0x80
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc4:	edc7 7a03 	vstr	s15, [r7, #12]
    if(ptat > 32767)
 8000fc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fcc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800108c <_Z14MLX90621_GetTaPtPK14paramsMLX90621+0xe0>
 8000fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	dd07      	ble.n	8000fea <_Z14MLX90621_GetTaPtPK14paramsMLX90621+0x3e>
    {
        ptat = ptat - 65536;
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001090 <_Z14MLX90621_GetTaPtPK14paramsMLX90621+0xe4>
 8000fe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fe6:	edc7 7a03 	vstr	s15, [r7, #12]
    }
       
    ta = params->vTh25 - ptat;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001000:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = 4*params->kT2*ta;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	edd3 7a02 	vldr	s15, [r3, #8]
 800100a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800100e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001012:	ed97 7a02 	vldr	s14, [r7, #8]
 8001016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101a:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = params->kT1*params->kT1 - ta;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	ed93 7a01 	vldr	s14, [r3, #4]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	edd3 7a01 	vldr	s15, [r3, #4]
 800102a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800102e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001036:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = sqrt(ta)-params->kT1;
 800103a:	ed97 0a02 	vldr	s0, [r7, #8]
 800103e:	f7ff fd9b 	bl	8000b78 <_ZSt4sqrtf>
 8001042:	eeb0 7a40 	vmov.f32	s14, s0
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	edd3 7a01 	vldr	s15, [r3, #4]
 800104c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001050:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta / (2*params->kT2);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	edd3 7a02 	vldr	s15, [r3, #8]
 800105a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800105e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001066:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta + 25;
 800106a:	edd7 7a02 	vldr	s15, [r7, #8]
 800106e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001072:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001076:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	ee07 3a90 	vmov	s15, r3
}
 8001080:	eeb0 0a67 	vmov.f32	s0, s15
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	46fffe00 	.word	0x46fffe00
 8001090:	47800000 	.word	0x47800000

08001094 <_Z21ExtractPTATParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    float kt1;
    float kt2;
    int16_t vth25;
    int kt1Scale = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
    int kt2Scale = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
    int resolution = 3;
 80010a6:	2303      	movs	r3, #3
 80010a8:	60fb      	str	r3, [r7, #12]
    uint16_t data;
    
    resolution = resolution - MLX90621_GetCurResolution();
 80010aa:	f7ff fe06 	bl	8000cba <_Z25MLX90621_GetCurResolutionv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
    kt1Scale = (eeData[210] & 0xF0) >> 4;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	33d2      	adds	r3, #210	; 0xd2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	617b      	str	r3, [r7, #20]
    kt2Scale = eeData[210] & 0x0F;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	33d2      	adds	r3, #210	; 0xd2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	613b      	str	r3, [r7, #16]
    kt2Scale = kt2Scale + 10;
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	330a      	adds	r3, #10
 80010d2:	613b      	str	r3, [r7, #16]
    kt1Scale = kt1Scale + resolution;
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4413      	add	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
    kt2Scale = kt2Scale + resolution;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4413      	add	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
    
    data = (eeData[219]<<8) + eeData[218];
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	33db      	adds	r3, #219	; 0xdb
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	33da      	adds	r3, #218	; 0xda
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4413      	add	r3, r2
 80010fa:	817b      	strh	r3, [r7, #10]
    vth25 = data;
 80010fc:	897b      	ldrh	r3, [r7, #10]
 80010fe:	813b      	strh	r3, [r7, #8]
    
    kt1 = (eeData[221]<<8) + eeData[220];
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	33dd      	adds	r3, #221	; 0xdd
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	32dc      	adds	r2, #220	; 0xdc
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	4413      	add	r3, r2
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001118:	edc7 7a07 	vstr	s15, [r7, #28]
    if (kt1 > 32767)
 800111c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001120:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80011d0 <_Z21ExtractPTATParametersPhP14paramsMLX90621+0x13c>
 8001124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	dd07      	ble.n	800113e <_Z21ExtractPTATParametersPhP14paramsMLX90621+0xaa>
    {
        kt1 = kt1 - 65536;
 800112e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001132:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80011d4 <_Z21ExtractPTATParametersPhP14paramsMLX90621+0x140>
 8001136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800113a:	edc7 7a07 	vstr	s15, [r7, #28]
    }  
    
    kt1 = kt1 / (1<<kt1Scale);  
 800113e:	2201      	movs	r2, #1
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001156:	edc7 7a07 	vstr	s15, [r7, #28]
    
    kt2 = (eeData[223]<<8) + eeData[222];
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	33df      	adds	r3, #223	; 0xdf
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	32de      	adds	r2, #222	; 0xde
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	4413      	add	r3, r2
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001172:	edc7 7a06 	vstr	s15, [r7, #24]
    if (kt2 > 32767)
 8001176:	edd7 7a06 	vldr	s15, [r7, #24]
 800117a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80011d0 <_Z21ExtractPTATParametersPhP14paramsMLX90621+0x13c>
 800117e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	dd07      	ble.n	8001198 <_Z21ExtractPTATParametersPhP14paramsMLX90621+0x104>
    {
        kt2 = kt2 - 65536;
 8001188:	edd7 7a06 	vldr	s15, [r7, #24]
 800118c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80011d4 <_Z21ExtractPTATParametersPhP14paramsMLX90621+0x140>
 8001190:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001194:	edc7 7a06 	vstr	s15, [r7, #24]
    }  
    
    kt2 = kt2 / (1<<kt2Scale); 
 8001198:	2201      	movs	r2, #1
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a8:	edd7 6a06 	vldr	s13, [r7, #24]
 80011ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b0:	edc7 7a06 	vstr	s15, [r7, #24]
    
    mlx90621->vTh25 = vth25;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	893a      	ldrh	r2, [r7, #8]
 80011b8:	801a      	strh	r2, [r3, #0]
    mlx90621->kT1 = kt1;    
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	605a      	str	r2, [r3, #4]
    mlx90621->kT2 = kt2;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	609a      	str	r2, [r3, #8]
      
}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	46fffe00 	.word	0x46fffe00
 80011d4:	47800000 	.word	0x47800000

080011d8 <_Z20ExtractTgcParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[216]/32.0f;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	33d8      	adds	r3, #216	; 0xd8
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001210 <_Z20ExtractTgcParametersPhP14paramsMLX90621+0x38>
 80011f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f8:	edc7 7a03 	vstr	s15, [r7, #12]
        
    mlx90621->tgc = tgc;        
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	60da      	str	r2, [r3, #12]
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	42000000 	.word	0x42000000

08001214 <_Z21ExtractKsTaParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[231] << 8) + eeData[230];
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	33e7      	adds	r3, #231	; 0xe7
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	32e6      	adds	r2, #230	; 0xe6
 800122a:	7812      	ldrb	r2, [r2, #0]
 800122c:	4413      	add	r3, r2
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001236:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 32767)
 800123a:	edd7 7a03 	vldr	s15, [r7, #12]
 800123e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001280 <_Z21ExtractKsTaParametersPhP14paramsMLX90621+0x6c>
 8001242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	dd07      	ble.n	800125c <_Z21ExtractKsTaParametersPhP14paramsMLX90621+0x48>
    {
        KsTa = KsTa - 65536;
 800124c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001250:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001284 <_Z21ExtractKsTaParametersPhP14paramsMLX90621+0x70>
 8001254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001258:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / (1<<20);
 800125c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001260:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001288 <_Z21ExtractKsTaParametersPhP14paramsMLX90621+0x74>
 8001264:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001268:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90621->KsTa = KsTa;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	611a      	str	r2, [r3, #16]
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	46fffe00 	.word	0x46fffe00
 8001284:	47800000 	.word	0x47800000
 8001288:	49800000 	.word	0x49800000

0800128c <_Z21ExtractKsToParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
    int scale;
        
    scale = eeData[192] & 0x0F;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	33c0      	adds	r3, #192	; 0xc0
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	60fb      	str	r3, [r7, #12]
    scale = scale + 8;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3308      	adds	r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
    
    mlx90621->ksTo = eeData[196];
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	33c4      	adds	r3, #196	; 0xc4
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	edc3 7a05 	vstr	s15, [r3, #20]
       
    if(mlx90621->ksTo > 127)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	edd3 7a05 	vldr	s15, [r3, #20]
 80012c2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001310 <_Z21ExtractKsToParametersPhP14paramsMLX90621+0x84>
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	dd09      	ble.n	80012e4 <_Z21ExtractKsToParametersPhP14paramsMLX90621+0x58>
    {
        mlx90621->ksTo = mlx90621->ksTo - 256;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80012d6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001314 <_Z21ExtractKsToParametersPhP14paramsMLX90621+0x88>
 80012da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a05 	vstr	s15, [r3, #20]
    }
    mlx90621->ksTo = mlx90621->ksTo / (1 << scale);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	edd3 6a05 	vldr	s13, [r3, #20]
 80012ea:	2201      	movs	r2, #1
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	edc3 7a05 	vstr	s15, [r3, #20]
    
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	42fe0000 	.word	0x42fe0000
 8001314:	43800000 	.word	0x43800000

08001318 <_Z22ExtractAlphaParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{    
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
    uint8_t resScale;
    float alphaCom; 
    float alphaTemp;
    float temp;
    
    alphaScale = eeData[226];
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	33e2      	adds	r3, #226	; 0xe2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f8ab 	bl	8000484 <__aeabi_ui2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	e9c7 2308 	strd	r2, r3, [r7, #32]
    deltaScale = eeData[227];
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	33e3      	adds	r3, #227	; 0xe3
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8a1 	bl	8000484 <__aeabi_ui2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	e9c7 2306 	strd	r2, r3, [r7, #24]
    resScale = 3 - MLX90621_GetCurResolution();
 800134a:	f7ff fcb6 	bl	8000cba <_Z25MLX90621_GetCurResolutionv>
 800134e:	4603      	mov	r3, r0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f1c3 0303 	rsb	r3, r3, #3
 8001356:	75fb      	strb	r3, [r7, #23]
    alphaCom = (eeData[225]<<8) + eeData[224];
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	33e1      	adds	r3, #225	; 0xe1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	32e0      	adds	r2, #224	; 0xe0
 8001364:	7812      	ldrb	r2, [r2, #0]
 8001366:	4413      	add	r3, r2
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001370:	edc7 7a04 	vstr	s15, [r7, #16]
    alphaScale = pow(2,alphaScale);
 8001374:	ed97 0b08 	vldr	d0, [r7, #32]
 8001378:	2002      	movs	r0, #2
 800137a:	f000 f9ce 	bl	800171a <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800137e:	ed87 0b08 	vstr	d0, [r7, #32]
    deltaScale = pow(2,deltaScale);
 8001382:	ed97 0b06 	vldr	d0, [r7, #24]
 8001386:	2002      	movs	r0, #2
 8001388:	f000 f9c7 	bl	800171a <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800138c:	ed87 0b06 	vstr	d0, [r7, #24]
    alphaCom = alphaCom / alphaScale;
 8001390:	6938      	ldr	r0, [r7, #16]
 8001392:	f7ff f899 	bl	80004c8 <__aeabi_f2d>
 8001396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800139a:	f7ff fa17 	bl	80007cc <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fb97 	bl	8000ad8 <__aeabi_d2f>
 80013aa:	4603      	mov	r3, r0
 80013ac:	613b      	str	r3, [r7, #16]
  
    for(int i = 0; i < 64; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	2b3f      	cmp	r3, #63	; 0x3f
 80013b6:	dc37      	bgt.n	8001428 <_Z22ExtractAlphaParametersPhP14paramsMLX90621+0x110>
    {
        temp = eeData[128+i];
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ba:	3380      	adds	r3, #128	; 0x80
 80013bc:	461a      	mov	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013cc:	edc7 7a03 	vstr	s15, [r7, #12]
        temp = temp / deltaScale;        
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff f879 	bl	80004c8 <__aeabi_f2d>
 80013d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013da:	f7ff f9f7 	bl	80007cc <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fb77 	bl	8000ad8 <__aeabi_d2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	60fb      	str	r3, [r7, #12]
        alphaTemp = (alphaCom + temp)/(1<<resScale);
 80013ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80013f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013f6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	2201      	movs	r2, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140e:	edc7 7a02 	vstr	s15, [r7, #8]
        mlx90621->alpha[i] = alphaTemp;
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001416:	3306      	adds	r3, #6
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 64; i++)
 8001420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001422:	3301      	adds	r3, #1
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001426:	e7c4      	b.n	80013b2 <_Z22ExtractAlphaParametersPhP14paramsMLX90621+0x9a>
    } 
    
    alphaTemp = (eeData[215]<<8) + eeData[214];
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	33d7      	adds	r3, #215	; 0xd7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	32d6      	adds	r2, #214	; 0xd6
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	4413      	add	r3, r2
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001440:	edc7 7a02 	vstr	s15, [r7, #8]
    alphaTemp = alphaTemp / alphaScale;
 8001444:	68b8      	ldr	r0, [r7, #8]
 8001446:	f7ff f83f 	bl	80004c8 <__aeabi_f2d>
 800144a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800144e:	f7ff f9bd 	bl	80007cc <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fb3d 	bl	8000ad8 <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	60bb      	str	r3, [r7, #8]
    
    mlx90621->cpAlpha = alphaTemp / (1<<resScale);
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	2201      	movs	r2, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001472:	edd7 6a02 	vldr	s13, [r7, #8]
 8001476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	edc3 7ac6 	vstr	s15, [r3, #792]	; 0x318
}
 8001480:	bf00      	nop
 8001482:	3730      	adds	r7, #48	; 0x30
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_Z23ExtractOffsetParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
    int16_t aCom;
    float aTemp;
    float bTemp;
    uint16_t data;
    
    aScale = eeData[217]>>4;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	33d9      	adds	r3, #217	; 0xd9
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	76fb      	strb	r3, [r7, #27]
    bScale = eeData[217] & 0x0F;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	33d9      	adds	r3, #217	; 0xd9
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	edc7 7a05 	vstr	s15, [r7, #20]
    resScale = 3 - MLX90621_GetCurResolution();
 80014b2:	f7ff fc02 	bl	8000cba <_Z25MLX90621_GetCurResolutionv>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f1c3 0303 	rsb	r3, r3, #3
 80014be:	74fb      	strb	r3, [r7, #19]
    bScale = pow(2, (double)(bScale+resScale));
 80014c0:	7cfb      	ldrb	r3, [r7, #19]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	ee17 0a90 	vmov	r0, s15
 80014d6:	f7fe fff7 	bl	80004c8 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	ec43 2b10 	vmov	d0, r2, r3
 80014e2:	2002      	movs	r0, #2
 80014e4:	f000 f919 	bl	800171a <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014e8:	ec53 2b10 	vmov	r2, r3, d0
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff faf2 	bl	8000ad8 <__aeabi_d2f>
 80014f4:	4603      	mov	r3, r0
 80014f6:	617b      	str	r3, [r7, #20]
    
    data = (eeData[209]<<8) + eeData[208];
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	33d1      	adds	r3, #209	; 0xd1
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b29a      	uxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	33d0      	adds	r3, #208	; 0xd0
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	823b      	strh	r3, [r7, #16]
    aCom = data;    
 8001510:	8a3b      	ldrh	r3, [r7, #16]
 8001512:	81fb      	strh	r3, [r7, #14]

    for(int i=0; i<64; i++)
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b3f      	cmp	r3, #63	; 0x3f
 800151c:	dc58      	bgt.n	80015d0 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x148>
    {
        aTemp = eeData[i]<<aScale; 
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	7efb      	ldrb	r3, [r7, #27]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	ee07 3a90 	vmov	s15, r3
 8001532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001536:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        bTemp = eeData[64+i];
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3340      	adds	r3, #64	; 0x40
 800153e:	461a      	mov	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154e:	edc7 7a08 	vstr	s15, [r7, #32]
        if (bTemp > 127)
 8001552:	edd7 7a08 	vldr	s15, [r7, #32]
 8001556:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001688 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x200>
 800155a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	dd07      	ble.n	8001574 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0xec>
        {
            bTemp = bTemp - 256;
 8001564:	edd7 7a08 	vldr	s15, [r7, #32]
 8001568:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800168c <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x204>
 800156c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001570:	edc7 7a08 	vstr	s15, [r7, #32]
        }            
        bTemp = bTemp / bScale;
 8001574:	edd7 6a08 	vldr	s13, [r7, #32]
 8001578:	ed97 7a05 	vldr	s14, [r7, #20]
 800157c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001580:	edc7 7a08 	vstr	s15, [r7, #32]
        
        mlx90621->ai[i] = (aCom + aTemp) / (1<<resScale);
 8001584:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001590:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001594:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	2201      	movs	r2, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3346      	adds	r3, #70	; 0x46
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	edc3 7a00 	vstr	s15, [r3]
        mlx90621->bi[i] = bTemp;
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	3386      	adds	r3, #134	; 0x86
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	6a3a      	ldr	r2, [r7, #32]
 80015c6:	601a      	str	r2, [r3, #0]
    for(int i=0; i<64; i++)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	3301      	adds	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e7a3      	b.n	8001518 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x90>
    } 
    
    aTemp = (eeData[212]<<8) + eeData[211];
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	33d4      	adds	r3, #212	; 0xd4
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	32d3      	adds	r2, #211	; 0xd3
 80015dc:	7812      	ldrb	r2, [r2, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (aTemp > 32767)
 80015ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001690 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x208>
 80015f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	dd07      	ble.n	800160e <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x186>
    {
        aTemp = aTemp - 65536;
 80015fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001602:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001694 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x20c>
 8001606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800160a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    }    
    aTemp = aTemp / (1<<resScale); 
 800160e:	7cfb      	ldrb	r3, [r7, #19]
 8001610:	2201      	movs	r2, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800161e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001626:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    bTemp = eeData[213];
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	33d5      	adds	r3, #213	; 0xd5
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001638:	edc7 7a08 	vstr	s15, [r7, #32]
    if (bTemp > 127)
 800163c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001640:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001688 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x200>
 8001644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	dd07      	ble.n	800165e <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x1d6>
    {
        bTemp = bTemp - 256;
 800164e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001652:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800168c <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x204>
 8001656:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800165a:	edc7 7a08 	vstr	s15, [r7, #32]
    }     
    bTemp = bTemp / bScale;      
 800165e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001662:	ed97 7a05 	vldr	s14, [r7, #20]
 8001666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800166a:	edc7 7a08 	vstr	s15, [r7, #32]
    
    mlx90621->cpA = aTemp;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001672:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
    mlx90621->cpB = bTemp;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	6a3a      	ldr	r2, [r7, #32]
 800167a:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	42fe0000 	.word	0x42fe0000
 800168c:	43800000 	.word	0x43800000
 8001690:	46fffe00 	.word	0x46fffe00
 8001694:	47800000 	.word	0x47800000

08001698 <_Z18MLX90621_AverageToPKfPh>:

int MLX90621_AverageTo(const float *toData, uint8_t *result)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
	for(int resultIterator = 0; resultIterator < 8; resultIterator++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	2b07      	cmp	r3, #7
 80016aa:	dc2f      	bgt.n	800170c <_Z18MLX90621_AverageToPKfPh+0x74>
	{
		float sum = 0;
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
		for(int sumIterator = 0; sumIterator < 8; sumIterator++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b07      	cmp	r3, #7
 80016ba:	dc12      	bgt.n	80016e2 <_Z18MLX90621_AverageToPKfPh+0x4a>
		{
			sum += toData[sumIterator + resultIterator*8];
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	00da      	lsls	r2, r3, #3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4413      	add	r3, r2
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80016d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d6:	edc7 7a06 	vstr	s15, [r7, #24]
		for(int sumIterator = 0; sumIterator < 8; sumIterator++)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3301      	adds	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	e7e9      	b.n	80016b6 <_Z18MLX90621_AverageToPKfPh+0x1e>
		}

		uint8_t avg = (uint8_t)(sum/8);
 80016e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80016e6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80016ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80016f6:	793b      	ldrb	r3, [r7, #4]
 80016f8:	74fb      	strb	r3, [r7, #19]
		{
			return -1;
		}
		else
		{
			result[resultIterator] = avg;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	4413      	add	r3, r2
 8001700:	7cfa      	ldrb	r2, [r7, #19]
 8001702:	701a      	strb	r2, [r3, #0]
	for(int resultIterator = 0; resultIterator < 8; resultIterator++)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	3301      	adds	r3, #1
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	e7cc      	b.n	80016a6 <_Z18MLX90621_AverageToPKfPh+0xe>
		}
	}

	return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7fe febc 	bl	80004a4 <__aeabi_i2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	ed97 1b00 	vldr	d1, [r7]
 8001734:	ec43 2b10 	vmov	d0, r2, r3
 8001738:	f004 fd24 	bl	8006184 <pow>
 800173c:	eeb0 7a40 	vmov.f32	s14, s0
 8001740:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001744:	eeb0 0a47 	vmov.f32	s0, s14
 8001748:	eef0 0a67 	vmov.f32	s1, s15
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <_Z22MLX90621_I2CReadEEPROMhhtPh>:
	//set via the .ioc
    //i2c.frequency(1000*freq);
}

int MLX90621_I2CReadEEPROM(uint8_t slaveAddr, uint8_t startAddress, uint16_t nMemAddressRead, uint8_t *data)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b0cb      	sub	sp, #300	; 0x12c
 8001758:	af04      	add	r7, sp, #16
 800175a:	4604      	mov	r4, r0
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001764:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800176e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001772:	4622      	mov	r2, r4
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800177a:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800177e:	4602      	mov	r2, r0
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001786:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800178a:	460a      	mov	r2, r1
 800178c:	801a      	strh	r2, [r3, #0]
    uint8_t sa;
    int cnt = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    uint8_t cmd = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    uint8_t i2cData[256] = {0};
 800179a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800179e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	3304      	adds	r3, #4
 80017a8:	22fc      	movs	r2, #252	; 0xfc
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f005 fc5d 	bl	800706c <memset>
    uint8_t *p;
    
    p = data;
 80017b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    sa = (slaveAddr << 1);
 80017c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017c4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    cmd = startAddress;
 80017d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017d4:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    
    if(HAL_I2C_Mem_Read(&hi2c2, sa, cmd, 1, i2cData, nMemAddressRead, 100) != HAL_OK)
 80017de:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80017e2:	b299      	uxth	r1, r3
 80017e4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	2364      	movs	r3, #100	; 0x64
 80017ec:	9302      	str	r3, [sp, #8]
 80017ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2301      	movs	r3, #1
 8001802:	481a      	ldr	r0, [pc, #104]	; (800186c <_Z22MLX90621_I2CReadEEPROMhhtPh+0x118>)
 8001804:	f002 fa24 	bl	8003c50 <HAL_I2C_Mem_Read>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	bf14      	ite	ne
 800180e:	2301      	movne	r3, #1
 8001810:	2300      	moveq	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <_Z22MLX90621_I2CReadEEPROMhhtPh+0xca>
    {
    	return -1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800181c:	e021      	b.n	8001862 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x10e>
    }
    
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001824:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001828:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001832:	429a      	cmp	r2, r3
 8001834:	da14      	bge.n	8001860 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x10c>
    {
        *p++ = i2cData[cnt];
 8001836:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800183a:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800183e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001842:	4413      	add	r3, r2
 8001844:	7819      	ldrb	r1, [r3, #0]
 8001846:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8001850:	460a      	mov	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8001854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001858:	3301      	adds	r3, #1
 800185a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800185e:	e7e1      	b.n	8001824 <_Z22MLX90621_I2CReadEEPROMhhtPh+0xd0>
    }

    return 0;
 8001860:	2300      	movs	r3, #0
} 
 8001862:	4618      	mov	r0, r3
 8001864:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	200002dc 	.word	0x200002dc

08001870 <_Z16MLX90621_I2CReadhhhhhPt>:

int MLX90621_I2CRead(uint8_t slaveAddr,uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead, uint16_t *data)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b0af      	sub	sp, #188	; 0xbc
 8001874:	af06      	add	r7, sp, #24
 8001876:	4604      	mov	r4, r0
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4623      	mov	r3, r4
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	4603      	mov	r3, r0
 8001884:	71bb      	strb	r3, [r7, #6]
 8001886:	460b      	mov	r3, r1
 8001888:	717b      	strb	r3, [r7, #5]
 800188a:	4613      	mov	r3, r2
 800188c:	713b      	strb	r3, [r7, #4]
    uint8_t sa;
    int cnt = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    int i = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t i2cData[132] = {0};
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f005 fbe0 	bl	800706c <memset>
    uint16_t *p;
    
    p = data;
 80018ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    sa = (slaveAddr << 1);
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    

    if(Custom_HAL_I2C_Mem_Read(&hi2c2, sa, command, startAddress, addressStep, nMemAddressRead, i2cData, 2*nMemAddressRead, 100) != HAL_OK)
 80018bc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80018c0:	b299      	uxth	r1, r3
 80018c2:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	7978      	ldrb	r0, [r7, #5]
 80018ce:	79ba      	ldrb	r2, [r7, #6]
 80018d0:	2464      	movs	r4, #100	; 0x64
 80018d2:	9404      	str	r4, [sp, #16]
 80018d4:	9303      	str	r3, [sp, #12]
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	793b      	ldrb	r3, [r7, #4]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	4603      	mov	r3, r0
 80018e8:	4820      	ldr	r0, [pc, #128]	; (800196c <_Z16MLX90621_I2CReadhhhhhPt+0xfc>)
 80018ea:	f002 fd1d 	bl	8004328 <Custom_HAL_I2C_Mem_Read>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <_Z16MLX90621_I2CReadhhhhhPt+0x94>
    {
    	return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001902:	e02e      	b.n	8001962 <_Z16MLX90621_I2CReadhhhhhPt+0xf2>
    }
    
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800190a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800190e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001912:	429a      	cmp	r2, r3
 8001914:	da24      	bge.n	8001960 <_Z16MLX90621_I2CReadhhhhhPt+0xf0>
    {
        i = cnt << 1;
 8001916:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        *p++ = (uint16_t)i2cData[i+1]*256 + (uint16_t)i2cData[i];
 8001920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001924:	3301      	adds	r3, #1
 8001926:	33a0      	adds	r3, #160	; 0xa0
 8001928:	443b      	add	r3, r7
 800192a:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800192e:	b29b      	uxth	r3, r3
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b29a      	uxth	r2, r3
 8001934:	f107 010c 	add.w	r1, r7, #12
 8001938:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800193c:	440b      	add	r3, r1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	4413      	add	r3, r2
 8001944:	b299      	uxth	r1, r3
 8001946:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800194a:	1c9a      	adds	r2, r3, #2
 800194c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001950:	460a      	mov	r2, r1
 8001952:	801a      	strh	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8001954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001958:	3301      	adds	r3, #1
 800195a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800195e:	e7d4      	b.n	800190a <_Z16MLX90621_I2CReadhhhhhPt+0x9a>
    }

    return 0;   
 8001960:	2300      	movs	r3, #0
} 
 8001962:	4618      	mov	r0, r3
 8001964:	37a4      	adds	r7, #164	; 0xa4
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	200002dc 	.word	0x200002dc

08001970 <_Z17MLX90621_I2CWritehhht>:

int MLX90621_I2CWrite(uint8_t slaveAddr, uint8_t command, uint8_t checkValue, uint16_t data)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b087      	sub	sp, #28
 8001974:	af02      	add	r7, sp, #8
 8001976:	4604      	mov	r4, r0
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	71fb      	strb	r3, [r7, #7]
 8001982:	4603      	mov	r3, r0
 8001984:	71bb      	strb	r3, [r7, #6]
 8001986:	460b      	mov	r3, r1
 8001988:	717b      	strb	r3, [r7, #5]
 800198a:	4613      	mov	r3, r2
 800198c:	807b      	strh	r3, [r7, #2]
    uint8_t sa;
    uint8_t cmd[5] = {0,0,0,0,0};
 800198e:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <_Z17MLX90621_I2CWritehhht+0xb8>)
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001998:	6018      	str	r0, [r3, #0]
 800199a:	3304      	adds	r3, #4
 800199c:	7019      	strb	r1, [r3, #0]
    static uint16_t dataCheck;
    

    sa = (slaveAddr << 1);
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
    cmd[0] = command;
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	723b      	strb	r3, [r7, #8]
    cmd[2] = data & 0x00FF;
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	72bb      	strb	r3, [r7, #10]
    cmd[1] = cmd[2] - checkValue;
 80019ae:	7aba      	ldrb	r2, [r7, #10]
 80019b0:	797b      	ldrb	r3, [r7, #5]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	727b      	strb	r3, [r7, #9]
    cmd[4] = data >> 8;
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	733b      	strb	r3, [r7, #12]
    cmd[3] = cmd[4] - checkValue;
 80019c2:	7b3a      	ldrb	r2, [r7, #12]
 80019c4:	797b      	ldrb	r3, [r7, #5]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	72fb      	strb	r3, [r7, #11]

    if(HAL_I2C_Master_Transmit(&hi2c2, sa, cmd, 5, 100) != HAL_OK)
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	b299      	uxth	r1, r3
 80019d0:	f107 0208 	add.w	r2, r7, #8
 80019d4:	2364      	movs	r3, #100	; 0x64
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2305      	movs	r3, #5
 80019da:	4814      	ldr	r0, [pc, #80]	; (8001a2c <_Z17MLX90621_I2CWritehhht+0xbc>)
 80019dc:	f002 f844 	bl	8003a68 <HAL_I2C_Master_Transmit>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf14      	ite	ne
 80019e6:	2301      	movne	r3, #1
 80019e8:	2300      	moveq	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <_Z17MLX90621_I2CWritehhht+0x86>
    {
        return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f4:	e014      	b.n	8001a20 <_Z17MLX90621_I2CWritehhht+0xb0>
    }

    MLX90621_I2CRead(slaveAddr, 0x02, 0x8F+command, 0, 1, &dataCheck);
 80019f6:	79bb      	ldrb	r3, [r7, #6]
 80019f8:	3b71      	subs	r3, #113	; 0x71
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	79f8      	ldrb	r0, [r7, #7]
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <_Z17MLX90621_I2CWritehhht+0xc0>)
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	2301      	movs	r3, #1
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2300      	movs	r3, #0
 8001a08:	2102      	movs	r1, #2
 8001a0a:	f7ff ff31 	bl	8001870 <_Z16MLX90621_I2CReadhhhhhPt>
    
    if ( dataCheck != data)
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <_Z17MLX90621_I2CWritehhht+0xc0>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d002      	beq.n	8001a1e <_Z17MLX90621_I2CWritehhht+0xae>
    {
        return -2;
 8001a18:	f06f 0301 	mvn.w	r3, #1
 8001a1c:	e000      	b.n	8001a20 <_Z17MLX90621_I2CWritehhht+0xb0>
    }    
    
    return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	08007098 	.word	0x08007098
 8001a2c:	200002dc 	.word	0x200002dc
 8001a30:	200002b0 	.word	0x200002b0

08001a34 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <MX_CAN1_Init+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a40:	2218      	movs	r2, #24
 8001a42:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a4a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a58:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_CAN1_Init+0x64>)
 8001a86:	f000 ff97 	bl	80029b8 <HAL_CAN_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001a90:	f000 fb21 	bl	80020d6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200002b4 	.word	0x200002b4
 8001a9c:	40006400 	.word	0x40006400

08001aa0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <HAL_CAN_MspInit+0xa0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d139      	bne.n	8001b36 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_CAN_MspInit+0xa4>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_CAN_MspInit+0xa4>)
 8001ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001acc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_CAN_MspInit+0xa4>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_CAN_MspInit+0xa4>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_CAN_MspInit+0xa4>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_CAN_MspInit+0xa4>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001af2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b04:	2309      	movs	r3, #9
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b12:	f001 fd6f 	bl	80035f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2014      	movs	r0, #20
 8001b1c:	f001 fd33 	bl	8003586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b20:	2014      	movs	r0, #20
 8001b22:	f001 fd4c 	bl	80035be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2015      	movs	r0, #21
 8001b2c:	f001 fd2b 	bl	8003586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001b30:	2015      	movs	r0, #21
 8001b32:	f001 fd44 	bl	80035be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40006400 	.word	0x40006400
 8001b44:	40021000 	.word	0x40021000

08001b48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a36      	ldr	r2, [pc, #216]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a30      	ldr	r2, [pc, #192]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a2a      	ldr	r2, [pc, #168]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb2:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <MX_GPIO_Init+0xf4>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_WAR2_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2144      	movs	r1, #68	; 0x44
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc6:	f001 fea7 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WAR1_GPIO_Port, LED_WAR1_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2110      	movs	r1, #16
 8001bce:	481c      	ldr	r0, [pc, #112]	; (8001c40 <MX_GPIO_Init+0xf8>)
 8001bd0:	f001 fea2 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	481a      	ldr	r0, [pc, #104]	; (8001c44 <MX_GPIO_Init+0xfc>)
 8001bda:	f001 fe9d 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_WAR2_Pin|LED_ERR_Pin;
 8001bde:	2344      	movs	r3, #68	; 0x44
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf8:	f001 fcfc 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WAR1_Pin;
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_WAR1_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	480b      	ldr	r0, [pc, #44]	; (8001c40 <MX_GPIO_Init+0xf8>)
 8001c14:	f001 fcee 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OK_Pin;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OK_GPIO_Port, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_GPIO_Init+0xfc>)
 8001c30:	f001 fce0 	bl	80035f4 <HAL_GPIO_Init>

}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	48000800 	.word	0x48000800
 8001c44:	48000400 	.word	0x48000400

08001c48 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <MX_I2C2_Init+0x78>)
 8001c50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x302027FF;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <MX_I2C2_Init+0x7c>)
 8001c56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c82:	480e      	ldr	r0, [pc, #56]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001c84:	f001 fe60 	bl	8003948 <HAL_I2C_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c8e:	f000 fa22 	bl	80020d6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c92:	2100      	movs	r1, #0
 8001c94:	4809      	ldr	r0, [pc, #36]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001c96:	f002 fcc7 	bl	8004628 <HAL_I2CEx_ConfigAnalogFilter>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ca0:	f000 fa19 	bl	80020d6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_I2C2_Init+0x74>)
 8001ca8:	f002 fd09 	bl	80046be <HAL_I2CEx_ConfigDigitalFilter>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cb2:	f000 fa10 	bl	80020d6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200002dc 	.word	0x200002dc
 8001cc0:	40005800 	.word	0x40005800
 8001cc4:	302027ff 	.word	0x302027ff

08001cc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0b0      	sub	sp, #192	; 0xc0
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2298      	movs	r2, #152	; 0x98
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f005 f9bf 	bl	800706c <memset>
  if(i2cHandle->Instance==I2C2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <HAL_I2C_MspInit+0xb0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d13b      	bne.n	8001d70 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fce9 	bl	80056dc <HAL_RCCEx_PeriphCLKConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d10:	f000 f9e1 	bl	80020d6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_I2C_MspInit+0xb4>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <HAL_I2C_MspInit+0xb4>)
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_I2C_MspInit+0xb4>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d34:	2312      	movs	r3, #18
 8001d36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d46:	2304      	movs	r3, #4
 8001d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d50:	4619      	mov	r1, r3
 8001d52:	480b      	ldr	r0, [pc, #44]	; (8001d80 <HAL_I2C_MspInit+0xb8>)
 8001d54:	f001 fc4e 	bl	80035f4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_I2C_MspInit+0xb4>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_I2C_MspInit+0xb4>)
 8001d5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d62:	6593      	str	r3, [r2, #88]	; 0x58
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_I2C_MspInit+0xb4>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d70:	bf00      	nop
 8001d72:	37c0      	adds	r7, #192	; 0xc0
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40005800 	.word	0x40005800
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	48000400 	.word	0x48000400

08001d84 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	461a      	mov	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	6053      	str	r3, [r2, #4]
 8001d9a:	6093      	str	r3, [r2, #8]
 8001d9c:	60d3      	str	r3, [r2, #12]
 8001d9e:	6113      	str	r3, [r2, #16]
 8001da0:	6153      	str	r3, [r2, #20]
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	331c      	adds	r3, #28
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	331c      	adds	r3, #28
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	68b8      	ldr	r0, [r7, #8]
 8001db8:	f000 ffc9 	bl	8002d4e <HAL_CAN_GetRxMessage>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
    this->status =
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	791a      	ldrb	r2, [r3, #4]
 8001ddc:	795b      	ldrb	r3, [r3, #5]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	6938      	ldr	r0, [r7, #16]
 8001e08:	f000 f96a 	bl	80020e0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj34EE5beginEv>
 8001e0c:	6178      	str	r0, [r7, #20]
 8001e0e:	6938      	ldr	r0, [r7, #16]
 8001e10:	f000 f972 	bl	80020f8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj34EE3endEv>
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d01f      	beq.n	8001e5e <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ffd2 	bl	8001dd0 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00a      	beq.n	8001e56 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	6839      	ldr	r1, [r7, #0]
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4798      	blx	r3
        return true;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e004      	b.n	8001e60 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e7db      	b.n	8001e16 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 8001e5e:	2300      	movs	r3, #0
  }
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	2200      	movs	r2, #0
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff83 	bl	8001d84 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 8001e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 8001e86:	f107 0308 	add.w	r3, r7, #8
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4803      	ldr	r0, [pc, #12]	; (8001e9c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001e8e:	f7ff ffb1 	bl	8001df4 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 8001e92:	bf00      	nop
 8001e94:	3730      	adds	r7, #48	; 0x30
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000000 	.word	0x20000000

08001ea0 <_ZN8PUTM_CAN14Can_tx_messageINS_14WheelTemp_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ebc:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3318      	adds	r3, #24
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f005 f8c1 	bl	8007050 <memcpy>
  }
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bdb0      	pop	{r4, r5, r7, pc}

08001ed8 <main>:
  */



int main(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee0:	f000 fcd1 	bl	8002886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee4:	f000 f89a 	bl	800201c <_Z18SystemClock_Configv>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8001ee8:	f7ff fe2e 	bl	8001b48 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001eec:	f7ff fda2 	bl	8001a34 <MX_CAN1_Init>
  MX_I2C2_Init();
 8001ef0:	f7ff feaa 	bl	8001c48 <MX_I2C2_Init>

  static uint16_t mlx90621Frame[66];
  static float mlx90621To[64];
  static uint8_t mlx90621ToAverage[8] = {0};

  float emissivity = 0.98f;
 8001ef4:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <main+0x124>)
 8001ef6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
  float tr = 15.0f;
 8001efa:	4b41      	ldr	r3, [pc, #260]	; (8002000 <main+0x128>)
 8001efc:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368


  HAL_Delay(5);
 8001f00:	2005      	movs	r0, #5
 8001f02:	f000 fd35 	bl	8002970 <HAL_Delay>

  int status;
  status = MLX90621_DumpEE(eeMLX90621);
 8001f06:	483f      	ldr	r0, [pc, #252]	; (8002004 <main+0x12c>)
 8001f08:	f7fe fe46 	bl	8000b98 <_Z15MLX90621_DumpEEPh>
 8001f0c:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364
  status = MLX90621_Configure(eeMLX90621);
 8001f10:	483c      	ldr	r0, [pc, #240]	; (8002004 <main+0x12c>)
 8001f12:	f7fe fe67 	bl	8000be4 <_Z18MLX90621_ConfigurePh>
 8001f16:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364
  status = MLX90621_ExtractParameters(eeMLX90621, &mlx90621);
 8001f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4838      	ldr	r0, [pc, #224]	; (8002004 <main+0x12c>)
 8001f22:	f7fe fea6 	bl	8000c72 <_Z26MLX90621_ExtractParametersPhP14paramsMLX90621>
 8001f26:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  HAL_Delay(10);
 8001f2a:	200a      	movs	r0, #10
 8001f2c:	f000 fd20 	bl	8002970 <HAL_Delay>

	  status = MLX90621_GetFrameData(mlx90621Frame);
 8001f30:	4835      	ldr	r0, [pc, #212]	; (8002008 <main+0x130>)
 8001f32:	f7fe fe41 	bl	8000bb8 <_Z21MLX90621_GetFrameDataPt>
 8001f36:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364

	  Ta = MLX90621_GetTa(mlx90621Frame, &mlx90621);
 8001f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4831      	ldr	r0, [pc, #196]	; (8002008 <main+0x130>)
 8001f42:	f7ff f833 	bl	8000fac <_Z14MLX90621_GetTaPtPK14paramsMLX90621>
 8001f46:	ed87 0ad8 	vstr	s0, [r7, #864]	; 0x360

	  MLX90621_CalculateTo(mlx90621Frame, &mlx90621, emissivity, tr, mlx90621To);
 8001f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4e:	4a2f      	ldr	r2, [pc, #188]	; (800200c <main+0x134>)
 8001f50:	edd7 0ada 	vldr	s1, [r7, #872]	; 0x368
 8001f54:	ed97 0adb 	vldr	s0, [r7, #876]	; 0x36c
 8001f58:	4619      	mov	r1, r3
 8001f5a:	482b      	ldr	r0, [pc, #172]	; (8002008 <main+0x130>)
 8001f5c:	f7fe fec6 	bl	8000cec <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf>

	  status = MLX90621_AverageTo(mlx90621To, mlx90621ToAverage);
 8001f60:	492b      	ldr	r1, [pc, #172]	; (8002010 <main+0x138>)
 8001f62:	482a      	ldr	r0, [pc, #168]	; (800200c <main+0x134>)
 8001f64:	f7ff fb98 	bl	8001698 <_Z18MLX90621_AverageToPKfPh>
 8001f68:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364

	  PUTM_CAN::WheelTemp_main tts{
		  .wheelTemp = {mlx90621ToAverage[0],
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <main+0x138>)
 8001f6e:	781a      	ldrb	r2, [r3, #0]
						mlx90621ToAverage[3],
						mlx90621ToAverage[4],
						mlx90621ToAverage[5],
						mlx90621ToAverage[6],
						mlx90621ToAverage[7]}
	  };
 8001f70:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f74:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001f78:	701a      	strb	r2, [r3, #0]
				  	  	mlx90621ToAverage[1],
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <main+0x138>)
 8001f7c:	785a      	ldrb	r2, [r3, #1]
	  };
 8001f7e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f82:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001f86:	705a      	strb	r2, [r3, #1]
						mlx90621ToAverage[2],
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <main+0x138>)
 8001f8a:	789a      	ldrb	r2, [r3, #2]
	  };
 8001f8c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f90:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001f94:	709a      	strb	r2, [r3, #2]
						mlx90621ToAverage[3],
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <main+0x138>)
 8001f98:	78da      	ldrb	r2, [r3, #3]
	  };
 8001f9a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f9e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001fa2:	70da      	strb	r2, [r3, #3]
						mlx90621ToAverage[4],
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <main+0x138>)
 8001fa6:	791a      	ldrb	r2, [r3, #4]
	  };
 8001fa8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fac:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001fb0:	711a      	strb	r2, [r3, #4]
						mlx90621ToAverage[5],
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <main+0x138>)
 8001fb4:	795a      	ldrb	r2, [r3, #5]
	  };
 8001fb6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fba:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001fbe:	715a      	strb	r2, [r3, #5]
						mlx90621ToAverage[6],
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <main+0x138>)
 8001fc2:	799a      	ldrb	r2, [r3, #6]
	  };
 8001fc4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fc8:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001fcc:	719a      	strb	r2, [r3, #6]
						mlx90621ToAverage[7]}
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <main+0x138>)
 8001fd0:	79da      	ldrb	r2, [r3, #7]
	  };
 8001fd2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fd6:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001fda:	71da      	strb	r2, [r3, #7]

	  auto tts_main_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::WheelTemp_main>(tts, PUTM_CAN::can_tx_header_WHEELTEMP_MAIN);
 8001fdc:	f107 0120 	add.w	r1, r7, #32
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <main+0x13c>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5b 	bl	8001ea0 <_ZN8PUTM_CAN14Can_tx_messageINS_14WheelTemp_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	  status = tts_main_frame.send(hcan1);
 8001fea:	463b      	mov	r3, r7
 8001fec:	490a      	ldr	r1, [pc, #40]	; (8002018 <main+0x140>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f890 	bl	8002114 <_ZN8PUTM_CAN14Can_tx_messageINS_14WheelTemp_mainEE4sendER19__CAN_HandleTypeDef>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
//	  }

	/* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

  }
 8001ffa:	e796      	b.n	8001f2a <main+0x52>
 8001ffc:	3f7ae148 	.word	0x3f7ae148
 8002000:	41700000 	.word	0x41700000
 8002004:	20000330 	.word	0x20000330
 8002008:	20000430 	.word	0x20000430
 800200c:	200004b4 	.word	0x200004b4
 8002010:	200005b4 	.word	0x200005b4
 8002014:	080070a0 	.word	0x080070a0
 8002018:	200002b4 	.word	0x200002b4

0800201c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b098      	sub	sp, #96	; 0x60
 8002020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	2248      	movs	r2, #72	; 0x48
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f005 f81e 	bl	800706c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800203e:	2000      	movs	r0, #0
 8002040:	f002 fbaa 	bl	8004798 <HAL_PWREx_ControlVoltageScaling>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002054:	f000 f83f 	bl	80020d6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002058:	2301      	movs	r3, #1
 800205a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800205c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002060:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002062:	2302      	movs	r3, #2
 8002064:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002066:	2303      	movs	r3, #3
 8002068:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 800206a:	2302      	movs	r3, #2
 800206c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 800206e:	231e      	movs	r3, #30
 8002070:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002072:	2302      	movs	r3, #2
 8002074:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002076:	2302      	movs	r3, #2
 8002078:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800207a:	2302      	movs	r3, #2
 800207c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800207e:	f107 0318 	add.w	r3, r7, #24
 8002082:	4618      	mov	r0, r3
 8002084:	f002 fc2c 	bl	80048e0 <HAL_RCC_OscConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8002098:	f000 f81d 	bl	80020d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800209c:	230f      	movs	r3, #15
 800209e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a0:	2303      	movs	r3, #3
 80020a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	2105      	movs	r1, #5
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 f88f 	bl	80051d8 <HAL_RCC_ClockConfig>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 80020ca:	f000 f804 	bl	80020d6 <Error_Handler>
  }
}
 80020ce:	bf00      	nop
 80020d0:	3760      	adds	r7, #96	; 0x60
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020da:	b672      	cpsid	i
}
 80020dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020de:	e7fe      	b.n	80020de <Error_Handler+0x8>

080020e0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj34EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f827 	bl	800213c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj34EE4dataEv>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj34EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f81b 	bl	800213c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj34EE4dataEv>
 8002106:	4603      	mov	r3, r0
 8002108:	3388      	adds	r3, #136	; 0x88
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <_ZN8PUTM_CAN14Can_tx_messageINS_14WheelTemp_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0218 	add.w	r2, r3, #24
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <_ZN8PUTM_CAN14Can_tx_messageINS_14WheelTemp_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 8002128:	6838      	ldr	r0, [r7, #0]
 800212a:	f000 fd40 	bl	8002bae <HAL_CAN_AddTxMessage>
 800212e:	4603      	mov	r3, r0
  }
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200005bc 	.word	0x200005bc

0800213c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj34EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f805 	bl	8002156 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj34EE6_S_ptrERA34_KS2_>
 800214c:	4603      	mov	r3, r0
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj34EE6_S_ptrERA34_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
        static_assert(sizeof(Device_data_type) <= 8);
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	7993      	ldrb	r3, [r2, #6]
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	1dd8      	adds	r0, r3, #7
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	331c      	adds	r3, #28
 8002188:	2203      	movs	r2, #3
 800218a:	4619      	mov	r1, r3
 800218c:	f004 ff60 	bl	8007050 <memcpy>
  }
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	7993      	ldrb	r3, [r2, #6]
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	1dd8      	adds	r0, r3, #7
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	331c      	adds	r3, #28
 80021b4:	2208      	movs	r2, #8
 80021b6:	4619      	mov	r1, r3
 80021b8:	f004 ff4a 	bl	8007050 <memcpy>
  }
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	7993      	ldrb	r3, [r2, #6]
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3307      	adds	r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	321c      	adds	r2, #28
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	601a      	str	r2, [r3, #0]
  }
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	7993      	ldrb	r3, [r2, #6]
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	1dd8      	adds	r0, r3, #7
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	331c      	adds	r3, #28
 800220c:	2206      	movs	r2, #6
 800220e:	4619      	mov	r1, r3
 8002210:	f004 ff1e 	bl	8007050 <memcpy>
  }
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	7993      	ldrb	r3, [r2, #6]
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	1dd8      	adds	r0, r3, #7
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	331c      	adds	r3, #28
 8002238:	2206      	movs	r2, #6
 800223a:	4619      	mov	r1, r3
 800223c:	f004 ff08 	bl	8007050 <memcpy>
  }
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	7993      	ldrb	r3, [r2, #6]
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	1dd8      	adds	r0, r3, #7
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	331c      	adds	r3, #28
 8002264:	2206      	movs	r2, #6
 8002266:	4619      	mov	r1, r3
 8002268:	f004 fef2 	bl	8007050 <memcpy>
  }
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	7993      	ldrb	r3, [r2, #6]
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	1dd8      	adds	r0, r3, #7
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	331c      	adds	r3, #28
 8002290:	2208      	movs	r2, #8
 8002292:	4619      	mov	r1, r3
 8002294:	f004 fedc 	bl	8007050 <memcpy>
  }
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	7993      	ldrb	r3, [r2, #6]
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3307      	adds	r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	321c      	adds	r2, #28
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	601a      	str	r2, [r3, #0]
  }
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	7993      	ldrb	r3, [r2, #6]
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1dd8      	adds	r0, r3, #7
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	331c      	adds	r3, #28
 80022e8:	2208      	movs	r2, #8
 80022ea:	4619      	mov	r1, r3
 80022ec:	f004 feb0 	bl	8007050 <memcpy>
  }
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	7993      	ldrb	r3, [r2, #6]
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	1dd8      	adds	r0, r3, #7
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	331c      	adds	r3, #28
 8002314:	2203      	movs	r2, #3
 8002316:	4619      	mov	r1, r3
 8002318:	f004 fe9a 	bl	8007050 <memcpy>
  }
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	7993      	ldrb	r3, [r2, #6]
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	1dd8      	adds	r0, r3, #7
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	331c      	adds	r3, #28
 8002340:	2203      	movs	r2, #3
 8002342:	4619      	mov	r1, r3
 8002344:	f004 fe84 	bl	8007050 <memcpy>
  }
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
    new_data = true;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	7993      	ldrb	r3, [r2, #6]
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	1dd8      	adds	r0, r3, #7
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	331c      	adds	r3, #28
 800236c:	2205      	movs	r2, #5
 800236e:	4619      	mov	r1, r3
 8002370:	f004 fe6e 	bl	8007050 <memcpy>
  }
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_ZN8PUTM_CAN6DeviceINS_18SF_PassiveElementsEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	7993      	ldrb	r3, [r2, #6]
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	1dd8      	adds	r0, r3, #7
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	331c      	adds	r3, #28
 8002398:	2208      	movs	r2, #8
 800239a:	4619      	mov	r1, r3
 800239c:	f004 fe58 	bl	8007050 <memcpy>
  }
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_ZN8PUTM_CAN6DeviceINS_9SF_SupplyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	7993      	ldrb	r3, [r2, #6]
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	1dd8      	adds	r0, r3, #7
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	331c      	adds	r3, #28
 80023c4:	2208      	movs	r2, #8
 80023c6:	4619      	mov	r1, r3
 80023c8:	f004 fe42 	bl	8007050 <memcpy>
  }
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_ZN8PUTM_CAN6DeviceINS_23SF_LegendaryDVAndSupplyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	7993      	ldrb	r3, [r2, #6]
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	1dd8      	adds	r0, r3, #7
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	331c      	adds	r3, #28
 80023f0:	2208      	movs	r2, #8
 80023f2:	4619      	mov	r1, r3
 80023f4:	f004 fe2c 	bl	8007050 <memcpy>
  }
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
    new_data = true;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	7993      	ldrb	r3, [r2, #6]
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	1dd8      	adds	r0, r3, #7
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	331c      	adds	r3, #28
 800241c:	2205      	movs	r2, #5
 800241e:	4619      	mov	r1, r3
 8002420:	f004 fe16 	bl	8007050 <memcpy>
  }
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_ZN8PUTM_CAN6DeviceINS_18Lap_timer_Lap_timeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	7993      	ldrb	r3, [r2, #6]
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1dd8      	adds	r0, r3, #7
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	331c      	adds	r3, #28
 8002448:	2205      	movs	r2, #5
 800244a:	4619      	mov	r1, r3
 800244c:	f004 fe00 	bl	8007050 <memcpy>
  }
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <_ZN8PUTM_CAN6DeviceINS_18Lap_timer_Acc_timeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	7993      	ldrb	r3, [r2, #6]
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1dd8      	adds	r0, r3, #7
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	331c      	adds	r3, #28
 8002474:	2205      	movs	r2, #5
 8002476:	4619      	mov	r1, r3
 8002478:	f004 fdea 	bl	8007050 <memcpy>
  }
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	7993      	ldrb	r3, [r2, #6]
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3307      	adds	r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	321c      	adds	r2, #28
 80024a0:	8812      	ldrh	r2, [r2, #0]
 80024a2:	b292      	uxth	r2, r2
 80024a4:	801a      	strh	r2, [r3, #0]
  }
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	7993      	ldrb	r3, [r2, #6]
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3307      	adds	r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	321c      	adds	r2, #28
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	701a      	strb	r2, [r3, #0]
  }
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <_ZN8PUTM_CAN6DeviceINS_25Dash_steering_wheel_angleEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	7993      	ldrb	r3, [r2, #6]
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3307      	adds	r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	321c      	adds	r2, #28
 80024fa:	8812      	ldrh	r2, [r2, #0]
 80024fc:	b292      	uxth	r2, r2
 80024fe:	801a      	strh	r2, [r3, #0]
  }
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	7993      	ldrb	r3, [r2, #6]
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3307      	adds	r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	321c      	adds	r2, #28
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	601a      	str	r2, [r3, #0]
  }
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	7993      	ldrb	r3, [r2, #6]
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3307      	adds	r3, #7
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	321c      	adds	r2, #28
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	701a      	strb	r2, [r3, #0]
  }
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	7993      	ldrb	r3, [r2, #6]
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3307      	adds	r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	321c      	adds	r2, #28
 8002580:	8812      	ldrh	r2, [r2, #0]
 8002582:	b292      	uxth	r2, r2
 8002584:	801a      	strh	r2, [r3, #0]
  }
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	7993      	ldrb	r3, [r2, #6]
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	1dd8      	adds	r0, r3, #7
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	331c      	adds	r3, #28
 80025ae:	2208      	movs	r2, #8
 80025b0:	4619      	mov	r1, r3
 80025b2:	f004 fd4d 	bl	8007050 <memcpy>
  }
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	7993      	ldrb	r3, [r2, #6]
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3307      	adds	r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	321c      	adds	r2, #28
 80025da:	7812      	ldrb	r2, [r2, #0]
 80025dc:	701a      	strb	r2, [r3, #0]
  }
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	7993      	ldrb	r3, [r2, #6]
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	1dd8      	adds	r0, r3, #7
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	331c      	adds	r3, #28
 8002606:	2208      	movs	r2, #8
 8002608:	4619      	mov	r1, r3
 800260a:	f004 fd21 	bl	8007050 <memcpy>
  }
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	7993      	ldrb	r3, [r2, #6]
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	1dd8      	adds	r0, r3, #7
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	331c      	adds	r3, #28
 8002632:	2206      	movs	r2, #6
 8002634:	4619      	mov	r1, r3
 8002636:	f004 fd0b 	bl	8007050 <memcpy>
  }
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	7993      	ldrb	r3, [r2, #6]
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	1dd8      	adds	r0, r3, #7
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	331c      	adds	r3, #28
 800265e:	2208      	movs	r2, #8
 8002660:	4619      	mov	r1, r3
 8002662:	f004 fcf5 	bl	8007050 <memcpy>
  }
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	7993      	ldrb	r3, [r2, #6]
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3307      	adds	r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	321c      	adds	r2, #28
 800268a:	7812      	ldrb	r2, [r2, #0]
 800268c:	701a      	strb	r2, [r3, #0]
  }
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	7993      	ldrb	r3, [r2, #6]
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	1dd8      	adds	r0, r3, #7
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	331c      	adds	r3, #28
 80026b6:	2206      	movs	r2, #6
 80026b8:	4619      	mov	r1, r3
 80026ba:	f004 fcc9 	bl	8007050 <memcpy>
  }
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
    new_data = true;
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	7993      	ldrb	r3, [r2, #6]
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	1dd8      	adds	r0, r3, #7
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	331c      	adds	r3, #28
 80026e2:	2206      	movs	r2, #6
 80026e4:	4619      	mov	r1, r3
 80026e6:	f004 fcb3 	bl	8007050 <memcpy>
  }
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
    new_data = true;
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	7993      	ldrb	r3, [r2, #6]
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	1dd8      	adds	r0, r3, #7
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	331c      	adds	r3, #28
 800270e:	2208      	movs	r2, #8
 8002710:	4619      	mov	r1, r3
 8002712:	f004 fc9d 	bl	8007050 <memcpy>
  }
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	7993      	ldrb	r3, [r2, #6]
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	1dd8      	adds	r0, r3, #7
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	331c      	adds	r3, #28
 800273a:	2205      	movs	r2, #5
 800273c:	4619      	mov	r1, r3
 800273e:	f004 fc87 	bl	8007050 <memcpy>
  }
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_MspInit+0x44>)
 8002754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002756:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <HAL_MspInit+0x44>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6613      	str	r3, [r2, #96]	; 0x60
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_MspInit+0x44>)
 8002760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_MspInit+0x44>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	4a08      	ldr	r2, [pc, #32]	; (8002790 <HAL_MspInit+0x44>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002774:	6593      	str	r3, [r2, #88]	; 0x58
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_MspInit+0x44>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000

08002794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002798:	e7fe      	b.n	8002798 <NMI_Handler+0x4>

0800279a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800279e:	e7fe      	b.n	800279e <HardFault_Handler+0x4>

080027a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <MemManage_Handler+0x4>

080027a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <BusFault_Handler+0x4>

080027ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <UsageFault_Handler+0x4>

080027b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e0:	f000 f8a6 	bl	8002930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <CAN1_RX0_IRQHandler+0x10>)
 80027ee:	f000 fbc0 	bl	8002f72 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200002b4 	.word	0x200002b4

080027fc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <CAN1_RX1_IRQHandler+0x10>)
 8002802:	f000 fbb6 	bl	8002f72 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200002b4 	.word	0x200002b4

08002810 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <SystemInit+0x20>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	4a05      	ldr	r2, [pc, #20]	; (8002830 <SystemInit+0x20>)
 800281c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800286c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002838:	f7ff ffea 	bl	8002810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800283c:	480c      	ldr	r0, [pc, #48]	; (8002870 <LoopForever+0x6>)
  ldr r1, =_edata
 800283e:	490d      	ldr	r1, [pc, #52]	; (8002874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002840:	4a0d      	ldr	r2, [pc, #52]	; (8002878 <LoopForever+0xe>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002844:	e002      	b.n	800284c <LoopCopyDataInit>

08002846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284a:	3304      	adds	r3, #4

0800284c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800284c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002850:	d3f9      	bcc.n	8002846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002854:	4c0a      	ldr	r4, [pc, #40]	; (8002880 <LoopForever+0x16>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002858:	e001      	b.n	800285e <LoopFillZerobss>

0800285a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800285c:	3204      	adds	r2, #4

0800285e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002860:	d3fb      	bcc.n	800285a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002862:	f004 fbd1 	bl	8007008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002866:	f7ff fb37 	bl	8001ed8 <main>

0800286a <LoopForever>:

LoopForever:
    b LoopForever
 800286a:	e7fe      	b.n	800286a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800286c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002874:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 8002878:	080072c8 	.word	0x080072c8
  ldr r2, =_sbss
 800287c:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 8002880:	200005c4 	.word	0x200005c4

08002884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC1_2_IRQHandler>

08002886 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002890:	2003      	movs	r0, #3
 8002892:	f000 fe6d 	bl	8003570 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002896:	200f      	movs	r0, #15
 8002898:	f000 f80e 	bl	80028b8 <HAL_InitTick>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	71fb      	strb	r3, [r7, #7]
 80028a6:	e001      	b.n	80028ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028a8:	f7ff ff50 	bl	800274c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028ac:	79fb      	ldrb	r3, [r7, #7]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028c4:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_InitTick+0x6c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d023      	beq.n	8002914 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_InitTick+0x70>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_InitTick+0x6c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028da:	fbb3 f3f1 	udiv	r3, r3, r1
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fe79 	bl	80035da <HAL_SYSTICK_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b0f      	cmp	r3, #15
 80028f2:	d809      	bhi.n	8002908 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f4:	2200      	movs	r2, #0
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028fc:	f000 fe43 	bl	8003586 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <HAL_InitTick+0x74>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e007      	b.n	8002918 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e004      	b.n	8002918 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	e001      	b.n	8002918 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000022c 	.word	0x2000022c
 8002928:	20000224 	.word	0x20000224
 800292c:	20000228 	.word	0x20000228

08002930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_IncTick+0x20>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_IncTick+0x24>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4413      	add	r3, r2
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <HAL_IncTick+0x24>)
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	2000022c 	.word	0x2000022c
 8002954:	200005c0 	.word	0x200005c0

08002958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return uwTick;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_GetTick+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	200005c0 	.word	0x200005c0

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff ffee 	bl	8002958 <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002988:	d005      	beq.n	8002996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_Delay+0x44>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002996:	bf00      	nop
 8002998:	f7ff ffde 	bl	8002958 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d8f7      	bhi.n	8002998 <HAL_Delay+0x28>
  {
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	2000022c 	.word	0x2000022c

080029b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0ed      	b.n	8002ba6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff f862 	bl	8001aa0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029ec:	f7ff ffb4 	bl	8002958 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029f2:	e012      	b.n	8002a1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029f4:	f7ff ffb0 	bl	8002958 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b0a      	cmp	r3, #10
 8002a00:	d90b      	bls.n	8002a1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2205      	movs	r2, #5
 8002a12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0c5      	b.n	8002ba6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0e5      	beq.n	80029f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0202 	bic.w	r2, r2, #2
 8002a36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a38:	f7ff ff8e 	bl	8002958 <HAL_GetTick>
 8002a3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a3e:	e012      	b.n	8002a66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a40:	f7ff ff8a 	bl	8002958 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b0a      	cmp	r3, #10
 8002a4c:	d90b      	bls.n	8002a66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2205      	movs	r2, #5
 8002a5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e09f      	b.n	8002ba6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e5      	bne.n	8002a40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7e1b      	ldrb	r3, [r3, #24]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d108      	bne.n	8002a8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e007      	b.n	8002a9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7e5b      	ldrb	r3, [r3, #25]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d108      	bne.n	8002ab8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e007      	b.n	8002ac8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7e9b      	ldrb	r3, [r3, #26]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d108      	bne.n	8002ae2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0220 	orr.w	r2, r2, #32
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e007      	b.n	8002af2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0220 	bic.w	r2, r2, #32
 8002af0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7edb      	ldrb	r3, [r3, #27]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d108      	bne.n	8002b0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0210 	bic.w	r2, r2, #16
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e007      	b.n	8002b1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0210 	orr.w	r2, r2, #16
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7f1b      	ldrb	r3, [r3, #28]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d108      	bne.n	8002b36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0208 	orr.w	r2, r2, #8
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e007      	b.n	8002b46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0208 	bic.w	r2, r2, #8
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7f5b      	ldrb	r3, [r3, #29]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d108      	bne.n	8002b60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0204 	orr.w	r2, r2, #4
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e007      	b.n	8002b70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0204 	bic.w	r2, r2, #4
 8002b6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	ea42 0103 	orr.w	r1, r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	1e5a      	subs	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b089      	sub	sp, #36	; 0x24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bcc:	7ffb      	ldrb	r3, [r7, #31]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d003      	beq.n	8002bda <HAL_CAN_AddTxMessage+0x2c>
 8002bd2:	7ffb      	ldrb	r3, [r7, #31]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	f040 80ad 	bne.w	8002d34 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8095 	beq.w	8002d24 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	0e1b      	lsrs	r3, r3, #24
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c04:	2201      	movs	r2, #1
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10d      	bne.n	8002c32 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c20:	68f9      	ldr	r1, [r7, #12]
 8002c22:	6809      	ldr	r1, [r1, #0]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3318      	adds	r3, #24
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	440b      	add	r3, r1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e00f      	b.n	8002c52 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c42:	68f9      	ldr	r1, [r7, #12]
 8002c44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3318      	adds	r3, #24
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	440b      	add	r3, r1
 8002c50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3318      	adds	r3, #24
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	440b      	add	r3, r1
 8002c62:	3304      	adds	r3, #4
 8002c64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	7d1b      	ldrb	r3, [r3, #20]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d111      	bne.n	8002c92 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	3318      	adds	r3, #24
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4413      	add	r3, r2
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	6811      	ldr	r1, [r2, #0]
 8002c82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	3318      	adds	r3, #24
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3304      	adds	r3, #4
 8002c90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3307      	adds	r3, #7
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	061a      	lsls	r2, r3, #24
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3306      	adds	r3, #6
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3305      	adds	r3, #5
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	4313      	orrs	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	3204      	adds	r2, #4
 8002cb2:	7812      	ldrb	r2, [r2, #0]
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	6811      	ldr	r1, [r2, #0]
 8002cba:	ea43 0200 	orr.w	r2, r3, r0
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002cc8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3303      	adds	r3, #3
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	061a      	lsls	r2, r3, #24
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	7812      	ldrb	r2, [r2, #0]
 8002cea:	4610      	mov	r0, r2
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	6811      	ldr	r1, [r2, #0]
 8002cf0:	ea43 0200 	orr.w	r2, r3, r0
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002cfe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3318      	adds	r3, #24
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	4413      	add	r3, r2
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	6811      	ldr	r1, [r2, #0]
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3318      	adds	r3, #24
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	440b      	add	r3, r1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e00e      	b.n	8002d42 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e006      	b.n	8002d42 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b087      	sub	sp, #28
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d62:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d003      	beq.n	8002d72 <HAL_CAN_GetRxMessage+0x24>
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	f040 80f3 	bne.w	8002f58 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10e      	bne.n	8002d96 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d116      	bne.n	8002db4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0e7      	b.n	8002f66 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d107      	bne.n	8002db4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0d8      	b.n	8002f66 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	331b      	adds	r3, #27
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	4413      	add	r3, r2
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0204 	and.w	r2, r3, #4
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10c      	bne.n	8002dec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	331b      	adds	r3, #27
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	4413      	add	r3, r2
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0d5b      	lsrs	r3, r3, #21
 8002de2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	e00b      	b.n	8002e04 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	331b      	adds	r3, #27
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	08db      	lsrs	r3, r3, #3
 8002dfc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	331b      	adds	r3, #27
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	4413      	add	r3, r2
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0202 	and.w	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	331b      	adds	r3, #27
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	4413      	add	r3, r2
 8002e26:	3304      	adds	r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 020f 	and.w	r2, r3, #15
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	331b      	adds	r3, #27
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3304      	adds	r3, #4
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	331b      	adds	r3, #27
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	4413      	add	r3, r2
 8002e56:	3304      	adds	r3, #4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	0c1b      	lsrs	r3, r3, #16
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0a1a      	lsrs	r2, r3, #8
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	0c1a      	lsrs	r2, r3, #16
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0e1a      	lsrs	r2, r3, #24
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	3303      	adds	r3, #3
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0a1a      	lsrs	r2, r3, #8
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	3305      	adds	r3, #5
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0c1a      	lsrs	r2, r3, #16
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	3306      	adds	r3, #6
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	0e1a      	lsrs	r2, r3, #24
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	3307      	adds	r3, #7
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0220 	orr.w	r2, r2, #32
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	e007      	b.n	8002f54 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0220 	orr.w	r2, r2, #32
 8002f52:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e006      	b.n	8002f66 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b08a      	sub	sp, #40	; 0x28
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d07c      	beq.n	80030b2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d023      	beq.n	800300a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f983 	bl	80032e0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002fda:	e016      	b.n	800300a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
 8002fee:	e00c      	b.n	800300a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	e002      	b.n	800300a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f989 	bl	800331c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d024      	beq.n	800305e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f963 	bl	80032f4 <HAL_CAN_TxMailbox1CompleteCallback>
 800302e:	e016      	b.n	800305e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
 8003042:	e00c      	b.n	800305e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	e002      	b.n	800305e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f969 	bl	8003330 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d024      	beq.n	80030b2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003070:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f943 	bl	8003308 <HAL_CAN_TxMailbox2CompleteCallback>
 8003082:	e016      	b.n	80030b2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
 8003096:	e00c      	b.n	80030b2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d004      	beq.n	80030ac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
 80030aa:	e002      	b.n	80030b2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f949 	bl	8003344 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00c      	beq.n	80030d6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2210      	movs	r2, #16
 80030d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00b      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d006      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2208      	movs	r2, #8
 80030f0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f930 	bl	8003358 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7fe fea9 	bl	8001e68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00c      	beq.n	800313a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003130:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2210      	movs	r2, #16
 8003138:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d006      	beq.n	800315c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2208      	movs	r2, #8
 8003154:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f912 	bl	8003380 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f8f9 	bl	800336c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00b      	beq.n	800319c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2210      	movs	r2, #16
 8003194:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8fc 	bl	8003394 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2208      	movs	r2, #8
 80031b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f8f5 	bl	80033a8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d07b      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d072      	beq.n	80032b8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800322c:	2b00      	cmp	r3, #0
 800322e:	d043      	beq.n	80032b8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03e      	beq.n	80032b8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003240:	2b60      	cmp	r3, #96	; 0x60
 8003242:	d02b      	beq.n	800329c <HAL_CAN_IRQHandler+0x32a>
 8003244:	2b60      	cmp	r3, #96	; 0x60
 8003246:	d82e      	bhi.n	80032a6 <HAL_CAN_IRQHandler+0x334>
 8003248:	2b50      	cmp	r3, #80	; 0x50
 800324a:	d022      	beq.n	8003292 <HAL_CAN_IRQHandler+0x320>
 800324c:	2b50      	cmp	r3, #80	; 0x50
 800324e:	d82a      	bhi.n	80032a6 <HAL_CAN_IRQHandler+0x334>
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	d019      	beq.n	8003288 <HAL_CAN_IRQHandler+0x316>
 8003254:	2b40      	cmp	r3, #64	; 0x40
 8003256:	d826      	bhi.n	80032a6 <HAL_CAN_IRQHandler+0x334>
 8003258:	2b30      	cmp	r3, #48	; 0x30
 800325a:	d010      	beq.n	800327e <HAL_CAN_IRQHandler+0x30c>
 800325c:	2b30      	cmp	r3, #48	; 0x30
 800325e:	d822      	bhi.n	80032a6 <HAL_CAN_IRQHandler+0x334>
 8003260:	2b10      	cmp	r3, #16
 8003262:	d002      	beq.n	800326a <HAL_CAN_IRQHandler+0x2f8>
 8003264:	2b20      	cmp	r3, #32
 8003266:	d005      	beq.n	8003274 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003268:	e01d      	b.n	80032a6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	f043 0308 	orr.w	r3, r3, #8
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003272:	e019      	b.n	80032a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	f043 0310 	orr.w	r3, r3, #16
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800327c:	e014      	b.n	80032a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	f043 0320 	orr.w	r3, r3, #32
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003286:	e00f      	b.n	80032a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003290:	e00a      	b.n	80032a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800329a:	e005      	b.n	80032a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80032a4:	e000      	b.n	80032a8 <HAL_CAN_IRQHandler+0x336>
            break;
 80032a6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032b6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2204      	movs	r2, #4
 80032be:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f872 	bl	80033bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80032d8:	bf00      	nop
 80032da:	3728      	adds	r7, #40	; 0x28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003402:	4a04      	ldr	r2, [pc, #16]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	60d3      	str	r3, [r2, #12]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4907      	ldr	r1, [pc, #28]	; (800346c <__NVIC_EnableIRQ+0x38>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	; (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	; (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
         );
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800353c:	d301      	bcc.n	8003542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353e:	2301      	movs	r3, #1
 8003540:	e00f      	b.n	8003562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003542:	4a0a      	ldr	r2, [pc, #40]	; (800356c <SysTick_Config+0x40>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800354a:	210f      	movs	r1, #15
 800354c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003550:	f7ff ff8e 	bl	8003470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <SysTick_Config+0x40>)
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800355a:	4b04      	ldr	r3, [pc, #16]	; (800356c <SysTick_Config+0x40>)
 800355c:	2207      	movs	r2, #7
 800355e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	e000e010 	.word	0xe000e010

08003570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff29 	bl	80033d0 <__NVIC_SetPriorityGrouping>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003598:	f7ff ff3e 	bl	8003418 <__NVIC_GetPriorityGrouping>
 800359c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	6978      	ldr	r0, [r7, #20]
 80035a4:	f7ff ff8e 	bl	80034c4 <NVIC_EncodePriority>
 80035a8:	4602      	mov	r2, r0
 80035aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff5d 	bl	8003470 <__NVIC_SetPriority>
}
 80035b6:	bf00      	nop
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff31 	bl	8003434 <__NVIC_EnableIRQ>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ffa2 	bl	800352c <SysTick_Config>
 80035e8:	4603      	mov	r3, r0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003602:	e166      	b.n	80038d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2101      	movs	r1, #1
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8158 	beq.w	80038cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d005      	beq.n	8003634 <HAL_GPIO_Init+0x40>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d130      	bne.n	8003696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800366a:	2201      	movs	r2, #1
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4013      	ands	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0201 	and.w	r2, r3, #1
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d017      	beq.n	80036d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2203      	movs	r2, #3
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d123      	bne.n	8003726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	08da      	lsrs	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	220f      	movs	r2, #15
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	08da      	lsrs	r2, r3, #3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3208      	adds	r2, #8
 8003720:	6939      	ldr	r1, [r7, #16]
 8003722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0203 	and.w	r2, r3, #3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80b2 	beq.w	80038cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003768:	4b61      	ldr	r3, [pc, #388]	; (80038f0 <HAL_GPIO_Init+0x2fc>)
 800376a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376c:	4a60      	ldr	r2, [pc, #384]	; (80038f0 <HAL_GPIO_Init+0x2fc>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6613      	str	r3, [r2, #96]	; 0x60
 8003774:	4b5e      	ldr	r3, [pc, #376]	; (80038f0 <HAL_GPIO_Init+0x2fc>)
 8003776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003780:	4a5c      	ldr	r2, [pc, #368]	; (80038f4 <HAL_GPIO_Init+0x300>)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	089b      	lsrs	r3, r3, #2
 8003786:	3302      	adds	r3, #2
 8003788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	220f      	movs	r2, #15
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037aa:	d02b      	beq.n	8003804 <HAL_GPIO_Init+0x210>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a52      	ldr	r2, [pc, #328]	; (80038f8 <HAL_GPIO_Init+0x304>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d025      	beq.n	8003800 <HAL_GPIO_Init+0x20c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a51      	ldr	r2, [pc, #324]	; (80038fc <HAL_GPIO_Init+0x308>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d01f      	beq.n	80037fc <HAL_GPIO_Init+0x208>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a50      	ldr	r2, [pc, #320]	; (8003900 <HAL_GPIO_Init+0x30c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d019      	beq.n	80037f8 <HAL_GPIO_Init+0x204>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a4f      	ldr	r2, [pc, #316]	; (8003904 <HAL_GPIO_Init+0x310>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <HAL_GPIO_Init+0x200>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a4e      	ldr	r2, [pc, #312]	; (8003908 <HAL_GPIO_Init+0x314>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00d      	beq.n	80037f0 <HAL_GPIO_Init+0x1fc>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a4d      	ldr	r2, [pc, #308]	; (800390c <HAL_GPIO_Init+0x318>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d007      	beq.n	80037ec <HAL_GPIO_Init+0x1f8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a4c      	ldr	r2, [pc, #304]	; (8003910 <HAL_GPIO_Init+0x31c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d101      	bne.n	80037e8 <HAL_GPIO_Init+0x1f4>
 80037e4:	2307      	movs	r3, #7
 80037e6:	e00e      	b.n	8003806 <HAL_GPIO_Init+0x212>
 80037e8:	2308      	movs	r3, #8
 80037ea:	e00c      	b.n	8003806 <HAL_GPIO_Init+0x212>
 80037ec:	2306      	movs	r3, #6
 80037ee:	e00a      	b.n	8003806 <HAL_GPIO_Init+0x212>
 80037f0:	2305      	movs	r3, #5
 80037f2:	e008      	b.n	8003806 <HAL_GPIO_Init+0x212>
 80037f4:	2304      	movs	r3, #4
 80037f6:	e006      	b.n	8003806 <HAL_GPIO_Init+0x212>
 80037f8:	2303      	movs	r3, #3
 80037fa:	e004      	b.n	8003806 <HAL_GPIO_Init+0x212>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e002      	b.n	8003806 <HAL_GPIO_Init+0x212>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_GPIO_Init+0x212>
 8003804:	2300      	movs	r3, #0
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	f002 0203 	and.w	r2, r2, #3
 800380c:	0092      	lsls	r2, r2, #2
 800380e:	4093      	lsls	r3, r2
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003816:	4937      	ldr	r1, [pc, #220]	; (80038f4 <HAL_GPIO_Init+0x300>)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	3302      	adds	r3, #2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003824:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_GPIO_Init+0x320>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	43db      	mvns	r3, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003848:	4a32      	ldr	r2, [pc, #200]	; (8003914 <HAL_GPIO_Init+0x320>)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800384e:	4b31      	ldr	r3, [pc, #196]	; (8003914 <HAL_GPIO_Init+0x320>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003872:	4a28      	ldr	r2, [pc, #160]	; (8003914 <HAL_GPIO_Init+0x320>)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003878:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_GPIO_Init+0x320>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800389c:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <HAL_GPIO_Init+0x320>)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <HAL_GPIO_Init+0x320>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4013      	ands	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038c6:	4a13      	ldr	r2, [pc, #76]	; (8003914 <HAL_GPIO_Init+0x320>)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	3301      	adds	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f47f ae91 	bne.w	8003604 <HAL_GPIO_Init+0x10>
  }
}
 80038e2:	bf00      	nop
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40010000 	.word	0x40010000
 80038f8:	48000400 	.word	0x48000400
 80038fc:	48000800 	.word	0x48000800
 8003900:	48000c00 	.word	0x48000c00
 8003904:	48001000 	.word	0x48001000
 8003908:	48001400 	.word	0x48001400
 800390c:	48001800 	.word	0x48001800
 8003910:	48001c00 	.word	0x48001c00
 8003914:	40010400 	.word	0x40010400

08003918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
 8003924:	4613      	mov	r3, r2
 8003926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003928:	787b      	ldrb	r3, [r7, #1]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003934:	e002      	b.n	800393c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e081      	b.n	8003a5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fe f9aa 	bl	8001cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2224      	movs	r2, #36	; 0x24
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	e006      	b.n	80039d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d104      	bne.n	80039e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69d9      	ldr	r1, [r3, #28]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	461a      	mov	r2, r3
 8003a74:	460b      	mov	r3, r1
 8003a76:	817b      	strh	r3, [r7, #10]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	f040 80da 	bne.w	8003c3e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_I2C_Master_Transmit+0x30>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e0d3      	b.n	8003c40 <HAL_I2C_Master_Transmit+0x1d8>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003aa0:	f7fe ff5a 	bl	8002958 <HAL_GetTick>
 8003aa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2319      	movs	r3, #25
 8003aac:	2201      	movs	r2, #1
 8003aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fa5e 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e0be      	b.n	8003c40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2221      	movs	r2, #33	; 0x21
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2210      	movs	r2, #16
 8003ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	893a      	ldrh	r2, [r7, #8]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2bff      	cmp	r3, #255	; 0xff
 8003af2:	d90e      	bls.n	8003b12 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	8979      	ldrh	r1, [r7, #10]
 8003b02:	4b51      	ldr	r3, [pc, #324]	; (8003c48 <HAL_I2C_Master_Transmit+0x1e0>)
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 fbda 	bl	80042c4 <I2C_TransferConfig>
 8003b10:	e06c      	b.n	8003bec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	8979      	ldrh	r1, [r7, #10]
 8003b24:	4b48      	ldr	r3, [pc, #288]	; (8003c48 <HAL_I2C_Master_Transmit+0x1e0>)
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fbc9 	bl	80042c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003b32:	e05b      	b.n	8003bec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	6a39      	ldr	r1, [r7, #32]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fa5b 	bl	8003ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e07b      	b.n	8003c40 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d034      	beq.n	8003bec <HAL_I2C_Master_Transmit+0x184>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d130      	bne.n	8003bec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	2200      	movs	r2, #0
 8003b92:	2180      	movs	r1, #128	; 0x80
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f9ed 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e04d      	b.n	8003c40 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2bff      	cmp	r3, #255	; 0xff
 8003bac:	d90e      	bls.n	8003bcc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	22ff      	movs	r2, #255	; 0xff
 8003bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	8979      	ldrh	r1, [r7, #10]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 fb7d 	bl	80042c4 <I2C_TransferConfig>
 8003bca:	e00f      	b.n	8003bec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	8979      	ldrh	r1, [r7, #10]
 8003bde:	2300      	movs	r3, #0
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fb6c 	bl	80042c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d19e      	bne.n	8003b34 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	6a39      	ldr	r1, [r7, #32]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 fa3a 	bl	8004074 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e01a      	b.n	8003c40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_I2C_Master_Transmit+0x1e4>)
 8003c1e:	400b      	ands	r3, r1
 8003c20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e000      	b.n	8003c40 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003c3e:	2302      	movs	r3, #2
  }
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	80002000 	.word	0x80002000
 8003c4c:	fe00e800 	.word	0xfe00e800

08003c50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	817b      	strh	r3, [r7, #10]
 8003c62:	460b      	mov	r3, r1
 8003c64:	813b      	strh	r3, [r7, #8]
 8003c66:	4613      	mov	r3, r2
 8003c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	f040 80fd 	bne.w	8003e72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_I2C_Mem_Read+0x34>
 8003c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0f1      	b.n	8003e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_I2C_Mem_Read+0x4e>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e0ea      	b.n	8003e74 <HAL_I2C_Mem_Read+0x224>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ca6:	f7fe fe57 	bl	8002958 <HAL_GetTick>
 8003caa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2319      	movs	r3, #25
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f95b 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0d5      	b.n	8003e74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2222      	movs	r2, #34	; 0x22
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2240      	movs	r2, #64	; 0x40
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a3a      	ldr	r2, [r7, #32]
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cf0:	88f8      	ldrh	r0, [r7, #6]
 8003cf2:	893a      	ldrh	r2, [r7, #8]
 8003cf4:	8979      	ldrh	r1, [r7, #10]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	9301      	str	r3, [sp, #4]
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	4603      	mov	r3, r0
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f8bf 	bl	8003e84 <I2C_RequestMemoryRead>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0ad      	b.n	8003e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2bff      	cmp	r3, #255	; 0xff
 8003d20:	d90e      	bls.n	8003d40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	22ff      	movs	r2, #255	; 0xff
 8003d26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	8979      	ldrh	r1, [r7, #10]
 8003d30:	4b52      	ldr	r3, [pc, #328]	; (8003e7c <HAL_I2C_Mem_Read+0x22c>)
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 fac3 	bl	80042c4 <I2C_TransferConfig>
 8003d3e:	e00f      	b.n	8003d60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	8979      	ldrh	r1, [r7, #10]
 8003d52:	4b4a      	ldr	r3, [pc, #296]	; (8003e7c <HAL_I2C_Mem_Read+0x22c>)
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fab2 	bl	80042c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	2200      	movs	r2, #0
 8003d68:	2104      	movs	r1, #4
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f902 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e07c      	b.n	8003e74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d034      	beq.n	8003e20 <HAL_I2C_Mem_Read+0x1d0>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d130      	bne.n	8003e20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f8d3 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e04d      	b.n	8003e74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2bff      	cmp	r3, #255	; 0xff
 8003de0:	d90e      	bls.n	8003e00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	22ff      	movs	r2, #255	; 0xff
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	8979      	ldrh	r1, [r7, #10]
 8003df0:	2300      	movs	r3, #0
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fa63 	bl	80042c4 <I2C_TransferConfig>
 8003dfe:	e00f      	b.n	8003e20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	8979      	ldrh	r1, [r7, #10]
 8003e12:	2300      	movs	r3, #0
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fa52 	bl	80042c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d19a      	bne.n	8003d60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f920 	bl	8004074 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e01a      	b.n	8003e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2220      	movs	r2, #32
 8003e44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_I2C_Mem_Read+0x230>)
 8003e52:	400b      	ands	r3, r1
 8003e54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e000      	b.n	8003e74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
  }
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	80002400 	.word	0x80002400
 8003e80:	fe00e800 	.word	0xfe00e800

08003e84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	461a      	mov	r2, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	817b      	strh	r3, [r7, #10]
 8003e96:	460b      	mov	r3, r1
 8003e98:	813b      	strh	r3, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	8979      	ldrh	r1, [r7, #10]
 8003ea4:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <I2C_RequestMemoryRead+0xa4>)
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fa0a 	bl	80042c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	69b9      	ldr	r1, [r7, #24]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f89d 	bl	8003ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e02c      	b.n	8003f1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003eca:	893b      	ldrh	r3, [r7, #8]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ed4:	e015      	b.n	8003f02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ed6:	893b      	ldrh	r3, [r7, #8]
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f883 	bl	8003ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e012      	b.n	8003f1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef8:	893b      	ldrh	r3, [r7, #8]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2140      	movs	r1, #64	; 0x40
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f831 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	80002000 	.word	0x80002000

08003f2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d103      	bne.n	8003f4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2200      	movs	r2, #0
 8003f48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d007      	beq.n	8003f68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	619a      	str	r2, [r3, #24]
  }
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f84:	e022      	b.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f8c:	d01e      	beq.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8e:	f7fe fce3 	bl	8002958 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d113      	bne.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e00f      	b.n	8003fec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d0cd      	beq.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004000:	e02c      	b.n	800405c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f870 	bl	80040ec <I2C_IsErrorOccurred>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e02a      	b.n	800406c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800401c:	d01e      	beq.n	800405c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7fe fc9b 	bl	8002958 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d113      	bne.n	800405c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	f043 0220 	orr.w	r2, r3, #32
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e007      	b.n	800406c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d1cb      	bne.n	8004002 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004080:	e028      	b.n	80040d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f830 	bl	80040ec <I2C_IsErrorOccurred>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e026      	b.n	80040e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fe fc5f 	bl	8002958 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d113      	bne.n	80040d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	f043 0220 	orr.w	r2, r3, #32
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e007      	b.n	80040e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d1cf      	bne.n	8004082 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b00      	cmp	r3, #0
 8004116:	d075      	beq.n	8004204 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2210      	movs	r2, #16
 800411e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004120:	e056      	b.n	80041d0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004128:	d052      	beq.n	80041d0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800412a:	f7fe fc15 	bl	8002958 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <I2C_IsErrorOccurred+0x54>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d147      	bne.n	80041d0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004152:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800415e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004162:	d12e      	bne.n	80041c2 <I2C_IsErrorOccurred+0xd6>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800416a:	d02a      	beq.n	80041c2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	2b20      	cmp	r3, #32
 8004170:	d027      	beq.n	80041c2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004180:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004182:	f7fe fbe9 	bl	8002958 <HAL_GetTick>
 8004186:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004188:	e01b      	b.n	80041c2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800418a:	f7fe fbe5 	bl	8002958 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b19      	cmp	r3, #25
 8004196:	d914      	bls.n	80041c2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d1dc      	bne.n	800418a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d003      	beq.n	80041e6 <I2C_IsErrorOccurred+0xfa>
 80041de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d09d      	beq.n	8004122 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2220      	movs	r2, #32
 80041f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	f043 0304 	orr.w	r3, r3, #4
 80041fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004226:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	f043 0308 	orr.w	r3, r3, #8
 800423e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004248:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800426a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01c      	beq.n	80042b4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fe56 	bl	8003f2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <I2C_IsErrorOccurred+0x1d4>)
 800428c:	400b      	ands	r3, r1
 800428e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	431a      	orrs	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80042b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3728      	adds	r7, #40	; 0x28
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	fe00e800 	.word	0xfe00e800

080042c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	817b      	strh	r3, [r7, #10]
 80042d2:	4613      	mov	r3, r2
 80042d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042d6:	897b      	ldrh	r3, [r7, #10]
 80042d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042dc:	7a7b      	ldrb	r3, [r7, #9]
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	0d5b      	lsrs	r3, r3, #21
 80042fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <I2C_TransferConfig+0x60>)
 8004304:	430b      	orrs	r3, r1
 8004306:	43db      	mvns	r3, r3
 8004308:	ea02 0103 	and.w	r1, r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	03ff63ff 	.word	0x03ff63ff

08004328 <Custom_HAL_I2C_Mem_Read>:
HAL_StatusTypeDef Custom_HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,

										  uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead,

										  uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af04      	add	r7, sp, #16
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	4608      	mov	r0, r1
 8004332:	4611      	mov	r1, r2
 8004334:	461a      	mov	r2, r3
 8004336:	4603      	mov	r3, r0
 8004338:	807b      	strh	r3, [r7, #2]
 800433a:	460b      	mov	r3, r1
 800433c:	707b      	strb	r3, [r7, #1]
 800433e:	4613      	mov	r3, r2
 8004340:	703b      	strb	r3, [r7, #0]
  uint32_t tickstart;

  /* Check the parameters */
  //assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b20      	cmp	r3, #32
 800434c:	f040 8101 	bne.w	8004552 <Custom_HAL_I2C_Mem_Read+0x22a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <Custom_HAL_I2C_Mem_Read+0x34>
 8004356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	d105      	bne.n	8004368 <Custom_HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004362:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0f5      	b.n	8004554 <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <Custom_HAL_I2C_Mem_Read+0x4e>
 8004372:	2302      	movs	r3, #2
 8004374:	e0ee      	b.n	8004554 <Custom_HAL_I2C_Mem_Read+0x22c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800437e:	f7fe faeb 	bl	8002958 <HAL_GetTick>
 8004382:	60f8      	str	r0, [r7, #12]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2319      	movs	r3, #25
 800438a:	2201      	movs	r2, #1
 800438c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fdef 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <Custom_HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0d9      	b.n	8004554 <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2222      	movs	r2, #34	; 0x22
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2240      	movs	r2, #64	; 0x40
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(Custom_I2C_RequestMemoryRead(hi2c, DevAddress,
 80043c8:	7838      	ldrb	r0, [r7, #0]
 80043ca:	787a      	ldrb	r2, [r7, #1]
 80043cc:	8879      	ldrh	r1, [r7, #2]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	9303      	str	r3, [sp, #12]
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	9302      	str	r3, [sp, #8]
 80043d6:	7f3b      	ldrb	r3, [r7, #28]
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	7e3b      	ldrb	r3, [r7, #24]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	4603      	mov	r3, r0
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8bf 	bl	8004564 <Custom_I2C_RequestMemoryRead>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <Custom_HAL_I2C_Mem_Read+0xd0>
    								command, startAddress,
									addressStep, nMemAddressRead,
									Timeout, tickstart) != HAL_OK)
    {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0ad      	b.n	8004554 <Custom_HAL_I2C_Mem_Read+0x22c>
    }


    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2bff      	cmp	r3, #255	; 0xff
 8004400:	d90e      	bls.n	8004420 <Custom_HAL_I2C_Mem_Read+0xf8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	22ff      	movs	r2, #255	; 0xff
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440c:	b2da      	uxtb	r2, r3
 800440e:	8879      	ldrh	r1, [r7, #2]
 8004410:	4b52      	ldr	r3, [pc, #328]	; (800455c <Custom_HAL_I2C_Mem_Read+0x234>)
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ff53 	bl	80042c4 <I2C_TransferConfig>
 800441e:	e00f      	b.n	8004440 <Custom_HAL_I2C_Mem_Read+0x118>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	b2da      	uxtb	r2, r3
 8004430:	8879      	ldrh	r1, [r7, #2]
 8004432:	4b4a      	ldr	r3, [pc, #296]	; (800455c <Custom_HAL_I2C_Mem_Read+0x234>)
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff ff42 	bl	80042c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	2200      	movs	r2, #0
 8004448:	2104      	movs	r1, #4
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fd92 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <Custom_HAL_I2C_Mem_Read+0x132>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e07c      	b.n	8004554 <Custom_HAL_I2C_Mem_Read+0x22c>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d034      	beq.n	8004500 <Custom_HAL_I2C_Mem_Read+0x1d8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449a:	2b00      	cmp	r3, #0
 800449c:	d130      	bne.n	8004500 <Custom_HAL_I2C_Mem_Read+0x1d8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	2200      	movs	r2, #0
 80044a6:	2180      	movs	r1, #128	; 0x80
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fd63 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <Custom_HAL_I2C_Mem_Read+0x190>
        {
          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e04d      	b.n	8004554 <Custom_HAL_I2C_Mem_Read+0x22c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2bff      	cmp	r3, #255	; 0xff
 80044c0:	d90e      	bls.n	80044e0 <Custom_HAL_I2C_Mem_Read+0x1b8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	22ff      	movs	r2, #255	; 0xff
 80044c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	8879      	ldrh	r1, [r7, #2]
 80044d0:	2300      	movs	r3, #0
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fef3 	bl	80042c4 <I2C_TransferConfig>
 80044de:	e00f      	b.n	8004500 <Custom_HAL_I2C_Mem_Read+0x1d8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	8879      	ldrh	r1, [r7, #2]
 80044f2:	2300      	movs	r3, #0
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fee2 	bl	80042c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d19a      	bne.n	8004440 <Custom_HAL_I2C_Mem_Read+0x118>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff fdb0 	bl	8004074 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <Custom_HAL_I2C_Mem_Read+0x1f6>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e01a      	b.n	8004554 <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2220      	movs	r2, #32
 8004524:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6859      	ldr	r1, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <Custom_HAL_I2C_Mem_Read+0x238>)
 8004532:	400b      	ands	r3, r1
 8004534:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <Custom_HAL_I2C_Mem_Read+0x22c>
  }
  else
  {
    return HAL_BUSY;
 8004552:	2302      	movs	r3, #2
  }
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	80002400 	.word	0x80002400
 8004560:	fe00e800 	.word	0xfe00e800

08004564 <Custom_I2C_RequestMemoryRead>:

static HAL_StatusTypeDef Custom_I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead,
											   uint32_t Timeout, uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af02      	add	r7, sp, #8
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	4608      	mov	r0, r1
 800456e:	4611      	mov	r1, r2
 8004570:	461a      	mov	r2, r3
 8004572:	4603      	mov	r3, r0
 8004574:	807b      	strh	r3, [r7, #2]
 8004576:	460b      	mov	r3, r1
 8004578:	707b      	strb	r3, [r7, #1]
 800457a:	4613      	mov	r3, r2
 800457c:	703b      	strb	r3, [r7, #0]

									//The_num_of_bytes
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)4, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800457e:	8879      	ldrh	r1, [r7, #2]
 8004580:	4b28      	ldr	r3, [pc, #160]	; (8004624 <Custom_I2C_RequestMemoryRead+0xc0>)
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2300      	movs	r3, #0
 8004586:	2204      	movs	r2, #4
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff fe9b 	bl	80042c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	69b9      	ldr	r1, [r7, #24]
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fd2e 	bl	8003ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <Custom_I2C_RequestMemoryRead+0x3e>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e03b      	b.n	800461a <Custom_I2C_RequestMemoryRead+0xb6>
  }

// "mem_write"
  hi2c->Instance->TXDR = command;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	787a      	ldrb	r2, [r7, #1]
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	69b9      	ldr	r1, [r7, #24]
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff fd20 	bl	8003ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <Custom_I2C_RequestMemoryRead+0x5a>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e02d      	b.n	800461a <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = startAddress;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	783a      	ldrb	r2, [r7, #0]
 80045c4:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	69b9      	ldr	r1, [r7, #24]
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff fd12 	bl	8003ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <Custom_I2C_RequestMemoryRead+0x76>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e01f      	b.n	800461a <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = addressStep;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	7c3a      	ldrb	r2, [r7, #16]
 80045e0:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	69b9      	ldr	r1, [r7, #24]
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fd04 	bl	8003ff4 <I2C_WaitOnTXISFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <Custom_I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e011      	b.n	800461a <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = nMemAddressRead;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	7d3a      	ldrb	r2, [r7, #20]
 80045fc:	629a      	str	r2, [r3, #40]	; 0x28
//

  /* Wait until [Transfer Complete] flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2200      	movs	r2, #0
 8004606:	2140      	movs	r1, #64	; 0x40
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff fcb3 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <Custom_I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <Custom_I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	80002000 	.word	0x80002000

08004628 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b20      	cmp	r3, #32
 800463c:	d138      	bne.n	80046b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004648:	2302      	movs	r3, #2
 800464a:	e032      	b.n	80046b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	; 0x24
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800467a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6819      	ldr	r1, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0201 	orr.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	e000      	b.n	80046b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2302      	movs	r3, #2
  }
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d139      	bne.n	8004748 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046de:	2302      	movs	r3, #2
 80046e0:	e033      	b.n	800474a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2224      	movs	r2, #36	; 0x24
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0201 	bic.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004710:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800475c:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <HAL_PWREx_GetVoltageRange+0x3c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004768:	d102      	bne.n	8004770 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800476a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800476e:	e00b      	b.n	8004788 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004770:	4b08      	ldr	r3, [pc, #32]	; (8004794 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477e:	d102      	bne.n	8004786 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004784:	e000      	b.n	8004788 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004786:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40007000 	.word	0x40007000

08004798 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d141      	bne.n	800482a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047a6:	4b4b      	ldr	r3, [pc, #300]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b2:	d131      	bne.n	8004818 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047b4:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ba:	4a46      	ldr	r2, [pc, #280]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047c4:	4b43      	ldr	r3, [pc, #268]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047cc:	4a41      	ldr	r2, [pc, #260]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80047d4:	4b40      	ldr	r3, [pc, #256]	; (80048d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2232      	movs	r2, #50	; 0x32
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	4a3f      	ldr	r2, [pc, #252]	; (80048dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	0c9b      	lsrs	r3, r3, #18
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047ea:	e002      	b.n	80047f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047f2:	4b38      	ldr	r3, [pc, #224]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fe:	d102      	bne.n	8004806 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f2      	bne.n	80047ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004806:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004812:	d158      	bne.n	80048c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e057      	b.n	80048c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004818:	4b2e      	ldr	r3, [pc, #184]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800481e:	4a2d      	ldr	r2, [pc, #180]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004824:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004828:	e04d      	b.n	80048c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004830:	d141      	bne.n	80048b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004832:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483e:	d131      	bne.n	80048a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004840:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004846:	4a23      	ldr	r2, [pc, #140]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004850:	4b20      	ldr	r3, [pc, #128]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004858:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800485e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2232      	movs	r2, #50	; 0x32
 8004866:	fb02 f303 	mul.w	r3, r2, r3
 800486a:	4a1c      	ldr	r2, [pc, #112]	; (80048dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800486c:	fba2 2303 	umull	r2, r3, r2, r3
 8004870:	0c9b      	lsrs	r3, r3, #18
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004876:	e002      	b.n	800487e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3b01      	subs	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488a:	d102      	bne.n	8004892 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f2      	bne.n	8004878 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489e:	d112      	bne.n	80048c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e011      	b.n	80048c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048aa:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048b4:	e007      	b.n	80048c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048b6:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048be:	4a05      	ldr	r2, [pc, #20]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	40007000 	.word	0x40007000
 80048d8:	20000224 	.word	0x20000224
 80048dc:	431bde83 	.word	0x431bde83

080048e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	; 0x28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f000 bc68 	b.w	80051c4 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048f4:	4b97      	ldr	r3, [pc, #604]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048fe:	4b95      	ldr	r3, [pc, #596]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 80e6 	beq.w	8004ae2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d007      	beq.n	800492c <HAL_RCC_OscConfig+0x4c>
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	2b0c      	cmp	r3, #12
 8004920:	f040 808d 	bne.w	8004a3e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	2b01      	cmp	r3, #1
 8004928:	f040 8089 	bne.w	8004a3e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800492c:	4b89      	ldr	r3, [pc, #548]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d006      	beq.n	8004946 <HAL_RCC_OscConfig+0x66>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f000 bc3f 	b.w	80051c4 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800494a:	4b82      	ldr	r3, [pc, #520]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d004      	beq.n	8004960 <HAL_RCC_OscConfig+0x80>
 8004956:	4b7f      	ldr	r3, [pc, #508]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800495e:	e005      	b.n	800496c <HAL_RCC_OscConfig+0x8c>
 8004960:	4b7c      	ldr	r3, [pc, #496]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004966:	091b      	lsrs	r3, r3, #4
 8004968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800496c:	4293      	cmp	r3, r2
 800496e:	d224      	bcs.n	80049ba <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fdf3 	bl	8005560 <RCC_SetFlashLatencyFromMSIRange>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f000 bc1f 	b.w	80051c4 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004986:	4b73      	ldr	r3, [pc, #460]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a72      	ldr	r2, [pc, #456]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 800498c:	f043 0308 	orr.w	r3, r3, #8
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b70      	ldr	r3, [pc, #448]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	496d      	ldr	r1, [pc, #436]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049a4:	4b6b      	ldr	r3, [pc, #428]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	4968      	ldr	r1, [pc, #416]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]
 80049b8:	e025      	b.n	8004a06 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ba:	4b66      	ldr	r3, [pc, #408]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a65      	ldr	r2, [pc, #404]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049c0:	f043 0308 	orr.w	r3, r3, #8
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4b63      	ldr	r3, [pc, #396]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	4960      	ldr	r1, [pc, #384]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049d8:	4b5e      	ldr	r3, [pc, #376]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	495b      	ldr	r1, [pc, #364]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fdb2 	bl	8005560 <RCC_SetFlashLatencyFromMSIRange>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e3de      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a06:	f000 fd21 	bl	800544c <HAL_RCC_GetSysClockFreq>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	4b51      	ldr	r3, [pc, #324]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	4950      	ldr	r1, [pc, #320]	; (8004b58 <HAL_RCC_OscConfig+0x278>)
 8004a18:	5ccb      	ldrb	r3, [r1, r3]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a22:	4a4e      	ldr	r2, [pc, #312]	; (8004b5c <HAL_RCC_OscConfig+0x27c>)
 8004a24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a26:	4b4e      	ldr	r3, [pc, #312]	; (8004b60 <HAL_RCC_OscConfig+0x280>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fd ff44 	bl	80028b8 <HAL_InitTick>
 8004a30:	4603      	mov	r3, r0
 8004a32:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d052      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	e3c2      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d032      	beq.n	8004aac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a46:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a42      	ldr	r2, [pc, #264]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a52:	f7fd ff81 	bl	8002958 <HAL_GetTick>
 8004a56:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a5a:	f7fd ff7d 	bl	8002958 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e3ab      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a6c:	4b39      	ldr	r3, [pc, #228]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a78:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a35      	ldr	r2, [pc, #212]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a7e:	f043 0308 	orr.w	r3, r3, #8
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b33      	ldr	r3, [pc, #204]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	4930      	ldr	r1, [pc, #192]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a96:	4b2f      	ldr	r3, [pc, #188]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	492b      	ldr	r1, [pc, #172]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
 8004aaa:	e01a      	b.n	8004ae2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004aac:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a28      	ldr	r2, [pc, #160]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ab8:	f7fd ff4e 	bl	8002958 <HAL_GetTick>
 8004abc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ac0:	f7fd ff4a 	bl	8002958 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e378      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ad2:	4b20      	ldr	r3, [pc, #128]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x1e0>
 8004ade:	e000      	b.n	8004ae2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ae0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d073      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_OscConfig+0x220>
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	2b0c      	cmp	r3, #12
 8004af8:	d10e      	bne.n	8004b18 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d10b      	bne.n	8004b18 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d063      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x2f4>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d15f      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e355      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d106      	bne.n	8004b30 <HAL_RCC_OscConfig+0x250>
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a0b      	ldr	r2, [pc, #44]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e025      	b.n	8004b7c <HAL_RCC_OscConfig+0x29c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b38:	d114      	bne.n	8004b64 <HAL_RCC_OscConfig+0x284>
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a02      	ldr	r2, [pc, #8]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e013      	b.n	8004b7c <HAL_RCC_OscConfig+0x29c>
 8004b54:	40021000 	.word	0x40021000
 8004b58:	08007250 	.word	0x08007250
 8004b5c:	20000224 	.word	0x20000224
 8004b60:	20000228 	.word	0x20000228
 8004b64:	4b8f      	ldr	r3, [pc, #572]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a8e      	ldr	r2, [pc, #568]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4b8c      	ldr	r3, [pc, #560]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a8b      	ldr	r2, [pc, #556]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d013      	beq.n	8004bac <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b84:	f7fd fee8 	bl	8002958 <HAL_GetTick>
 8004b88:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7fd fee4 	bl	8002958 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	; 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e312      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b9e:	4b81      	ldr	r3, [pc, #516]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x2ac>
 8004baa:	e014      	b.n	8004bd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fd fed4 	bl	8002958 <HAL_GetTick>
 8004bb0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb4:	f7fd fed0 	bl	8002958 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	; 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e2fe      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bc6:	4b77      	ldr	r3, [pc, #476]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x2d4>
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d060      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x314>
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	d119      	bne.n	8004c22 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d116      	bne.n	8004c22 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf4:	4b6b      	ldr	r3, [pc, #428]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_OscConfig+0x32c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e2db      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0c:	4b65      	ldr	r3, [pc, #404]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	4962      	ldr	r1, [pc, #392]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c20:	e040      	b.n	8004ca4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d023      	beq.n	8004c72 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c2a:	4b5e      	ldr	r3, [pc, #376]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a5d      	ldr	r2, [pc, #372]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c36:	f7fd fe8f 	bl	8002958 <HAL_GetTick>
 8004c3a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3e:	f7fd fe8b 	bl	8002958 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e2b9      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c50:	4b54      	ldr	r3, [pc, #336]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5c:	4b51      	ldr	r3, [pc, #324]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	061b      	lsls	r3, r3, #24
 8004c6a:	494e      	ldr	r1, [pc, #312]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
 8004c70:	e018      	b.n	8004ca4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c72:	4b4c      	ldr	r3, [pc, #304]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a4b      	ldr	r2, [pc, #300]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7fd fe6b 	bl	8002958 <HAL_GetTick>
 8004c82:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c86:	f7fd fe67 	bl	8002958 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e295      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c98:	4b42      	ldr	r3, [pc, #264]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8082 	beq.w	8004db6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d05f      	beq.n	8004d7a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004cba:	4b3a      	ldr	r3, [pc, #232]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d037      	beq.n	8004d40 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e26d      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01b      	beq.n	8004d2a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004cf2:	4b2c      	ldr	r3, [pc, #176]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf8:	4a2a      	ldr	r2, [pc, #168]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d02:	f7fd fe29 	bl	8002958 <HAL_GetTick>
 8004d06:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0a:	f7fd fe25 	bl	8002958 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b11      	cmp	r3, #17
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e253      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d1c:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1ef      	bne.n	8004d0a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004d2a:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d30:	f023 0210 	bic.w	r2, r3, #16
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	491a      	ldr	r1, [pc, #104]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d40:	4b18      	ldr	r3, [pc, #96]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d46:	4a17      	ldr	r2, [pc, #92]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d50:	f7fd fe02 	bl	8002958 <HAL_GetTick>
 8004d54:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d58:	f7fd fdfe 	bl	8002958 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b11      	cmp	r3, #17
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e22c      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0ef      	beq.n	8004d58 <HAL_RCC_OscConfig+0x478>
 8004d78:	e01d      	b.n	8004db6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d80:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <HAL_RCC_OscConfig+0x4c4>)
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8a:	f7fd fde5 	bl	8002958 <HAL_GetTick>
 8004d8e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d90:	e00a      	b.n	8004da8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d92:	f7fd fde1 	bl	8002958 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b11      	cmp	r3, #17
 8004d9e:	d903      	bls.n	8004da8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e20f      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
 8004da4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004da8:	4b83      	ldr	r3, [pc, #524]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1ed      	bne.n	8004d92 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 80bd 	beq.w	8004f3e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dca:	4b7b      	ldr	r3, [pc, #492]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10e      	bne.n	8004df4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd6:	4b78      	ldr	r3, [pc, #480]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dda:	4a77      	ldr	r2, [pc, #476]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de0:	6593      	str	r3, [r2, #88]	; 0x58
 8004de2:	4b75      	ldr	r3, [pc, #468]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df4:	4b71      	ldr	r3, [pc, #452]	; (8004fbc <HAL_RCC_OscConfig+0x6dc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d118      	bne.n	8004e32 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e00:	4b6e      	ldr	r3, [pc, #440]	; (8004fbc <HAL_RCC_OscConfig+0x6dc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a6d      	ldr	r2, [pc, #436]	; (8004fbc <HAL_RCC_OscConfig+0x6dc>)
 8004e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0c:	f7fd fda4 	bl	8002958 <HAL_GetTick>
 8004e10:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e14:	f7fd fda0 	bl	8002958 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e1ce      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e26:	4b65      	ldr	r3, [pc, #404]	; (8004fbc <HAL_RCC_OscConfig+0x6dc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d02c      	beq.n	8004e98 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004e3e:	4b5e      	ldr	r3, [pc, #376]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e50:	4959      	ldr	r1, [pc, #356]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d010      	beq.n	8004e86 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e64:	4b54      	ldr	r3, [pc, #336]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6a:	4a53      	ldr	r2, [pc, #332]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004e6c:	f043 0304 	orr.w	r3, r3, #4
 8004e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e74:	4b50      	ldr	r3, [pc, #320]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7a:	4a4f      	ldr	r2, [pc, #316]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e84:	e018      	b.n	8004eb8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e86:	4b4c      	ldr	r3, [pc, #304]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8c:	4a4a      	ldr	r2, [pc, #296]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e96:	e00f      	b.n	8004eb8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e98:	4b47      	ldr	r3, [pc, #284]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9e:	4a46      	ldr	r2, [pc, #280]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ea8:	4b43      	ldr	r3, [pc, #268]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eae:	4a42      	ldr	r2, [pc, #264]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004eb0:	f023 0304 	bic.w	r3, r3, #4
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d016      	beq.n	8004eee <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fd fd4a 	bl	8002958 <HAL_GetTick>
 8004ec4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f7fd fd46 	bl	8002958 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e172      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ede:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ed      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x5e8>
 8004eec:	e01d      	b.n	8004f2a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eee:	f7fd fd33 	bl	8002958 <HAL_GetTick>
 8004ef2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef6:	f7fd fd2f 	bl	8002958 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e15b      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f0c:	4b2a      	ldr	r3, [pc, #168]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ed      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004f1a:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f20:	4a25      	ldr	r2, [pc, #148]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d105      	bne.n	8004f3e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f32:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	4a20      	ldr	r2, [pc, #128]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d041      	beq.n	8004fce <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01c      	beq.n	8004f8c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f52:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f58:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f62:	f7fd fcf9 	bl	8002958 <HAL_GetTick>
 8004f66:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f6a:	f7fd fcf5 	bl	8002958 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e123      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ef      	beq.n	8004f6a <HAL_RCC_OscConfig+0x68a>
 8004f8a:	e020      	b.n	8004fce <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f92:	4a09      	ldr	r2, [pc, #36]	; (8004fb8 <HAL_RCC_OscConfig+0x6d8>)
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9c:	f7fd fcdc 	bl	8002958 <HAL_GetTick>
 8004fa0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fa2:	e00d      	b.n	8004fc0 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fa4:	f7fd fcd8 	bl	8002958 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d906      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e106      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fc0:	4b82      	ldr	r3, [pc, #520]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 8004fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1ea      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80f5 	beq.w	80051c2 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	f040 80cb 	bne.w	8005178 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fe2:	4b7a      	ldr	r3, [pc, #488]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f003 0203 	and.w	r2, r3, #3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d12c      	bne.n	8005050 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005000:	3b01      	subs	r3, #1
 8005002:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005004:	429a      	cmp	r2, r3
 8005006:	d123      	bne.n	8005050 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005014:	429a      	cmp	r2, r3
 8005016:	d11b      	bne.n	8005050 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d113      	bne.n	8005050 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	085b      	lsrs	r3, r3, #1
 8005034:	3b01      	subs	r3, #1
 8005036:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d109      	bne.n	8005050 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	085b      	lsrs	r3, r3, #1
 8005048:	3b01      	subs	r3, #1
 800504a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d06d      	beq.n	800512c <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	2b0c      	cmp	r3, #12
 8005054:	d068      	beq.n	8005128 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005056:	4b5d      	ldr	r3, [pc, #372]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d105      	bne.n	800506e <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005062:	4b5a      	ldr	r3, [pc, #360]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e0a8      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005072:	4b56      	ldr	r3, [pc, #344]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a55      	ldr	r2, [pc, #340]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 8005078:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800507c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800507e:	f7fd fc6b 	bl	8002958 <HAL_GetTick>
 8005082:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005086:	f7fd fc67 	bl	8002958 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e095      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005098:	4b4c      	ldr	r3, [pc, #304]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f0      	bne.n	8005086 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050a4:	4b49      	ldr	r3, [pc, #292]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	4b49      	ldr	r3, [pc, #292]	; (80051d0 <HAL_RCC_OscConfig+0x8f0>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050b4:	3a01      	subs	r2, #1
 80050b6:	0112      	lsls	r2, r2, #4
 80050b8:	4311      	orrs	r1, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050be:	0212      	lsls	r2, r2, #8
 80050c0:	4311      	orrs	r1, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050c6:	0852      	lsrs	r2, r2, #1
 80050c8:	3a01      	subs	r2, #1
 80050ca:	0552      	lsls	r2, r2, #21
 80050cc:	4311      	orrs	r1, r2
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050d2:	0852      	lsrs	r2, r2, #1
 80050d4:	3a01      	subs	r2, #1
 80050d6:	0652      	lsls	r2, r2, #25
 80050d8:	4311      	orrs	r1, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050de:	06d2      	lsls	r2, r2, #27
 80050e0:	430a      	orrs	r2, r1
 80050e2:	493a      	ldr	r1, [pc, #232]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050e8:	4b38      	ldr	r3, [pc, #224]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a37      	ldr	r2, [pc, #220]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 80050ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050f4:	4b35      	ldr	r3, [pc, #212]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	4a34      	ldr	r2, [pc, #208]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 80050fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005100:	f7fd fc2a 	bl	8002958 <HAL_GetTick>
 8005104:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005108:	f7fd fc26 	bl	8002958 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e054      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800511a:	4b2c      	ldr	r3, [pc, #176]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005126:	e04c      	b.n	80051c2 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e04b      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512c:	4b27      	ldr	r3, [pc, #156]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d144      	bne.n	80051c2 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005138:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a23      	ldr	r2, [pc, #140]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 800513e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005142:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4a20      	ldr	r2, [pc, #128]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 800514a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800514e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005150:	f7fd fc02 	bl	8002958 <HAL_GetTick>
 8005154:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fd fbfe 	bl	8002958 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e02c      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516a:	4b18      	ldr	r3, [pc, #96]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0x878>
 8005176:	e024      	b.n	80051c2 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	2b0c      	cmp	r3, #12
 800517c:	d01f      	beq.n	80051be <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a12      	ldr	r2, [pc, #72]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 8005184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518a:	f7fd fbe5 	bl	8002958 <HAL_GetTick>
 800518e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005192:	f7fd fbe1 	bl	8002958 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e00f      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a4:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f0      	bne.n	8005192 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	4905      	ldr	r1, [pc, #20]	; (80051cc <HAL_RCC_OscConfig+0x8ec>)
 80051b6:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <HAL_RCC_OscConfig+0x8f4>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	60cb      	str	r3, [r1, #12]
 80051bc:	e001      	b.n	80051c2 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3728      	adds	r7, #40	; 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40021000 	.word	0x40021000
 80051d0:	019d800c 	.word	0x019d800c
 80051d4:	feeefffc 	.word	0xfeeefffc

080051d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e11d      	b.n	800542c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051f0:	4b90      	ldr	r3, [pc, #576]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d910      	bls.n	8005220 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fe:	4b8d      	ldr	r3, [pc, #564]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f023 020f 	bic.w	r2, r3, #15
 8005206:	498b      	ldr	r1, [pc, #556]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	4313      	orrs	r3, r2
 800520c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800520e:	4b89      	ldr	r3, [pc, #548]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e105      	b.n	800542c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	4b81      	ldr	r3, [pc, #516]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005238:	429a      	cmp	r2, r3
 800523a:	d908      	bls.n	800524e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523c:	4b7e      	ldr	r3, [pc, #504]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	497b      	ldr	r1, [pc, #492]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d079      	beq.n	800534e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b03      	cmp	r3, #3
 8005260:	d11e      	bne.n	80052a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005262:	4b75      	ldr	r3, [pc, #468]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e0dc      	b.n	800542c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005272:	f000 f9cf 	bl	8005614 <RCC_GetSysClockFreqFromPLLSource>
 8005276:	4603      	mov	r3, r0
 8005278:	4a70      	ldr	r2, [pc, #448]	; (800543c <HAL_RCC_ClockConfig+0x264>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d946      	bls.n	800530c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800527e:	4b6e      	ldr	r3, [pc, #440]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d140      	bne.n	800530c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800528a:	4b6b      	ldr	r3, [pc, #428]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005292:	4a69      	ldr	r2, [pc, #420]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 8005294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005298:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	e035      	b.n	800530c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052a8:	4b63      	ldr	r3, [pc, #396]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d115      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0b9      	b.n	800542c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052c0:	4b5d      	ldr	r3, [pc, #372]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0ad      	b.n	800542c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d0:	4b59      	ldr	r3, [pc, #356]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0a5      	b.n	800542c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80052e0:	f000 f8b4 	bl	800544c <HAL_RCC_GetSysClockFreq>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4a55      	ldr	r2, [pc, #340]	; (800543c <HAL_RCC_ClockConfig+0x264>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d90f      	bls.n	800530c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80052ec:	4b52      	ldr	r3, [pc, #328]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052f8:	4b4f      	ldr	r3, [pc, #316]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005300:	4a4d      	ldr	r2, [pc, #308]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 8005302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005306:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800530c:	4b4a      	ldr	r3, [pc, #296]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f023 0203 	bic.w	r2, r3, #3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4947      	ldr	r1, [pc, #284]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800531a:	4313      	orrs	r3, r2
 800531c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531e:	f7fd fb1b 	bl	8002958 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005324:	e00a      	b.n	800533c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005326:	f7fd fb17 	bl	8002958 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f241 3288 	movw	r2, #5000	; 0x1388
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e077      	b.n	800542c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533c:	4b3e      	ldr	r3, [pc, #248]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 020c 	and.w	r2, r3, #12
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	429a      	cmp	r2, r3
 800534c:	d1eb      	bne.n	8005326 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b80      	cmp	r3, #128	; 0x80
 8005352:	d105      	bne.n	8005360 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005354:	4b38      	ldr	r3, [pc, #224]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4a37      	ldr	r2, [pc, #220]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800535a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800535e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	4b31      	ldr	r3, [pc, #196]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005378:	429a      	cmp	r2, r3
 800537a:	d208      	bcs.n	800538e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800537c:	4b2e      	ldr	r3, [pc, #184]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	492b      	ldr	r1, [pc, #172]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 800538a:	4313      	orrs	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800538e:	4b29      	ldr	r3, [pc, #164]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d210      	bcs.n	80053be <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539c:	4b25      	ldr	r3, [pc, #148]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f023 020f 	bic.w	r2, r3, #15
 80053a4:	4923      	ldr	r1, [pc, #140]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ac:	4b21      	ldr	r3, [pc, #132]	; (8005434 <HAL_RCC_ClockConfig+0x25c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d001      	beq.n	80053be <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e036      	b.n	800542c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d008      	beq.n	80053dc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ca:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4918      	ldr	r1, [pc, #96]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d009      	beq.n	80053fc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053e8:	4b13      	ldr	r3, [pc, #76]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	4910      	ldr	r1, [pc, #64]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053fc:	f000 f826 	bl	800544c <HAL_RCC_GetSysClockFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <HAL_RCC_ClockConfig+0x260>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	490c      	ldr	r1, [pc, #48]	; (8005440 <HAL_RCC_ClockConfig+0x268>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	4a0a      	ldr	r2, [pc, #40]	; (8005444 <HAL_RCC_ClockConfig+0x26c>)
 800541a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <HAL_RCC_ClockConfig+0x270>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f7fd fa49 	bl	80028b8 <HAL_InitTick>
 8005426:	4603      	mov	r3, r0
 8005428:	73fb      	strb	r3, [r7, #15]

  return status;
 800542a:	7bfb      	ldrb	r3, [r7, #15]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40022000 	.word	0x40022000
 8005438:	40021000 	.word	0x40021000
 800543c:	04c4b400 	.word	0x04c4b400
 8005440:	08007250 	.word	0x08007250
 8005444:	20000224 	.word	0x20000224
 8005448:	20000228 	.word	0x20000228

0800544c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	; 0x24
 8005450:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	2300      	movs	r3, #0
 8005458:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800545a:	4b3e      	ldr	r3, [pc, #248]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005464:	4b3b      	ldr	r3, [pc, #236]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x34>
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b0c      	cmp	r3, #12
 8005478:	d121      	bne.n	80054be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d11e      	bne.n	80054be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005480:	4b34      	ldr	r3, [pc, #208]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d107      	bne.n	800549c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800548c:	4b31      	ldr	r3, [pc, #196]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800548e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e005      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800549c:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054a8:	4a2b      	ldr	r2, [pc, #172]	; (8005558 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10d      	bne.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054bc:	e00a      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d102      	bne.n	80054ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054c4:	4b25      	ldr	r3, [pc, #148]	; (800555c <HAL_RCC_GetSysClockFreq+0x110>)
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	e004      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d101      	bne.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054d0:	4b22      	ldr	r3, [pc, #136]	; (800555c <HAL_RCC_GetSysClockFreq+0x110>)
 80054d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d134      	bne.n	8005544 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054da:	4b1e      	ldr	r3, [pc, #120]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d003      	beq.n	80054f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d003      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0xac>
 80054f0:	e005      	b.n	80054fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054f2:	4b1a      	ldr	r3, [pc, #104]	; (800555c <HAL_RCC_GetSysClockFreq+0x110>)
 80054f4:	617b      	str	r3, [r7, #20]
      break;
 80054f6:	e005      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054f8:	4b18      	ldr	r3, [pc, #96]	; (800555c <HAL_RCC_GetSysClockFreq+0x110>)
 80054fa:	617b      	str	r3, [r7, #20]
      break;
 80054fc:	e002      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	617b      	str	r3, [r7, #20]
      break;
 8005502:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005504:	4b13      	ldr	r3, [pc, #76]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	3301      	adds	r3, #1
 8005510:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005512:	4b10      	ldr	r3, [pc, #64]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	0a1b      	lsrs	r3, r3, #8
 8005518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	fb03 f202 	mul.w	r2, r3, r2
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	fbb2 f3f3 	udiv	r3, r2, r3
 8005528:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800552a:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	0e5b      	lsrs	r3, r3, #25
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	3301      	adds	r3, #1
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005542:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005544:	69bb      	ldr	r3, [r7, #24]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3724      	adds	r7, #36	; 0x24
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40021000 	.word	0x40021000
 8005558:	08007260 	.word	0x08007260
 800555c:	00f42400 	.word	0x00f42400

08005560 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800556c:	4b27      	ldr	r3, [pc, #156]	; (800560c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005578:	f7ff f8ee 	bl	8004758 <HAL_PWREx_GetVoltageRange>
 800557c:	6178      	str	r0, [r7, #20]
 800557e:	e014      	b.n	80055aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005580:	4b22      	ldr	r3, [pc, #136]	; (800560c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	4a21      	ldr	r2, [pc, #132]	; (800560c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800558a:	6593      	str	r3, [r2, #88]	; 0x58
 800558c:	4b1f      	ldr	r3, [pc, #124]	; (800560c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800558e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005598:	f7ff f8de 	bl	8004758 <HAL_PWREx_GetVoltageRange>
 800559c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800559e:	4b1b      	ldr	r3, [pc, #108]	; (800560c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a2:	4a1a      	ldr	r2, [pc, #104]	; (800560c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b0:	d10b      	bne.n	80055ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b80      	cmp	r3, #128	; 0x80
 80055b6:	d913      	bls.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2ba0      	cmp	r3, #160	; 0xa0
 80055bc:	d902      	bls.n	80055c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055be:	2302      	movs	r3, #2
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e00d      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055c4:	2301      	movs	r3, #1
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	e00a      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b7f      	cmp	r3, #127	; 0x7f
 80055ce:	d902      	bls.n	80055d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80055d0:	2302      	movs	r3, #2
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	e004      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b70      	cmp	r3, #112	; 0x70
 80055da:	d101      	bne.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055dc:	2301      	movs	r3, #1
 80055de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f023 020f 	bic.w	r2, r3, #15
 80055e8:	4909      	ldr	r1, [pc, #36]	; (8005610 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055f0:	4b07      	ldr	r3, [pc, #28]	; (8005610 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d001      	beq.n	8005602 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40021000 	.word	0x40021000
 8005610:	40022000 	.word	0x40022000

08005614 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800561a:	4b2d      	ldr	r3, [pc, #180]	; (80056d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b03      	cmp	r3, #3
 8005628:	d00b      	beq.n	8005642 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b03      	cmp	r3, #3
 800562e:	d825      	bhi.n	800567c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d008      	beq.n	8005648 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d11f      	bne.n	800567c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800563c:	4b25      	ldr	r3, [pc, #148]	; (80056d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800563e:	613b      	str	r3, [r7, #16]
    break;
 8005640:	e01f      	b.n	8005682 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005642:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005644:	613b      	str	r3, [r7, #16]
    break;
 8005646:	e01c      	b.n	8005682 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005648:	4b21      	ldr	r3, [pc, #132]	; (80056d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d107      	bne.n	8005664 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005654:	4b1e      	ldr	r3, [pc, #120]	; (80056d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800565a:	0a1b      	lsrs	r3, r3, #8
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	e005      	b.n	8005670 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005664:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005670:	4a19      	ldr	r2, [pc, #100]	; (80056d8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005678:	613b      	str	r3, [r7, #16]
    break;
 800567a:	e002      	b.n	8005682 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800567c:	2300      	movs	r3, #0
 800567e:	613b      	str	r3, [r7, #16]
    break;
 8005680:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005682:	4b13      	ldr	r3, [pc, #76]	; (80056d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	3301      	adds	r3, #1
 800568e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005690:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	fb03 f202 	mul.w	r2, r3, r2
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056a8:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	0e5b      	lsrs	r3, r3, #25
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	3301      	adds	r3, #1
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80056c2:	683b      	ldr	r3, [r7, #0]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40021000 	.word	0x40021000
 80056d4:	00f42400 	.word	0x00f42400
 80056d8:	08007260 	.word	0x08007260

080056dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056e4:	2300      	movs	r3, #0
 80056e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056e8:	2300      	movs	r3, #0
 80056ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d040      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fc:	2b80      	cmp	r3, #128	; 0x80
 80056fe:	d02a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005700:	2b80      	cmp	r3, #128	; 0x80
 8005702:	d825      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005704:	2b60      	cmp	r3, #96	; 0x60
 8005706:	d026      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005708:	2b60      	cmp	r3, #96	; 0x60
 800570a:	d821      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d006      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d81d      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005718:	2b20      	cmp	r3, #32
 800571a:	d010      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800571c:	e018      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800571e:	4b89      	ldr	r3, [pc, #548]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	4a88      	ldr	r2, [pc, #544]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005728:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800572a:	e015      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fb3e 	bl	8005db4 <RCCEx_PLLSAI1_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800573c:	e00c      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3320      	adds	r3, #32
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fc29 	bl	8005f9c <RCCEx_PLLSAI2_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800574e:	e003      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	74fb      	strb	r3, [r7, #19]
      break;
 8005754:	e000      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005758:	7cfb      	ldrb	r3, [r7, #19]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800575e:	4b79      	ldr	r3, [pc, #484]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005760:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005764:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576c:	4975      	ldr	r1, [pc, #468]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005774:	e001      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005776:	7cfb      	ldrb	r3, [r7, #19]
 8005778:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d047      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578e:	d030      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005794:	d82a      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579a:	d02a      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800579c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a0:	d824      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a6:	d008      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ac:	d81e      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b6:	d010      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80057b8:	e018      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057ba:	4b62      	ldr	r3, [pc, #392]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	4a61      	ldr	r2, [pc, #388]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057c6:	e015      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3304      	adds	r3, #4
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 faf0 	bl	8005db4 <RCCEx_PLLSAI1_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057d8:	e00c      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3320      	adds	r3, #32
 80057de:	2100      	movs	r1, #0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fbdb 	bl	8005f9c <RCCEx_PLLSAI2_Config>
 80057e6:	4603      	mov	r3, r0
 80057e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057ea:	e003      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	74fb      	strb	r3, [r7, #19]
      break;
 80057f0:	e000      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80057f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10b      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057fa:	4b52      	ldr	r3, [pc, #328]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	494e      	ldr	r1, [pc, #312]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005810:	e001      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005812:	7cfb      	ldrb	r3, [r7, #19]
 8005814:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 809f 	beq.w	8005962 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005824:	2300      	movs	r3, #0
 8005826:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005828:	4b46      	ldr	r3, [pc, #280]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00d      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800583e:	4b41      	ldr	r3, [pc, #260]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005842:	4a40      	ldr	r2, [pc, #256]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005848:	6593      	str	r3, [r2, #88]	; 0x58
 800584a:	4b3e      	ldr	r3, [pc, #248]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005856:	2301      	movs	r3, #1
 8005858:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800585a:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a3a      	ldr	r2, [pc, #232]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005864:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005866:	f7fd f877 	bl	8002958 <HAL_GetTick>
 800586a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800586c:	e009      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586e:	f7fd f873 	bl	8002958 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d902      	bls.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	74fb      	strb	r3, [r7, #19]
        break;
 8005880:	e005      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005882:	4b31      	ldr	r3, [pc, #196]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0ef      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800588e:	7cfb      	ldrb	r3, [r7, #19]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d15b      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005894:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01f      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d019      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058b2:	4b24      	ldr	r3, [pc, #144]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058be:	4b21      	ldr	r3, [pc, #132]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	4a1f      	ldr	r2, [pc, #124]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ce:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058de:	4a19      	ldr	r2, [pc, #100]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d016      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fd f832 	bl	8002958 <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058f6:	e00b      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f8:	f7fd f82e 	bl	8002958 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d902      	bls.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	74fb      	strb	r3, [r7, #19]
            break;
 800590e:	e006      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0ec      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800591e:	7cfb      	ldrb	r3, [r7, #19]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10c      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005924:	4b07      	ldr	r3, [pc, #28]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005934:	4903      	ldr	r1, [pc, #12]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800593c:	e008      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800593e:	7cfb      	ldrb	r3, [r7, #19]
 8005940:	74bb      	strb	r3, [r7, #18]
 8005942:	e005      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005944:	40021000 	.word	0x40021000
 8005948:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	7cfb      	ldrb	r3, [r7, #19]
 800594e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005950:	7c7b      	ldrb	r3, [r7, #17]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d105      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005956:	4ba0      	ldr	r3, [pc, #640]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595a:	4a9f      	ldr	r2, [pc, #636]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005960:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800596e:	4b9a      	ldr	r3, [pc, #616]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005974:	f023 0203 	bic.w	r2, r3, #3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597c:	4996      	ldr	r1, [pc, #600]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005990:	4b91      	ldr	r3, [pc, #580]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005996:	f023 020c 	bic.w	r2, r3, #12
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	498e      	ldr	r1, [pc, #568]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059b2:	4b89      	ldr	r3, [pc, #548]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c0:	4985      	ldr	r1, [pc, #532]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059d4:	4b80      	ldr	r3, [pc, #512]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e2:	497d      	ldr	r1, [pc, #500]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059f6:	4b78      	ldr	r3, [pc, #480]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a04:	4974      	ldr	r1, [pc, #464]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a18:	4b6f      	ldr	r3, [pc, #444]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a26:	496c      	ldr	r1, [pc, #432]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a3a:	4b67      	ldr	r3, [pc, #412]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a48:	4963      	ldr	r1, [pc, #396]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a5c:	4b5e      	ldr	r3, [pc, #376]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a6a:	495b      	ldr	r1, [pc, #364]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a7e:	4b56      	ldr	r3, [pc, #344]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8c:	4952      	ldr	r1, [pc, #328]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005aa0:	4b4d      	ldr	r3, [pc, #308]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	494a      	ldr	r1, [pc, #296]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ac2:	4b45      	ldr	r3, [pc, #276]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad0:	4941      	ldr	r1, [pc, #260]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ae4:	4b3c      	ldr	r3, [pc, #240]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af2:	4939      	ldr	r1, [pc, #228]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d028      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b06:	4b34      	ldr	r3, [pc, #208]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b14:	4930      	ldr	r1, [pc, #192]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b24:	d106      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b26:	4b2c      	ldr	r3, [pc, #176]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	4a2b      	ldr	r2, [pc, #172]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b30:	60d3      	str	r3, [r2, #12]
 8005b32:	e011      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b3c:	d10c      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f935 	bl	8005db4 <RCCEx_PLLSAI1_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b4e:	7cfb      	ldrb	r3, [r7, #19]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005b54:	7cfb      	ldrb	r3, [r7, #19]
 8005b56:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d04d      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b6c:	d108      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005b6e:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b74:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b7a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b7e:	e012      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005b80:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b86:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b8c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b90:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b9e:	490e      	ldr	r1, [pc, #56]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bae:	d106      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb0:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bba:	60d3      	str	r3, [r2, #12]
 8005bbc:	e020      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bc6:	d109      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bc8:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	4a02      	ldr	r2, [pc, #8]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd2:	60d3      	str	r3, [r2, #12]
 8005bd4:	e014      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005bd6:	bf00      	nop
 8005bd8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005be0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005be4:	d10c      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3304      	adds	r3, #4
 8005bea:	2101      	movs	r1, #1
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 f8e1 	bl	8005db4 <RCCEx_PLLSAI1_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bf6:	7cfb      	ldrb	r3, [r7, #19]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005bfc:	7cfb      	ldrb	r3, [r7, #19]
 8005bfe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d028      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c0c:	4b68      	ldr	r3, [pc, #416]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c1a:	4965      	ldr	r1, [pc, #404]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c2a:	d106      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c2c:	4b60      	ldr	r3, [pc, #384]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	4a5f      	ldr	r2, [pc, #380]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c36:	60d3      	str	r3, [r2, #12]
 8005c38:	e011      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c42:	d10c      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3304      	adds	r3, #4
 8005c48:	2101      	movs	r1, #1
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f8b2 	bl	8005db4 <RCCEx_PLLSAI1_Config>
 8005c50:	4603      	mov	r3, r0
 8005c52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c54:	7cfb      	ldrb	r3, [r7, #19]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005c5a:	7cfb      	ldrb	r3, [r7, #19]
 8005c5c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01e      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c6a:	4b51      	ldr	r3, [pc, #324]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c7a:	494d      	ldr	r1, [pc, #308]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	2102      	movs	r1, #2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 f88d 	bl	8005db4 <RCCEx_PLLSAI1_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005ca4:	7cfb      	ldrb	r3, [r7, #19]
 8005ca6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00b      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cb4:	4b3e      	ldr	r3, [pc, #248]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cba:	f023 0204 	bic.w	r2, r3, #4
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc4:	493a      	ldr	r1, [pc, #232]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005cd8:	4b35      	ldr	r3, [pc, #212]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cde:	f023 0218 	bic.w	r2, r3, #24
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	4931      	ldr	r1, [pc, #196]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d035      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cfc:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a2b      	ldr	r2, [pc, #172]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d08:	f7fc fe26 	bl	8002958 <HAL_GetTick>
 8005d0c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d0e:	e009      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d10:	f7fc fe22 	bl	8002958 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d902      	bls.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	74fb      	strb	r3, [r7, #19]
        break;
 8005d22:	e005      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d24:	4b22      	ldr	r3, [pc, #136]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1ef      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005d30:	7cfb      	ldrb	r3, [r7, #19]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d113      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005d36:	4b1e      	ldr	r3, [pc, #120]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d46:	491a      	ldr	r1, [pc, #104]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3320      	adds	r3, #32
 8005d52:	2102      	movs	r1, #2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 f921 	bl	8005f9c <RCCEx_PLLSAI2_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005d5e:	7cfb      	ldrb	r3, [r7, #19]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d017      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005d74:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d84:	490a      	ldr	r1, [pc, #40]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d96:	d105      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	4a04      	ldr	r2, [pc, #16]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005da2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005da4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40021000 	.word	0x40021000

08005db4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005dc2:	4b72      	ldr	r3, [pc, #456]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005dce:	4b6f      	ldr	r3, [pc, #444]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0203 	and.w	r2, r3, #3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d103      	bne.n	8005de6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
       ||
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d142      	bne.n	8005e6c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	73fb      	strb	r3, [r7, #15]
 8005dea:	e03f      	b.n	8005e6c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d018      	beq.n	8005e26 <RCCEx_PLLSAI1_Config+0x72>
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d825      	bhi.n	8005e44 <RCCEx_PLLSAI1_Config+0x90>
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d002      	beq.n	8005e02 <RCCEx_PLLSAI1_Config+0x4e>
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d009      	beq.n	8005e14 <RCCEx_PLLSAI1_Config+0x60>
 8005e00:	e020      	b.n	8005e44 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e02:	4b62      	ldr	r3, [pc, #392]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d11d      	bne.n	8005e4a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e12:	e01a      	b.n	8005e4a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e14:	4b5d      	ldr	r3, [pc, #372]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d116      	bne.n	8005e4e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e24:	e013      	b.n	8005e4e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e26:	4b59      	ldr	r3, [pc, #356]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10f      	bne.n	8005e52 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e32:	4b56      	ldr	r3, [pc, #344]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e42:	e006      	b.n	8005e52 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	73fb      	strb	r3, [r7, #15]
      break;
 8005e48:	e004      	b.n	8005e54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e4a:	bf00      	nop
 8005e4c:	e002      	b.n	8005e54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e52:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d108      	bne.n	8005e6c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005e5a:	4b4c      	ldr	r3, [pc, #304]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f023 0203 	bic.w	r2, r3, #3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4949      	ldr	r1, [pc, #292]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f040 8086 	bne.w	8005f80 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e74:	4b45      	ldr	r3, [pc, #276]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a44      	ldr	r2, [pc, #272]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e80:	f7fc fd6a 	bl	8002958 <HAL_GetTick>
 8005e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e86:	e009      	b.n	8005e9c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e88:	f7fc fd66 	bl	8002958 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d902      	bls.n	8005e9c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	73fb      	strb	r3, [r7, #15]
        break;
 8005e9a:	e005      	b.n	8005ea8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e9c:	4b3b      	ldr	r3, [pc, #236]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1ef      	bne.n	8005e88 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d168      	bne.n	8005f80 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d113      	bne.n	8005edc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005eb4:	4b35      	ldr	r3, [pc, #212]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	4b35      	ldr	r3, [pc, #212]	; (8005f90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6892      	ldr	r2, [r2, #8]
 8005ec0:	0211      	lsls	r1, r2, #8
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68d2      	ldr	r2, [r2, #12]
 8005ec6:	06d2      	lsls	r2, r2, #27
 8005ec8:	4311      	orrs	r1, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6852      	ldr	r2, [r2, #4]
 8005ece:	3a01      	subs	r2, #1
 8005ed0:	0112      	lsls	r2, r2, #4
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	492d      	ldr	r1, [pc, #180]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	610b      	str	r3, [r1, #16]
 8005eda:	e02d      	b.n	8005f38 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d115      	bne.n	8005f0e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ee2:	4b2a      	ldr	r3, [pc, #168]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	4b2b      	ldr	r3, [pc, #172]	; (8005f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6892      	ldr	r2, [r2, #8]
 8005eee:	0211      	lsls	r1, r2, #8
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6912      	ldr	r2, [r2, #16]
 8005ef4:	0852      	lsrs	r2, r2, #1
 8005ef6:	3a01      	subs	r2, #1
 8005ef8:	0552      	lsls	r2, r2, #21
 8005efa:	4311      	orrs	r1, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6852      	ldr	r2, [r2, #4]
 8005f00:	3a01      	subs	r2, #1
 8005f02:	0112      	lsls	r2, r2, #4
 8005f04:	430a      	orrs	r2, r1
 8005f06:	4921      	ldr	r1, [pc, #132]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	610b      	str	r3, [r1, #16]
 8005f0c:	e014      	b.n	8005f38 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f0e:	4b1f      	ldr	r3, [pc, #124]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6892      	ldr	r2, [r2, #8]
 8005f1a:	0211      	lsls	r1, r2, #8
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6952      	ldr	r2, [r2, #20]
 8005f20:	0852      	lsrs	r2, r2, #1
 8005f22:	3a01      	subs	r2, #1
 8005f24:	0652      	lsls	r2, r2, #25
 8005f26:	4311      	orrs	r1, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6852      	ldr	r2, [r2, #4]
 8005f2c:	3a01      	subs	r2, #1
 8005f2e:	0112      	lsls	r2, r2, #4
 8005f30:	430a      	orrs	r2, r1
 8005f32:	4916      	ldr	r1, [pc, #88]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f38:	4b14      	ldr	r3, [pc, #80]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a13      	ldr	r2, [pc, #76]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f44:	f7fc fd08 	bl	8002958 <HAL_GetTick>
 8005f48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f4a:	e009      	b.n	8005f60 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f4c:	f7fc fd04 	bl	8002958 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d902      	bls.n	8005f60 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	73fb      	strb	r3, [r7, #15]
          break;
 8005f5e:	e005      	b.n	8005f6c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f60:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0ef      	beq.n	8005f4c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f72:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	4904      	ldr	r1, [pc, #16]	; (8005f8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	07ff800f 	.word	0x07ff800f
 8005f94:	ff9f800f 	.word	0xff9f800f
 8005f98:	f9ff800f 	.word	0xf9ff800f

08005f9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005faa:	4b72      	ldr	r3, [pc, #456]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00e      	beq.n	8005fd4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005fb6:	4b6f      	ldr	r3, [pc, #444]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f003 0203 	and.w	r2, r3, #3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d103      	bne.n	8005fce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
       ||
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d142      	bne.n	8006054 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	73fb      	strb	r3, [r7, #15]
 8005fd2:	e03f      	b.n	8006054 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d018      	beq.n	800600e <RCCEx_PLLSAI2_Config+0x72>
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d825      	bhi.n	800602c <RCCEx_PLLSAI2_Config+0x90>
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d002      	beq.n	8005fea <RCCEx_PLLSAI2_Config+0x4e>
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d009      	beq.n	8005ffc <RCCEx_PLLSAI2_Config+0x60>
 8005fe8:	e020      	b.n	800602c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fea:	4b62      	ldr	r3, [pc, #392]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d11d      	bne.n	8006032 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ffa:	e01a      	b.n	8006032 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ffc:	4b5d      	ldr	r3, [pc, #372]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006004:	2b00      	cmp	r3, #0
 8006006:	d116      	bne.n	8006036 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800600c:	e013      	b.n	8006036 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800600e:	4b59      	ldr	r3, [pc, #356]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10f      	bne.n	800603a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800601a:	4b56      	ldr	r3, [pc, #344]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d109      	bne.n	800603a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800602a:	e006      	b.n	800603a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
      break;
 8006030:	e004      	b.n	800603c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006032:	bf00      	nop
 8006034:	e002      	b.n	800603c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006036:	bf00      	nop
 8006038:	e000      	b.n	800603c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800603a:	bf00      	nop
    }

    if(status == HAL_OK)
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d108      	bne.n	8006054 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006042:	4b4c      	ldr	r3, [pc, #304]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f023 0203 	bic.w	r2, r3, #3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4949      	ldr	r1, [pc, #292]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006050:	4313      	orrs	r3, r2
 8006052:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f040 8086 	bne.w	8006168 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800605c:	4b45      	ldr	r3, [pc, #276]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a44      	ldr	r2, [pc, #272]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006068:	f7fc fc76 	bl	8002958 <HAL_GetTick>
 800606c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800606e:	e009      	b.n	8006084 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006070:	f7fc fc72 	bl	8002958 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d902      	bls.n	8006084 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	73fb      	strb	r3, [r7, #15]
        break;
 8006082:	e005      	b.n	8006090 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006084:	4b3b      	ldr	r3, [pc, #236]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1ef      	bne.n	8006070 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d168      	bne.n	8006168 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d113      	bne.n	80060c4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800609c:	4b35      	ldr	r3, [pc, #212]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	4b35      	ldr	r3, [pc, #212]	; (8006178 <RCCEx_PLLSAI2_Config+0x1dc>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6892      	ldr	r2, [r2, #8]
 80060a8:	0211      	lsls	r1, r2, #8
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68d2      	ldr	r2, [r2, #12]
 80060ae:	06d2      	lsls	r2, r2, #27
 80060b0:	4311      	orrs	r1, r2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6852      	ldr	r2, [r2, #4]
 80060b6:	3a01      	subs	r2, #1
 80060b8:	0112      	lsls	r2, r2, #4
 80060ba:	430a      	orrs	r2, r1
 80060bc:	492d      	ldr	r1, [pc, #180]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	614b      	str	r3, [r1, #20]
 80060c2:	e02d      	b.n	8006120 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d115      	bne.n	80060f6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060ca:	4b2a      	ldr	r3, [pc, #168]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060cc:	695a      	ldr	r2, [r3, #20]
 80060ce:	4b2b      	ldr	r3, [pc, #172]	; (800617c <RCCEx_PLLSAI2_Config+0x1e0>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6892      	ldr	r2, [r2, #8]
 80060d6:	0211      	lsls	r1, r2, #8
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6912      	ldr	r2, [r2, #16]
 80060dc:	0852      	lsrs	r2, r2, #1
 80060de:	3a01      	subs	r2, #1
 80060e0:	0552      	lsls	r2, r2, #21
 80060e2:	4311      	orrs	r1, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6852      	ldr	r2, [r2, #4]
 80060e8:	3a01      	subs	r2, #1
 80060ea:	0112      	lsls	r2, r2, #4
 80060ec:	430a      	orrs	r2, r1
 80060ee:	4921      	ldr	r1, [pc, #132]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	614b      	str	r3, [r1, #20]
 80060f4:	e014      	b.n	8006120 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060f6:	4b1f      	ldr	r3, [pc, #124]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	4b21      	ldr	r3, [pc, #132]	; (8006180 <RCCEx_PLLSAI2_Config+0x1e4>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6892      	ldr	r2, [r2, #8]
 8006102:	0211      	lsls	r1, r2, #8
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6952      	ldr	r2, [r2, #20]
 8006108:	0852      	lsrs	r2, r2, #1
 800610a:	3a01      	subs	r2, #1
 800610c:	0652      	lsls	r2, r2, #25
 800610e:	4311      	orrs	r1, r2
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6852      	ldr	r2, [r2, #4]
 8006114:	3a01      	subs	r2, #1
 8006116:	0112      	lsls	r2, r2, #4
 8006118:	430a      	orrs	r2, r1
 800611a:	4916      	ldr	r1, [pc, #88]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 800611c:	4313      	orrs	r3, r2
 800611e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006120:	4b14      	ldr	r3, [pc, #80]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a13      	ldr	r2, [pc, #76]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612c:	f7fc fc14 	bl	8002958 <HAL_GetTick>
 8006130:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006132:	e009      	b.n	8006148 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006134:	f7fc fc10 	bl	8002958 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d902      	bls.n	8006148 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	73fb      	strb	r3, [r7, #15]
          break;
 8006146:	e005      	b.n	8006154 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0ef      	beq.n	8006134 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800615a:	4b06      	ldr	r3, [pc, #24]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 800615c:	695a      	ldr	r2, [r3, #20]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	4904      	ldr	r1, [pc, #16]	; (8006174 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006164:	4313      	orrs	r3, r2
 8006166:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006168:	7bfb      	ldrb	r3, [r7, #15]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40021000 	.word	0x40021000
 8006178:	07ff800f 	.word	0x07ff800f
 800617c:	ff9f800f 	.word	0xff9f800f
 8006180:	f9ff800f 	.word	0xf9ff800f

08006184 <pow>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	ed2d 8b02 	vpush	{d8}
 800618a:	eeb0 8a40 	vmov.f32	s16, s0
 800618e:	eef0 8a60 	vmov.f32	s17, s1
 8006192:	ec55 4b11 	vmov	r4, r5, d1
 8006196:	f000 f883 	bl	80062a0 <__ieee754_pow>
 800619a:	4622      	mov	r2, r4
 800619c:	462b      	mov	r3, r5
 800619e:	4620      	mov	r0, r4
 80061a0:	4629      	mov	r1, r5
 80061a2:	ec57 6b10 	vmov	r6, r7, d0
 80061a6:	f7fa fc81 	bl	8000aac <__aeabi_dcmpun>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d13b      	bne.n	8006226 <pow+0xa2>
 80061ae:	ec51 0b18 	vmov	r0, r1, d8
 80061b2:	2200      	movs	r2, #0
 80061b4:	2300      	movs	r3, #0
 80061b6:	f7fa fc47 	bl	8000a48 <__aeabi_dcmpeq>
 80061ba:	b1b8      	cbz	r0, 80061ec <pow+0x68>
 80061bc:	2200      	movs	r2, #0
 80061be:	2300      	movs	r3, #0
 80061c0:	4620      	mov	r0, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	f7fa fc40 	bl	8000a48 <__aeabi_dcmpeq>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d146      	bne.n	800625a <pow+0xd6>
 80061cc:	ec45 4b10 	vmov	d0, r4, r5
 80061d0:	f000 fe82 	bl	8006ed8 <finite>
 80061d4:	b338      	cbz	r0, 8006226 <pow+0xa2>
 80061d6:	2200      	movs	r2, #0
 80061d8:	2300      	movs	r3, #0
 80061da:	4620      	mov	r0, r4
 80061dc:	4629      	mov	r1, r5
 80061de:	f7fa fc3d 	bl	8000a5c <__aeabi_dcmplt>
 80061e2:	b300      	cbz	r0, 8006226 <pow+0xa2>
 80061e4:	f000 ff0a 	bl	8006ffc <__errno>
 80061e8:	2322      	movs	r3, #34	; 0x22
 80061ea:	e01b      	b.n	8006224 <pow+0xa0>
 80061ec:	ec47 6b10 	vmov	d0, r6, r7
 80061f0:	f000 fe72 	bl	8006ed8 <finite>
 80061f4:	b9e0      	cbnz	r0, 8006230 <pow+0xac>
 80061f6:	eeb0 0a48 	vmov.f32	s0, s16
 80061fa:	eef0 0a68 	vmov.f32	s1, s17
 80061fe:	f000 fe6b 	bl	8006ed8 <finite>
 8006202:	b1a8      	cbz	r0, 8006230 <pow+0xac>
 8006204:	ec45 4b10 	vmov	d0, r4, r5
 8006208:	f000 fe66 	bl	8006ed8 <finite>
 800620c:	b180      	cbz	r0, 8006230 <pow+0xac>
 800620e:	4632      	mov	r2, r6
 8006210:	463b      	mov	r3, r7
 8006212:	4630      	mov	r0, r6
 8006214:	4639      	mov	r1, r7
 8006216:	f7fa fc49 	bl	8000aac <__aeabi_dcmpun>
 800621a:	2800      	cmp	r0, #0
 800621c:	d0e2      	beq.n	80061e4 <pow+0x60>
 800621e:	f000 feed 	bl	8006ffc <__errno>
 8006222:	2321      	movs	r3, #33	; 0x21
 8006224:	6003      	str	r3, [r0, #0]
 8006226:	ecbd 8b02 	vpop	{d8}
 800622a:	ec47 6b10 	vmov	d0, r6, r7
 800622e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006230:	2200      	movs	r2, #0
 8006232:	2300      	movs	r3, #0
 8006234:	4630      	mov	r0, r6
 8006236:	4639      	mov	r1, r7
 8006238:	f7fa fc06 	bl	8000a48 <__aeabi_dcmpeq>
 800623c:	2800      	cmp	r0, #0
 800623e:	d0f2      	beq.n	8006226 <pow+0xa2>
 8006240:	eeb0 0a48 	vmov.f32	s0, s16
 8006244:	eef0 0a68 	vmov.f32	s1, s17
 8006248:	f000 fe46 	bl	8006ed8 <finite>
 800624c:	2800      	cmp	r0, #0
 800624e:	d0ea      	beq.n	8006226 <pow+0xa2>
 8006250:	ec45 4b10 	vmov	d0, r4, r5
 8006254:	f000 fe40 	bl	8006ed8 <finite>
 8006258:	e7c3      	b.n	80061e2 <pow+0x5e>
 800625a:	4f01      	ldr	r7, [pc, #4]	; (8006260 <pow+0xdc>)
 800625c:	2600      	movs	r6, #0
 800625e:	e7e2      	b.n	8006226 <pow+0xa2>
 8006260:	3ff00000 	.word	0x3ff00000

08006264 <sqrtf>:
 8006264:	b508      	push	{r3, lr}
 8006266:	ed2d 8b02 	vpush	{d8}
 800626a:	eeb0 8a40 	vmov.f32	s16, s0
 800626e:	f000 fdf7 	bl	8006e60 <__ieee754_sqrtf>
 8006272:	eeb4 8a48 	vcmp.f32	s16, s16
 8006276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800627a:	d60c      	bvs.n	8006296 <sqrtf+0x32>
 800627c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800629c <sqrtf+0x38>
 8006280:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006288:	d505      	bpl.n	8006296 <sqrtf+0x32>
 800628a:	f000 feb7 	bl	8006ffc <__errno>
 800628e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006292:	2321      	movs	r3, #33	; 0x21
 8006294:	6003      	str	r3, [r0, #0]
 8006296:	ecbd 8b02 	vpop	{d8}
 800629a:	bd08      	pop	{r3, pc}
 800629c:	00000000 	.word	0x00000000

080062a0 <__ieee754_pow>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	ed2d 8b06 	vpush	{d8-d10}
 80062a8:	b089      	sub	sp, #36	; 0x24
 80062aa:	ed8d 1b00 	vstr	d1, [sp]
 80062ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80062b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80062b6:	ea58 0102 	orrs.w	r1, r8, r2
 80062ba:	ec57 6b10 	vmov	r6, r7, d0
 80062be:	d115      	bne.n	80062ec <__ieee754_pow+0x4c>
 80062c0:	19b3      	adds	r3, r6, r6
 80062c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80062c6:	4152      	adcs	r2, r2
 80062c8:	4299      	cmp	r1, r3
 80062ca:	4b89      	ldr	r3, [pc, #548]	; (80064f0 <__ieee754_pow+0x250>)
 80062cc:	4193      	sbcs	r3, r2
 80062ce:	f080 84d2 	bcs.w	8006c76 <__ieee754_pow+0x9d6>
 80062d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062d6:	4630      	mov	r0, r6
 80062d8:	4639      	mov	r1, r7
 80062da:	f7f9 ff97 	bl	800020c <__adddf3>
 80062de:	ec41 0b10 	vmov	d0, r0, r1
 80062e2:	b009      	add	sp, #36	; 0x24
 80062e4:	ecbd 8b06 	vpop	{d8-d10}
 80062e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ec:	4b81      	ldr	r3, [pc, #516]	; (80064f4 <__ieee754_pow+0x254>)
 80062ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80062f2:	429c      	cmp	r4, r3
 80062f4:	ee10 aa10 	vmov	sl, s0
 80062f8:	463d      	mov	r5, r7
 80062fa:	dc06      	bgt.n	800630a <__ieee754_pow+0x6a>
 80062fc:	d101      	bne.n	8006302 <__ieee754_pow+0x62>
 80062fe:	2e00      	cmp	r6, #0
 8006300:	d1e7      	bne.n	80062d2 <__ieee754_pow+0x32>
 8006302:	4598      	cmp	r8, r3
 8006304:	dc01      	bgt.n	800630a <__ieee754_pow+0x6a>
 8006306:	d10f      	bne.n	8006328 <__ieee754_pow+0x88>
 8006308:	b172      	cbz	r2, 8006328 <__ieee754_pow+0x88>
 800630a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800630e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006312:	ea55 050a 	orrs.w	r5, r5, sl
 8006316:	d1dc      	bne.n	80062d2 <__ieee754_pow+0x32>
 8006318:	e9dd 3200 	ldrd	r3, r2, [sp]
 800631c:	18db      	adds	r3, r3, r3
 800631e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006322:	4152      	adcs	r2, r2
 8006324:	429d      	cmp	r5, r3
 8006326:	e7d0      	b.n	80062ca <__ieee754_pow+0x2a>
 8006328:	2d00      	cmp	r5, #0
 800632a:	da3b      	bge.n	80063a4 <__ieee754_pow+0x104>
 800632c:	4b72      	ldr	r3, [pc, #456]	; (80064f8 <__ieee754_pow+0x258>)
 800632e:	4598      	cmp	r8, r3
 8006330:	dc51      	bgt.n	80063d6 <__ieee754_pow+0x136>
 8006332:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006336:	4598      	cmp	r8, r3
 8006338:	f340 84ac 	ble.w	8006c94 <__ieee754_pow+0x9f4>
 800633c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006340:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006344:	2b14      	cmp	r3, #20
 8006346:	dd0f      	ble.n	8006368 <__ieee754_pow+0xc8>
 8006348:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800634c:	fa22 f103 	lsr.w	r1, r2, r3
 8006350:	fa01 f303 	lsl.w	r3, r1, r3
 8006354:	4293      	cmp	r3, r2
 8006356:	f040 849d 	bne.w	8006c94 <__ieee754_pow+0x9f4>
 800635a:	f001 0101 	and.w	r1, r1, #1
 800635e:	f1c1 0302 	rsb	r3, r1, #2
 8006362:	9304      	str	r3, [sp, #16]
 8006364:	b182      	cbz	r2, 8006388 <__ieee754_pow+0xe8>
 8006366:	e05f      	b.n	8006428 <__ieee754_pow+0x188>
 8006368:	2a00      	cmp	r2, #0
 800636a:	d15b      	bne.n	8006424 <__ieee754_pow+0x184>
 800636c:	f1c3 0314 	rsb	r3, r3, #20
 8006370:	fa48 f103 	asr.w	r1, r8, r3
 8006374:	fa01 f303 	lsl.w	r3, r1, r3
 8006378:	4543      	cmp	r3, r8
 800637a:	f040 8488 	bne.w	8006c8e <__ieee754_pow+0x9ee>
 800637e:	f001 0101 	and.w	r1, r1, #1
 8006382:	f1c1 0302 	rsb	r3, r1, #2
 8006386:	9304      	str	r3, [sp, #16]
 8006388:	4b5c      	ldr	r3, [pc, #368]	; (80064fc <__ieee754_pow+0x25c>)
 800638a:	4598      	cmp	r8, r3
 800638c:	d132      	bne.n	80063f4 <__ieee754_pow+0x154>
 800638e:	f1b9 0f00 	cmp.w	r9, #0
 8006392:	f280 8478 	bge.w	8006c86 <__ieee754_pow+0x9e6>
 8006396:	4959      	ldr	r1, [pc, #356]	; (80064fc <__ieee754_pow+0x25c>)
 8006398:	4632      	mov	r2, r6
 800639a:	463b      	mov	r3, r7
 800639c:	2000      	movs	r0, #0
 800639e:	f7fa fa15 	bl	80007cc <__aeabi_ddiv>
 80063a2:	e79c      	b.n	80062de <__ieee754_pow+0x3e>
 80063a4:	2300      	movs	r3, #0
 80063a6:	9304      	str	r3, [sp, #16]
 80063a8:	2a00      	cmp	r2, #0
 80063aa:	d13d      	bne.n	8006428 <__ieee754_pow+0x188>
 80063ac:	4b51      	ldr	r3, [pc, #324]	; (80064f4 <__ieee754_pow+0x254>)
 80063ae:	4598      	cmp	r8, r3
 80063b0:	d1ea      	bne.n	8006388 <__ieee754_pow+0xe8>
 80063b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80063b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80063ba:	ea53 030a 	orrs.w	r3, r3, sl
 80063be:	f000 845a 	beq.w	8006c76 <__ieee754_pow+0x9d6>
 80063c2:	4b4f      	ldr	r3, [pc, #316]	; (8006500 <__ieee754_pow+0x260>)
 80063c4:	429c      	cmp	r4, r3
 80063c6:	dd08      	ble.n	80063da <__ieee754_pow+0x13a>
 80063c8:	f1b9 0f00 	cmp.w	r9, #0
 80063cc:	f2c0 8457 	blt.w	8006c7e <__ieee754_pow+0x9de>
 80063d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063d4:	e783      	b.n	80062de <__ieee754_pow+0x3e>
 80063d6:	2302      	movs	r3, #2
 80063d8:	e7e5      	b.n	80063a6 <__ieee754_pow+0x106>
 80063da:	f1b9 0f00 	cmp.w	r9, #0
 80063de:	f04f 0000 	mov.w	r0, #0
 80063e2:	f04f 0100 	mov.w	r1, #0
 80063e6:	f6bf af7a 	bge.w	80062de <__ieee754_pow+0x3e>
 80063ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80063ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80063f2:	e774      	b.n	80062de <__ieee754_pow+0x3e>
 80063f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80063f8:	d106      	bne.n	8006408 <__ieee754_pow+0x168>
 80063fa:	4632      	mov	r2, r6
 80063fc:	463b      	mov	r3, r7
 80063fe:	4630      	mov	r0, r6
 8006400:	4639      	mov	r1, r7
 8006402:	f7fa f8b9 	bl	8000578 <__aeabi_dmul>
 8006406:	e76a      	b.n	80062de <__ieee754_pow+0x3e>
 8006408:	4b3e      	ldr	r3, [pc, #248]	; (8006504 <__ieee754_pow+0x264>)
 800640a:	4599      	cmp	r9, r3
 800640c:	d10c      	bne.n	8006428 <__ieee754_pow+0x188>
 800640e:	2d00      	cmp	r5, #0
 8006410:	db0a      	blt.n	8006428 <__ieee754_pow+0x188>
 8006412:	ec47 6b10 	vmov	d0, r6, r7
 8006416:	b009      	add	sp, #36	; 0x24
 8006418:	ecbd 8b06 	vpop	{d8-d10}
 800641c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006420:	f000 bc6c 	b.w	8006cfc <__ieee754_sqrt>
 8006424:	2300      	movs	r3, #0
 8006426:	9304      	str	r3, [sp, #16]
 8006428:	ec47 6b10 	vmov	d0, r6, r7
 800642c:	f000 fd4b 	bl	8006ec6 <fabs>
 8006430:	ec51 0b10 	vmov	r0, r1, d0
 8006434:	f1ba 0f00 	cmp.w	sl, #0
 8006438:	d129      	bne.n	800648e <__ieee754_pow+0x1ee>
 800643a:	b124      	cbz	r4, 8006446 <__ieee754_pow+0x1a6>
 800643c:	4b2f      	ldr	r3, [pc, #188]	; (80064fc <__ieee754_pow+0x25c>)
 800643e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006442:	429a      	cmp	r2, r3
 8006444:	d123      	bne.n	800648e <__ieee754_pow+0x1ee>
 8006446:	f1b9 0f00 	cmp.w	r9, #0
 800644a:	da05      	bge.n	8006458 <__ieee754_pow+0x1b8>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	2000      	movs	r0, #0
 8006452:	492a      	ldr	r1, [pc, #168]	; (80064fc <__ieee754_pow+0x25c>)
 8006454:	f7fa f9ba 	bl	80007cc <__aeabi_ddiv>
 8006458:	2d00      	cmp	r5, #0
 800645a:	f6bf af40 	bge.w	80062de <__ieee754_pow+0x3e>
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006464:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006468:	4323      	orrs	r3, r4
 800646a:	d108      	bne.n	800647e <__ieee754_pow+0x1de>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4610      	mov	r0, r2
 8006472:	4619      	mov	r1, r3
 8006474:	f7f9 fec8 	bl	8000208 <__aeabi_dsub>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	e78f      	b.n	800639e <__ieee754_pow+0xfe>
 800647e:	9b04      	ldr	r3, [sp, #16]
 8006480:	2b01      	cmp	r3, #1
 8006482:	f47f af2c 	bne.w	80062de <__ieee754_pow+0x3e>
 8006486:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800648a:	4619      	mov	r1, r3
 800648c:	e727      	b.n	80062de <__ieee754_pow+0x3e>
 800648e:	0feb      	lsrs	r3, r5, #31
 8006490:	3b01      	subs	r3, #1
 8006492:	9306      	str	r3, [sp, #24]
 8006494:	9a06      	ldr	r2, [sp, #24]
 8006496:	9b04      	ldr	r3, [sp, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	d102      	bne.n	80064a2 <__ieee754_pow+0x202>
 800649c:	4632      	mov	r2, r6
 800649e:	463b      	mov	r3, r7
 80064a0:	e7e6      	b.n	8006470 <__ieee754_pow+0x1d0>
 80064a2:	4b19      	ldr	r3, [pc, #100]	; (8006508 <__ieee754_pow+0x268>)
 80064a4:	4598      	cmp	r8, r3
 80064a6:	f340 80fb 	ble.w	80066a0 <__ieee754_pow+0x400>
 80064aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80064ae:	4598      	cmp	r8, r3
 80064b0:	4b13      	ldr	r3, [pc, #76]	; (8006500 <__ieee754_pow+0x260>)
 80064b2:	dd0c      	ble.n	80064ce <__ieee754_pow+0x22e>
 80064b4:	429c      	cmp	r4, r3
 80064b6:	dc0f      	bgt.n	80064d8 <__ieee754_pow+0x238>
 80064b8:	f1b9 0f00 	cmp.w	r9, #0
 80064bc:	da0f      	bge.n	80064de <__ieee754_pow+0x23e>
 80064be:	2000      	movs	r0, #0
 80064c0:	b009      	add	sp, #36	; 0x24
 80064c2:	ecbd 8b06 	vpop	{d8-d10}
 80064c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ca:	f000 bcf3 	b.w	8006eb4 <__math_oflow>
 80064ce:	429c      	cmp	r4, r3
 80064d0:	dbf2      	blt.n	80064b8 <__ieee754_pow+0x218>
 80064d2:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <__ieee754_pow+0x25c>)
 80064d4:	429c      	cmp	r4, r3
 80064d6:	dd19      	ble.n	800650c <__ieee754_pow+0x26c>
 80064d8:	f1b9 0f00 	cmp.w	r9, #0
 80064dc:	dcef      	bgt.n	80064be <__ieee754_pow+0x21e>
 80064de:	2000      	movs	r0, #0
 80064e0:	b009      	add	sp, #36	; 0x24
 80064e2:	ecbd 8b06 	vpop	{d8-d10}
 80064e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	f000 bcda 	b.w	8006ea2 <__math_uflow>
 80064ee:	bf00      	nop
 80064f0:	fff00000 	.word	0xfff00000
 80064f4:	7ff00000 	.word	0x7ff00000
 80064f8:	433fffff 	.word	0x433fffff
 80064fc:	3ff00000 	.word	0x3ff00000
 8006500:	3fefffff 	.word	0x3fefffff
 8006504:	3fe00000 	.word	0x3fe00000
 8006508:	41e00000 	.word	0x41e00000
 800650c:	4b60      	ldr	r3, [pc, #384]	; (8006690 <__ieee754_pow+0x3f0>)
 800650e:	2200      	movs	r2, #0
 8006510:	f7f9 fe7a 	bl	8000208 <__aeabi_dsub>
 8006514:	a354      	add	r3, pc, #336	; (adr r3, 8006668 <__ieee754_pow+0x3c8>)
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	4604      	mov	r4, r0
 800651c:	460d      	mov	r5, r1
 800651e:	f7fa f82b 	bl	8000578 <__aeabi_dmul>
 8006522:	a353      	add	r3, pc, #332	; (adr r3, 8006670 <__ieee754_pow+0x3d0>)
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	4606      	mov	r6, r0
 800652a:	460f      	mov	r7, r1
 800652c:	4620      	mov	r0, r4
 800652e:	4629      	mov	r1, r5
 8006530:	f7fa f822 	bl	8000578 <__aeabi_dmul>
 8006534:	4b57      	ldr	r3, [pc, #348]	; (8006694 <__ieee754_pow+0x3f4>)
 8006536:	4682      	mov	sl, r0
 8006538:	468b      	mov	fp, r1
 800653a:	2200      	movs	r2, #0
 800653c:	4620      	mov	r0, r4
 800653e:	4629      	mov	r1, r5
 8006540:	f7fa f81a 	bl	8000578 <__aeabi_dmul>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	a14b      	add	r1, pc, #300	; (adr r1, 8006678 <__ieee754_pow+0x3d8>)
 800654a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800654e:	f7f9 fe5b 	bl	8000208 <__aeabi_dsub>
 8006552:	4622      	mov	r2, r4
 8006554:	462b      	mov	r3, r5
 8006556:	f7fa f80f 	bl	8000578 <__aeabi_dmul>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	2000      	movs	r0, #0
 8006560:	494d      	ldr	r1, [pc, #308]	; (8006698 <__ieee754_pow+0x3f8>)
 8006562:	f7f9 fe51 	bl	8000208 <__aeabi_dsub>
 8006566:	4622      	mov	r2, r4
 8006568:	4680      	mov	r8, r0
 800656a:	4689      	mov	r9, r1
 800656c:	462b      	mov	r3, r5
 800656e:	4620      	mov	r0, r4
 8006570:	4629      	mov	r1, r5
 8006572:	f7fa f801 	bl	8000578 <__aeabi_dmul>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7f9 fffb 	bl	8000578 <__aeabi_dmul>
 8006582:	a33f      	add	r3, pc, #252	; (adr r3, 8006680 <__ieee754_pow+0x3e0>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 fff6 	bl	8000578 <__aeabi_dmul>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4650      	mov	r0, sl
 8006592:	4659      	mov	r1, fp
 8006594:	f7f9 fe38 	bl	8000208 <__aeabi_dsub>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4680      	mov	r8, r0
 800659e:	4689      	mov	r9, r1
 80065a0:	4630      	mov	r0, r6
 80065a2:	4639      	mov	r1, r7
 80065a4:	f7f9 fe32 	bl	800020c <__adddf3>
 80065a8:	2000      	movs	r0, #0
 80065aa:	4632      	mov	r2, r6
 80065ac:	463b      	mov	r3, r7
 80065ae:	4604      	mov	r4, r0
 80065b0:	460d      	mov	r5, r1
 80065b2:	f7f9 fe29 	bl	8000208 <__aeabi_dsub>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4640      	mov	r0, r8
 80065bc:	4649      	mov	r1, r9
 80065be:	f7f9 fe23 	bl	8000208 <__aeabi_dsub>
 80065c2:	9b04      	ldr	r3, [sp, #16]
 80065c4:	9a06      	ldr	r2, [sp, #24]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	4313      	orrs	r3, r2
 80065ca:	4682      	mov	sl, r0
 80065cc:	468b      	mov	fp, r1
 80065ce:	f040 81e7 	bne.w	80069a0 <__ieee754_pow+0x700>
 80065d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006688 <__ieee754_pow+0x3e8>
 80065d6:	eeb0 8a47 	vmov.f32	s16, s14
 80065da:	eef0 8a67 	vmov.f32	s17, s15
 80065de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80065e2:	2600      	movs	r6, #0
 80065e4:	4632      	mov	r2, r6
 80065e6:	463b      	mov	r3, r7
 80065e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ec:	f7f9 fe0c 	bl	8000208 <__aeabi_dsub>
 80065f0:	4622      	mov	r2, r4
 80065f2:	462b      	mov	r3, r5
 80065f4:	f7f9 ffc0 	bl	8000578 <__aeabi_dmul>
 80065f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	4650      	mov	r0, sl
 8006602:	4659      	mov	r1, fp
 8006604:	f7f9 ffb8 	bl	8000578 <__aeabi_dmul>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4640      	mov	r0, r8
 800660e:	4649      	mov	r1, r9
 8006610:	f7f9 fdfc 	bl	800020c <__adddf3>
 8006614:	4632      	mov	r2, r6
 8006616:	463b      	mov	r3, r7
 8006618:	4680      	mov	r8, r0
 800661a:	4689      	mov	r9, r1
 800661c:	4620      	mov	r0, r4
 800661e:	4629      	mov	r1, r5
 8006620:	f7f9 ffaa 	bl	8000578 <__aeabi_dmul>
 8006624:	460b      	mov	r3, r1
 8006626:	4604      	mov	r4, r0
 8006628:	460d      	mov	r5, r1
 800662a:	4602      	mov	r2, r0
 800662c:	4649      	mov	r1, r9
 800662e:	4640      	mov	r0, r8
 8006630:	f7f9 fdec 	bl	800020c <__adddf3>
 8006634:	4b19      	ldr	r3, [pc, #100]	; (800669c <__ieee754_pow+0x3fc>)
 8006636:	4299      	cmp	r1, r3
 8006638:	ec45 4b19 	vmov	d9, r4, r5
 800663c:	4606      	mov	r6, r0
 800663e:	460f      	mov	r7, r1
 8006640:	468b      	mov	fp, r1
 8006642:	f340 82f1 	ble.w	8006c28 <__ieee754_pow+0x988>
 8006646:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800664a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800664e:	4303      	orrs	r3, r0
 8006650:	f000 81e4 	beq.w	8006a1c <__ieee754_pow+0x77c>
 8006654:	ec51 0b18 	vmov	r0, r1, d8
 8006658:	2200      	movs	r2, #0
 800665a:	2300      	movs	r3, #0
 800665c:	f7fa f9fe 	bl	8000a5c <__aeabi_dcmplt>
 8006660:	3800      	subs	r0, #0
 8006662:	bf18      	it	ne
 8006664:	2001      	movne	r0, #1
 8006666:	e72b      	b.n	80064c0 <__ieee754_pow+0x220>
 8006668:	60000000 	.word	0x60000000
 800666c:	3ff71547 	.word	0x3ff71547
 8006670:	f85ddf44 	.word	0xf85ddf44
 8006674:	3e54ae0b 	.word	0x3e54ae0b
 8006678:	55555555 	.word	0x55555555
 800667c:	3fd55555 	.word	0x3fd55555
 8006680:	652b82fe 	.word	0x652b82fe
 8006684:	3ff71547 	.word	0x3ff71547
 8006688:	00000000 	.word	0x00000000
 800668c:	bff00000 	.word	0xbff00000
 8006690:	3ff00000 	.word	0x3ff00000
 8006694:	3fd00000 	.word	0x3fd00000
 8006698:	3fe00000 	.word	0x3fe00000
 800669c:	408fffff 	.word	0x408fffff
 80066a0:	4bd5      	ldr	r3, [pc, #852]	; (80069f8 <__ieee754_pow+0x758>)
 80066a2:	402b      	ands	r3, r5
 80066a4:	2200      	movs	r2, #0
 80066a6:	b92b      	cbnz	r3, 80066b4 <__ieee754_pow+0x414>
 80066a8:	4bd4      	ldr	r3, [pc, #848]	; (80069fc <__ieee754_pow+0x75c>)
 80066aa:	f7f9 ff65 	bl	8000578 <__aeabi_dmul>
 80066ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80066b2:	460c      	mov	r4, r1
 80066b4:	1523      	asrs	r3, r4, #20
 80066b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80066ba:	4413      	add	r3, r2
 80066bc:	9305      	str	r3, [sp, #20]
 80066be:	4bd0      	ldr	r3, [pc, #832]	; (8006a00 <__ieee754_pow+0x760>)
 80066c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80066c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80066c8:	429c      	cmp	r4, r3
 80066ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80066ce:	dd08      	ble.n	80066e2 <__ieee754_pow+0x442>
 80066d0:	4bcc      	ldr	r3, [pc, #816]	; (8006a04 <__ieee754_pow+0x764>)
 80066d2:	429c      	cmp	r4, r3
 80066d4:	f340 8162 	ble.w	800699c <__ieee754_pow+0x6fc>
 80066d8:	9b05      	ldr	r3, [sp, #20]
 80066da:	3301      	adds	r3, #1
 80066dc:	9305      	str	r3, [sp, #20]
 80066de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80066e2:	2400      	movs	r4, #0
 80066e4:	00e3      	lsls	r3, r4, #3
 80066e6:	9307      	str	r3, [sp, #28]
 80066e8:	4bc7      	ldr	r3, [pc, #796]	; (8006a08 <__ieee754_pow+0x768>)
 80066ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066ee:	ed93 7b00 	vldr	d7, [r3]
 80066f2:	4629      	mov	r1, r5
 80066f4:	ec53 2b17 	vmov	r2, r3, d7
 80066f8:	eeb0 9a47 	vmov.f32	s18, s14
 80066fc:	eef0 9a67 	vmov.f32	s19, s15
 8006700:	4682      	mov	sl, r0
 8006702:	f7f9 fd81 	bl	8000208 <__aeabi_dsub>
 8006706:	4652      	mov	r2, sl
 8006708:	4606      	mov	r6, r0
 800670a:	460f      	mov	r7, r1
 800670c:	462b      	mov	r3, r5
 800670e:	ec51 0b19 	vmov	r0, r1, d9
 8006712:	f7f9 fd7b 	bl	800020c <__adddf3>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	2000      	movs	r0, #0
 800671c:	49bb      	ldr	r1, [pc, #748]	; (8006a0c <__ieee754_pow+0x76c>)
 800671e:	f7fa f855 	bl	80007cc <__aeabi_ddiv>
 8006722:	ec41 0b1a 	vmov	d10, r0, r1
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	f7f9 ff23 	bl	8000578 <__aeabi_dmul>
 8006732:	2300      	movs	r3, #0
 8006734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006738:	9302      	str	r3, [sp, #8]
 800673a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800673e:	46ab      	mov	fp, r5
 8006740:	106d      	asrs	r5, r5, #1
 8006742:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006746:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800674a:	ec41 0b18 	vmov	d8, r0, r1
 800674e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006752:	2200      	movs	r2, #0
 8006754:	4640      	mov	r0, r8
 8006756:	4649      	mov	r1, r9
 8006758:	4614      	mov	r4, r2
 800675a:	461d      	mov	r5, r3
 800675c:	f7f9 ff0c 	bl	8000578 <__aeabi_dmul>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4630      	mov	r0, r6
 8006766:	4639      	mov	r1, r7
 8006768:	f7f9 fd4e 	bl	8000208 <__aeabi_dsub>
 800676c:	ec53 2b19 	vmov	r2, r3, d9
 8006770:	4606      	mov	r6, r0
 8006772:	460f      	mov	r7, r1
 8006774:	4620      	mov	r0, r4
 8006776:	4629      	mov	r1, r5
 8006778:	f7f9 fd46 	bl	8000208 <__aeabi_dsub>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4650      	mov	r0, sl
 8006782:	4659      	mov	r1, fp
 8006784:	f7f9 fd40 	bl	8000208 <__aeabi_dsub>
 8006788:	4642      	mov	r2, r8
 800678a:	464b      	mov	r3, r9
 800678c:	f7f9 fef4 	bl	8000578 <__aeabi_dmul>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4630      	mov	r0, r6
 8006796:	4639      	mov	r1, r7
 8006798:	f7f9 fd36 	bl	8000208 <__aeabi_dsub>
 800679c:	ec53 2b1a 	vmov	r2, r3, d10
 80067a0:	f7f9 feea 	bl	8000578 <__aeabi_dmul>
 80067a4:	ec53 2b18 	vmov	r2, r3, d8
 80067a8:	ec41 0b19 	vmov	d9, r0, r1
 80067ac:	ec51 0b18 	vmov	r0, r1, d8
 80067b0:	f7f9 fee2 	bl	8000578 <__aeabi_dmul>
 80067b4:	a37c      	add	r3, pc, #496	; (adr r3, 80069a8 <__ieee754_pow+0x708>)
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	4604      	mov	r4, r0
 80067bc:	460d      	mov	r5, r1
 80067be:	f7f9 fedb 	bl	8000578 <__aeabi_dmul>
 80067c2:	a37b      	add	r3, pc, #492	; (adr r3, 80069b0 <__ieee754_pow+0x710>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f7f9 fd20 	bl	800020c <__adddf3>
 80067cc:	4622      	mov	r2, r4
 80067ce:	462b      	mov	r3, r5
 80067d0:	f7f9 fed2 	bl	8000578 <__aeabi_dmul>
 80067d4:	a378      	add	r3, pc, #480	; (adr r3, 80069b8 <__ieee754_pow+0x718>)
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f7f9 fd17 	bl	800020c <__adddf3>
 80067de:	4622      	mov	r2, r4
 80067e0:	462b      	mov	r3, r5
 80067e2:	f7f9 fec9 	bl	8000578 <__aeabi_dmul>
 80067e6:	a376      	add	r3, pc, #472	; (adr r3, 80069c0 <__ieee754_pow+0x720>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7f9 fd0e 	bl	800020c <__adddf3>
 80067f0:	4622      	mov	r2, r4
 80067f2:	462b      	mov	r3, r5
 80067f4:	f7f9 fec0 	bl	8000578 <__aeabi_dmul>
 80067f8:	a373      	add	r3, pc, #460	; (adr r3, 80069c8 <__ieee754_pow+0x728>)
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f7f9 fd05 	bl	800020c <__adddf3>
 8006802:	4622      	mov	r2, r4
 8006804:	462b      	mov	r3, r5
 8006806:	f7f9 feb7 	bl	8000578 <__aeabi_dmul>
 800680a:	a371      	add	r3, pc, #452	; (adr r3, 80069d0 <__ieee754_pow+0x730>)
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f7f9 fcfc 	bl	800020c <__adddf3>
 8006814:	4622      	mov	r2, r4
 8006816:	4606      	mov	r6, r0
 8006818:	460f      	mov	r7, r1
 800681a:	462b      	mov	r3, r5
 800681c:	4620      	mov	r0, r4
 800681e:	4629      	mov	r1, r5
 8006820:	f7f9 feaa 	bl	8000578 <__aeabi_dmul>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4630      	mov	r0, r6
 800682a:	4639      	mov	r1, r7
 800682c:	f7f9 fea4 	bl	8000578 <__aeabi_dmul>
 8006830:	4642      	mov	r2, r8
 8006832:	4604      	mov	r4, r0
 8006834:	460d      	mov	r5, r1
 8006836:	464b      	mov	r3, r9
 8006838:	ec51 0b18 	vmov	r0, r1, d8
 800683c:	f7f9 fce6 	bl	800020c <__adddf3>
 8006840:	ec53 2b19 	vmov	r2, r3, d9
 8006844:	f7f9 fe98 	bl	8000578 <__aeabi_dmul>
 8006848:	4622      	mov	r2, r4
 800684a:	462b      	mov	r3, r5
 800684c:	f7f9 fcde 	bl	800020c <__adddf3>
 8006850:	4642      	mov	r2, r8
 8006852:	4682      	mov	sl, r0
 8006854:	468b      	mov	fp, r1
 8006856:	464b      	mov	r3, r9
 8006858:	4640      	mov	r0, r8
 800685a:	4649      	mov	r1, r9
 800685c:	f7f9 fe8c 	bl	8000578 <__aeabi_dmul>
 8006860:	4b6b      	ldr	r3, [pc, #428]	; (8006a10 <__ieee754_pow+0x770>)
 8006862:	2200      	movs	r2, #0
 8006864:	4606      	mov	r6, r0
 8006866:	460f      	mov	r7, r1
 8006868:	f7f9 fcd0 	bl	800020c <__adddf3>
 800686c:	4652      	mov	r2, sl
 800686e:	465b      	mov	r3, fp
 8006870:	f7f9 fccc 	bl	800020c <__adddf3>
 8006874:	2000      	movs	r0, #0
 8006876:	4604      	mov	r4, r0
 8006878:	460d      	mov	r5, r1
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	4640      	mov	r0, r8
 8006880:	4649      	mov	r1, r9
 8006882:	f7f9 fe79 	bl	8000578 <__aeabi_dmul>
 8006886:	4b62      	ldr	r3, [pc, #392]	; (8006a10 <__ieee754_pow+0x770>)
 8006888:	4680      	mov	r8, r0
 800688a:	4689      	mov	r9, r1
 800688c:	2200      	movs	r2, #0
 800688e:	4620      	mov	r0, r4
 8006890:	4629      	mov	r1, r5
 8006892:	f7f9 fcb9 	bl	8000208 <__aeabi_dsub>
 8006896:	4632      	mov	r2, r6
 8006898:	463b      	mov	r3, r7
 800689a:	f7f9 fcb5 	bl	8000208 <__aeabi_dsub>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4650      	mov	r0, sl
 80068a4:	4659      	mov	r1, fp
 80068a6:	f7f9 fcaf 	bl	8000208 <__aeabi_dsub>
 80068aa:	ec53 2b18 	vmov	r2, r3, d8
 80068ae:	f7f9 fe63 	bl	8000578 <__aeabi_dmul>
 80068b2:	4622      	mov	r2, r4
 80068b4:	4606      	mov	r6, r0
 80068b6:	460f      	mov	r7, r1
 80068b8:	462b      	mov	r3, r5
 80068ba:	ec51 0b19 	vmov	r0, r1, d9
 80068be:	f7f9 fe5b 	bl	8000578 <__aeabi_dmul>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4630      	mov	r0, r6
 80068c8:	4639      	mov	r1, r7
 80068ca:	f7f9 fc9f 	bl	800020c <__adddf3>
 80068ce:	4606      	mov	r6, r0
 80068d0:	460f      	mov	r7, r1
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4640      	mov	r0, r8
 80068d8:	4649      	mov	r1, r9
 80068da:	f7f9 fc97 	bl	800020c <__adddf3>
 80068de:	a33e      	add	r3, pc, #248	; (adr r3, 80069d8 <__ieee754_pow+0x738>)
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	2000      	movs	r0, #0
 80068e6:	4604      	mov	r4, r0
 80068e8:	460d      	mov	r5, r1
 80068ea:	f7f9 fe45 	bl	8000578 <__aeabi_dmul>
 80068ee:	4642      	mov	r2, r8
 80068f0:	ec41 0b18 	vmov	d8, r0, r1
 80068f4:	464b      	mov	r3, r9
 80068f6:	4620      	mov	r0, r4
 80068f8:	4629      	mov	r1, r5
 80068fa:	f7f9 fc85 	bl	8000208 <__aeabi_dsub>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4630      	mov	r0, r6
 8006904:	4639      	mov	r1, r7
 8006906:	f7f9 fc7f 	bl	8000208 <__aeabi_dsub>
 800690a:	a335      	add	r3, pc, #212	; (adr r3, 80069e0 <__ieee754_pow+0x740>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f7f9 fe32 	bl	8000578 <__aeabi_dmul>
 8006914:	a334      	add	r3, pc, #208	; (adr r3, 80069e8 <__ieee754_pow+0x748>)
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	4606      	mov	r6, r0
 800691c:	460f      	mov	r7, r1
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f7f9 fe29 	bl	8000578 <__aeabi_dmul>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4630      	mov	r0, r6
 800692c:	4639      	mov	r1, r7
 800692e:	f7f9 fc6d 	bl	800020c <__adddf3>
 8006932:	9a07      	ldr	r2, [sp, #28]
 8006934:	4b37      	ldr	r3, [pc, #220]	; (8006a14 <__ieee754_pow+0x774>)
 8006936:	4413      	add	r3, r2
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f7f9 fc66 	bl	800020c <__adddf3>
 8006940:	4682      	mov	sl, r0
 8006942:	9805      	ldr	r0, [sp, #20]
 8006944:	468b      	mov	fp, r1
 8006946:	f7f9 fdad 	bl	80004a4 <__aeabi_i2d>
 800694a:	9a07      	ldr	r2, [sp, #28]
 800694c:	4b32      	ldr	r3, [pc, #200]	; (8006a18 <__ieee754_pow+0x778>)
 800694e:	4413      	add	r3, r2
 8006950:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006954:	4606      	mov	r6, r0
 8006956:	460f      	mov	r7, r1
 8006958:	4652      	mov	r2, sl
 800695a:	465b      	mov	r3, fp
 800695c:	ec51 0b18 	vmov	r0, r1, d8
 8006960:	f7f9 fc54 	bl	800020c <__adddf3>
 8006964:	4642      	mov	r2, r8
 8006966:	464b      	mov	r3, r9
 8006968:	f7f9 fc50 	bl	800020c <__adddf3>
 800696c:	4632      	mov	r2, r6
 800696e:	463b      	mov	r3, r7
 8006970:	f7f9 fc4c 	bl	800020c <__adddf3>
 8006974:	2000      	movs	r0, #0
 8006976:	4632      	mov	r2, r6
 8006978:	463b      	mov	r3, r7
 800697a:	4604      	mov	r4, r0
 800697c:	460d      	mov	r5, r1
 800697e:	f7f9 fc43 	bl	8000208 <__aeabi_dsub>
 8006982:	4642      	mov	r2, r8
 8006984:	464b      	mov	r3, r9
 8006986:	f7f9 fc3f 	bl	8000208 <__aeabi_dsub>
 800698a:	ec53 2b18 	vmov	r2, r3, d8
 800698e:	f7f9 fc3b 	bl	8000208 <__aeabi_dsub>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4650      	mov	r0, sl
 8006998:	4659      	mov	r1, fp
 800699a:	e610      	b.n	80065be <__ieee754_pow+0x31e>
 800699c:	2401      	movs	r4, #1
 800699e:	e6a1      	b.n	80066e4 <__ieee754_pow+0x444>
 80069a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80069f0 <__ieee754_pow+0x750>
 80069a4:	e617      	b.n	80065d6 <__ieee754_pow+0x336>
 80069a6:	bf00      	nop
 80069a8:	4a454eef 	.word	0x4a454eef
 80069ac:	3fca7e28 	.word	0x3fca7e28
 80069b0:	93c9db65 	.word	0x93c9db65
 80069b4:	3fcd864a 	.word	0x3fcd864a
 80069b8:	a91d4101 	.word	0xa91d4101
 80069bc:	3fd17460 	.word	0x3fd17460
 80069c0:	518f264d 	.word	0x518f264d
 80069c4:	3fd55555 	.word	0x3fd55555
 80069c8:	db6fabff 	.word	0xdb6fabff
 80069cc:	3fdb6db6 	.word	0x3fdb6db6
 80069d0:	33333303 	.word	0x33333303
 80069d4:	3fe33333 	.word	0x3fe33333
 80069d8:	e0000000 	.word	0xe0000000
 80069dc:	3feec709 	.word	0x3feec709
 80069e0:	dc3a03fd 	.word	0xdc3a03fd
 80069e4:	3feec709 	.word	0x3feec709
 80069e8:	145b01f5 	.word	0x145b01f5
 80069ec:	be3e2fe0 	.word	0xbe3e2fe0
 80069f0:	00000000 	.word	0x00000000
 80069f4:	3ff00000 	.word	0x3ff00000
 80069f8:	7ff00000 	.word	0x7ff00000
 80069fc:	43400000 	.word	0x43400000
 8006a00:	0003988e 	.word	0x0003988e
 8006a04:	000bb679 	.word	0x000bb679
 8006a08:	08007290 	.word	0x08007290
 8006a0c:	3ff00000 	.word	0x3ff00000
 8006a10:	40080000 	.word	0x40080000
 8006a14:	080072b0 	.word	0x080072b0
 8006a18:	080072a0 	.word	0x080072a0
 8006a1c:	a3b5      	add	r3, pc, #724	; (adr r3, 8006cf4 <__ieee754_pow+0xa54>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f7f9 fbf1 	bl	800020c <__adddf3>
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	ec41 0b1a 	vmov	d10, r0, r1
 8006a30:	462b      	mov	r3, r5
 8006a32:	4630      	mov	r0, r6
 8006a34:	4639      	mov	r1, r7
 8006a36:	f7f9 fbe7 	bl	8000208 <__aeabi_dsub>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	ec51 0b1a 	vmov	r0, r1, d10
 8006a42:	f7fa f829 	bl	8000a98 <__aeabi_dcmpgt>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	f47f ae04 	bne.w	8006654 <__ieee754_pow+0x3b4>
 8006a4c:	4aa4      	ldr	r2, [pc, #656]	; (8006ce0 <__ieee754_pow+0xa40>)
 8006a4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a52:	4293      	cmp	r3, r2
 8006a54:	f340 8108 	ble.w	8006c68 <__ieee754_pow+0x9c8>
 8006a58:	151b      	asrs	r3, r3, #20
 8006a5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006a5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006a62:	fa4a f303 	asr.w	r3, sl, r3
 8006a66:	445b      	add	r3, fp
 8006a68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006a6c:	4e9d      	ldr	r6, [pc, #628]	; (8006ce4 <__ieee754_pow+0xa44>)
 8006a6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006a72:	4116      	asrs	r6, r2
 8006a74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006a78:	2000      	movs	r0, #0
 8006a7a:	ea23 0106 	bic.w	r1, r3, r6
 8006a7e:	f1c2 0214 	rsb	r2, r2, #20
 8006a82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006a86:	fa4a fa02 	asr.w	sl, sl, r2
 8006a8a:	f1bb 0f00 	cmp.w	fp, #0
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4620      	mov	r0, r4
 8006a94:	4629      	mov	r1, r5
 8006a96:	bfb8      	it	lt
 8006a98:	f1ca 0a00 	rsblt	sl, sl, #0
 8006a9c:	f7f9 fbb4 	bl	8000208 <__aeabi_dsub>
 8006aa0:	ec41 0b19 	vmov	d9, r0, r1
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	ec51 0b19 	vmov	r0, r1, d9
 8006aac:	f7f9 fbae 	bl	800020c <__adddf3>
 8006ab0:	a37b      	add	r3, pc, #492	; (adr r3, 8006ca0 <__ieee754_pow+0xa00>)
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	4604      	mov	r4, r0
 8006aba:	460d      	mov	r5, r1
 8006abc:	f7f9 fd5c 	bl	8000578 <__aeabi_dmul>
 8006ac0:	ec53 2b19 	vmov	r2, r3, d9
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	460f      	mov	r7, r1
 8006ac8:	4620      	mov	r0, r4
 8006aca:	4629      	mov	r1, r5
 8006acc:	f7f9 fb9c 	bl	8000208 <__aeabi_dsub>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	f7f9 fb96 	bl	8000208 <__aeabi_dsub>
 8006adc:	a372      	add	r3, pc, #456	; (adr r3, 8006ca8 <__ieee754_pow+0xa08>)
 8006ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae2:	f7f9 fd49 	bl	8000578 <__aeabi_dmul>
 8006ae6:	a372      	add	r3, pc, #456	; (adr r3, 8006cb0 <__ieee754_pow+0xa10>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	4680      	mov	r8, r0
 8006aee:	4689      	mov	r9, r1
 8006af0:	4620      	mov	r0, r4
 8006af2:	4629      	mov	r1, r5
 8006af4:	f7f9 fd40 	bl	8000578 <__aeabi_dmul>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4640      	mov	r0, r8
 8006afe:	4649      	mov	r1, r9
 8006b00:	f7f9 fb84 	bl	800020c <__adddf3>
 8006b04:	4604      	mov	r4, r0
 8006b06:	460d      	mov	r5, r1
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f7f9 fb7c 	bl	800020c <__adddf3>
 8006b14:	4632      	mov	r2, r6
 8006b16:	463b      	mov	r3, r7
 8006b18:	4680      	mov	r8, r0
 8006b1a:	4689      	mov	r9, r1
 8006b1c:	f7f9 fb74 	bl	8000208 <__aeabi_dsub>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4620      	mov	r0, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	f7f9 fb6e 	bl	8000208 <__aeabi_dsub>
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	4606      	mov	r6, r0
 8006b30:	460f      	mov	r7, r1
 8006b32:	464b      	mov	r3, r9
 8006b34:	4640      	mov	r0, r8
 8006b36:	4649      	mov	r1, r9
 8006b38:	f7f9 fd1e 	bl	8000578 <__aeabi_dmul>
 8006b3c:	a35e      	add	r3, pc, #376	; (adr r3, 8006cb8 <__ieee754_pow+0xa18>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	4604      	mov	r4, r0
 8006b44:	460d      	mov	r5, r1
 8006b46:	f7f9 fd17 	bl	8000578 <__aeabi_dmul>
 8006b4a:	a35d      	add	r3, pc, #372	; (adr r3, 8006cc0 <__ieee754_pow+0xa20>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f7f9 fb5a 	bl	8000208 <__aeabi_dsub>
 8006b54:	4622      	mov	r2, r4
 8006b56:	462b      	mov	r3, r5
 8006b58:	f7f9 fd0e 	bl	8000578 <__aeabi_dmul>
 8006b5c:	a35a      	add	r3, pc, #360	; (adr r3, 8006cc8 <__ieee754_pow+0xa28>)
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	f7f9 fb53 	bl	800020c <__adddf3>
 8006b66:	4622      	mov	r2, r4
 8006b68:	462b      	mov	r3, r5
 8006b6a:	f7f9 fd05 	bl	8000578 <__aeabi_dmul>
 8006b6e:	a358      	add	r3, pc, #352	; (adr r3, 8006cd0 <__ieee754_pow+0xa30>)
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f7f9 fb48 	bl	8000208 <__aeabi_dsub>
 8006b78:	4622      	mov	r2, r4
 8006b7a:	462b      	mov	r3, r5
 8006b7c:	f7f9 fcfc 	bl	8000578 <__aeabi_dmul>
 8006b80:	a355      	add	r3, pc, #340	; (adr r3, 8006cd8 <__ieee754_pow+0xa38>)
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	f7f9 fb41 	bl	800020c <__adddf3>
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	f7f9 fcf3 	bl	8000578 <__aeabi_dmul>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4640      	mov	r0, r8
 8006b98:	4649      	mov	r1, r9
 8006b9a:	f7f9 fb35 	bl	8000208 <__aeabi_dsub>
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	460d      	mov	r5, r1
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	4649      	mov	r1, r9
 8006baa:	f7f9 fce5 	bl	8000578 <__aeabi_dmul>
 8006bae:	2200      	movs	r2, #0
 8006bb0:	ec41 0b19 	vmov	d9, r0, r1
 8006bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bb8:	4620      	mov	r0, r4
 8006bba:	4629      	mov	r1, r5
 8006bbc:	f7f9 fb24 	bl	8000208 <__aeabi_dsub>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	ec51 0b19 	vmov	r0, r1, d9
 8006bc8:	f7f9 fe00 	bl	80007cc <__aeabi_ddiv>
 8006bcc:	4632      	mov	r2, r6
 8006bce:	4604      	mov	r4, r0
 8006bd0:	460d      	mov	r5, r1
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	f7f9 fcce 	bl	8000578 <__aeabi_dmul>
 8006bdc:	4632      	mov	r2, r6
 8006bde:	463b      	mov	r3, r7
 8006be0:	f7f9 fb14 	bl	800020c <__adddf3>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4620      	mov	r0, r4
 8006bea:	4629      	mov	r1, r5
 8006bec:	f7f9 fb0c 	bl	8000208 <__aeabi_dsub>
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	f7f9 fb08 	bl	8000208 <__aeabi_dsub>
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	493a      	ldr	r1, [pc, #232]	; (8006ce8 <__ieee754_pow+0xa48>)
 8006bfe:	2000      	movs	r0, #0
 8006c00:	f7f9 fb02 	bl	8000208 <__aeabi_dsub>
 8006c04:	ec41 0b10 	vmov	d0, r0, r1
 8006c08:	ee10 3a90 	vmov	r3, s1
 8006c0c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c14:	da2b      	bge.n	8006c6e <__ieee754_pow+0x9ce>
 8006c16:	4650      	mov	r0, sl
 8006c18:	f000 f96a 	bl	8006ef0 <scalbn>
 8006c1c:	ec51 0b10 	vmov	r0, r1, d0
 8006c20:	ec53 2b18 	vmov	r2, r3, d8
 8006c24:	f7ff bbed 	b.w	8006402 <__ieee754_pow+0x162>
 8006c28:	4b30      	ldr	r3, [pc, #192]	; (8006cec <__ieee754_pow+0xa4c>)
 8006c2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006c2e:	429e      	cmp	r6, r3
 8006c30:	f77f af0c 	ble.w	8006a4c <__ieee754_pow+0x7ac>
 8006c34:	4b2e      	ldr	r3, [pc, #184]	; (8006cf0 <__ieee754_pow+0xa50>)
 8006c36:	440b      	add	r3, r1
 8006c38:	4303      	orrs	r3, r0
 8006c3a:	d009      	beq.n	8006c50 <__ieee754_pow+0x9b0>
 8006c3c:	ec51 0b18 	vmov	r0, r1, d8
 8006c40:	2200      	movs	r2, #0
 8006c42:	2300      	movs	r3, #0
 8006c44:	f7f9 ff0a 	bl	8000a5c <__aeabi_dcmplt>
 8006c48:	3800      	subs	r0, #0
 8006c4a:	bf18      	it	ne
 8006c4c:	2001      	movne	r0, #1
 8006c4e:	e447      	b.n	80064e0 <__ieee754_pow+0x240>
 8006c50:	4622      	mov	r2, r4
 8006c52:	462b      	mov	r3, r5
 8006c54:	f7f9 fad8 	bl	8000208 <__aeabi_dsub>
 8006c58:	4642      	mov	r2, r8
 8006c5a:	464b      	mov	r3, r9
 8006c5c:	f7f9 ff12 	bl	8000a84 <__aeabi_dcmpge>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	f43f aef3 	beq.w	8006a4c <__ieee754_pow+0x7ac>
 8006c66:	e7e9      	b.n	8006c3c <__ieee754_pow+0x99c>
 8006c68:	f04f 0a00 	mov.w	sl, #0
 8006c6c:	e71a      	b.n	8006aa4 <__ieee754_pow+0x804>
 8006c6e:	ec51 0b10 	vmov	r0, r1, d0
 8006c72:	4619      	mov	r1, r3
 8006c74:	e7d4      	b.n	8006c20 <__ieee754_pow+0x980>
 8006c76:	491c      	ldr	r1, [pc, #112]	; (8006ce8 <__ieee754_pow+0xa48>)
 8006c78:	2000      	movs	r0, #0
 8006c7a:	f7ff bb30 	b.w	80062de <__ieee754_pow+0x3e>
 8006c7e:	2000      	movs	r0, #0
 8006c80:	2100      	movs	r1, #0
 8006c82:	f7ff bb2c 	b.w	80062de <__ieee754_pow+0x3e>
 8006c86:	4630      	mov	r0, r6
 8006c88:	4639      	mov	r1, r7
 8006c8a:	f7ff bb28 	b.w	80062de <__ieee754_pow+0x3e>
 8006c8e:	9204      	str	r2, [sp, #16]
 8006c90:	f7ff bb7a 	b.w	8006388 <__ieee754_pow+0xe8>
 8006c94:	2300      	movs	r3, #0
 8006c96:	f7ff bb64 	b.w	8006362 <__ieee754_pow+0xc2>
 8006c9a:	bf00      	nop
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	00000000 	.word	0x00000000
 8006ca4:	3fe62e43 	.word	0x3fe62e43
 8006ca8:	fefa39ef 	.word	0xfefa39ef
 8006cac:	3fe62e42 	.word	0x3fe62e42
 8006cb0:	0ca86c39 	.word	0x0ca86c39
 8006cb4:	be205c61 	.word	0xbe205c61
 8006cb8:	72bea4d0 	.word	0x72bea4d0
 8006cbc:	3e663769 	.word	0x3e663769
 8006cc0:	c5d26bf1 	.word	0xc5d26bf1
 8006cc4:	3ebbbd41 	.word	0x3ebbbd41
 8006cc8:	af25de2c 	.word	0xaf25de2c
 8006ccc:	3f11566a 	.word	0x3f11566a
 8006cd0:	16bebd93 	.word	0x16bebd93
 8006cd4:	3f66c16c 	.word	0x3f66c16c
 8006cd8:	5555553e 	.word	0x5555553e
 8006cdc:	3fc55555 	.word	0x3fc55555
 8006ce0:	3fe00000 	.word	0x3fe00000
 8006ce4:	000fffff 	.word	0x000fffff
 8006ce8:	3ff00000 	.word	0x3ff00000
 8006cec:	4090cbff 	.word	0x4090cbff
 8006cf0:	3f6f3400 	.word	0x3f6f3400
 8006cf4:	652b82fe 	.word	0x652b82fe
 8006cf8:	3c971547 	.word	0x3c971547

08006cfc <__ieee754_sqrt>:
 8006cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d00:	ec55 4b10 	vmov	r4, r5, d0
 8006d04:	4e55      	ldr	r6, [pc, #340]	; (8006e5c <__ieee754_sqrt+0x160>)
 8006d06:	43ae      	bics	r6, r5
 8006d08:	ee10 0a10 	vmov	r0, s0
 8006d0c:	ee10 3a10 	vmov	r3, s0
 8006d10:	462a      	mov	r2, r5
 8006d12:	4629      	mov	r1, r5
 8006d14:	d110      	bne.n	8006d38 <__ieee754_sqrt+0x3c>
 8006d16:	ee10 2a10 	vmov	r2, s0
 8006d1a:	462b      	mov	r3, r5
 8006d1c:	f7f9 fc2c 	bl	8000578 <__aeabi_dmul>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4620      	mov	r0, r4
 8006d26:	4629      	mov	r1, r5
 8006d28:	f7f9 fa70 	bl	800020c <__adddf3>
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	460d      	mov	r5, r1
 8006d30:	ec45 4b10 	vmov	d0, r4, r5
 8006d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d38:	2d00      	cmp	r5, #0
 8006d3a:	dc10      	bgt.n	8006d5e <__ieee754_sqrt+0x62>
 8006d3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006d40:	4330      	orrs	r0, r6
 8006d42:	d0f5      	beq.n	8006d30 <__ieee754_sqrt+0x34>
 8006d44:	b15d      	cbz	r5, 8006d5e <__ieee754_sqrt+0x62>
 8006d46:	ee10 2a10 	vmov	r2, s0
 8006d4a:	462b      	mov	r3, r5
 8006d4c:	ee10 0a10 	vmov	r0, s0
 8006d50:	f7f9 fa5a 	bl	8000208 <__aeabi_dsub>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	f7f9 fd38 	bl	80007cc <__aeabi_ddiv>
 8006d5c:	e7e6      	b.n	8006d2c <__ieee754_sqrt+0x30>
 8006d5e:	1512      	asrs	r2, r2, #20
 8006d60:	d074      	beq.n	8006e4c <__ieee754_sqrt+0x150>
 8006d62:	07d4      	lsls	r4, r2, #31
 8006d64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006d68:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006d6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d70:	bf5e      	ittt	pl
 8006d72:	0fda      	lsrpl	r2, r3, #31
 8006d74:	005b      	lslpl	r3, r3, #1
 8006d76:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006d7a:	2400      	movs	r4, #0
 8006d7c:	0fda      	lsrs	r2, r3, #31
 8006d7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006d82:	107f      	asrs	r7, r7, #1
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	2516      	movs	r5, #22
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006d8e:	1886      	adds	r6, r0, r2
 8006d90:	428e      	cmp	r6, r1
 8006d92:	bfde      	ittt	le
 8006d94:	1b89      	suble	r1, r1, r6
 8006d96:	18b0      	addle	r0, r6, r2
 8006d98:	18a4      	addle	r4, r4, r2
 8006d9a:	0049      	lsls	r1, r1, #1
 8006d9c:	3d01      	subs	r5, #1
 8006d9e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006da2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006da6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006daa:	d1f0      	bne.n	8006d8e <__ieee754_sqrt+0x92>
 8006dac:	462a      	mov	r2, r5
 8006dae:	f04f 0e20 	mov.w	lr, #32
 8006db2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006db6:	4281      	cmp	r1, r0
 8006db8:	eb06 0c05 	add.w	ip, r6, r5
 8006dbc:	dc02      	bgt.n	8006dc4 <__ieee754_sqrt+0xc8>
 8006dbe:	d113      	bne.n	8006de8 <__ieee754_sqrt+0xec>
 8006dc0:	459c      	cmp	ip, r3
 8006dc2:	d811      	bhi.n	8006de8 <__ieee754_sqrt+0xec>
 8006dc4:	f1bc 0f00 	cmp.w	ip, #0
 8006dc8:	eb0c 0506 	add.w	r5, ip, r6
 8006dcc:	da43      	bge.n	8006e56 <__ieee754_sqrt+0x15a>
 8006dce:	2d00      	cmp	r5, #0
 8006dd0:	db41      	blt.n	8006e56 <__ieee754_sqrt+0x15a>
 8006dd2:	f100 0801 	add.w	r8, r0, #1
 8006dd6:	1a09      	subs	r1, r1, r0
 8006dd8:	459c      	cmp	ip, r3
 8006dda:	bf88      	it	hi
 8006ddc:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8006de0:	eba3 030c 	sub.w	r3, r3, ip
 8006de4:	4432      	add	r2, r6
 8006de6:	4640      	mov	r0, r8
 8006de8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006dec:	f1be 0e01 	subs.w	lr, lr, #1
 8006df0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006df4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006df8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006dfc:	d1db      	bne.n	8006db6 <__ieee754_sqrt+0xba>
 8006dfe:	430b      	orrs	r3, r1
 8006e00:	d006      	beq.n	8006e10 <__ieee754_sqrt+0x114>
 8006e02:	1c50      	adds	r0, r2, #1
 8006e04:	bf13      	iteet	ne
 8006e06:	3201      	addne	r2, #1
 8006e08:	3401      	addeq	r4, #1
 8006e0a:	4672      	moveq	r2, lr
 8006e0c:	f022 0201 	bicne.w	r2, r2, #1
 8006e10:	1063      	asrs	r3, r4, #1
 8006e12:	0852      	lsrs	r2, r2, #1
 8006e14:	07e1      	lsls	r1, r4, #31
 8006e16:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006e1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006e1e:	bf48      	it	mi
 8006e20:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006e24:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006e28:	4614      	mov	r4, r2
 8006e2a:	e781      	b.n	8006d30 <__ieee754_sqrt+0x34>
 8006e2c:	0ad9      	lsrs	r1, r3, #11
 8006e2e:	3815      	subs	r0, #21
 8006e30:	055b      	lsls	r3, r3, #21
 8006e32:	2900      	cmp	r1, #0
 8006e34:	d0fa      	beq.n	8006e2c <__ieee754_sqrt+0x130>
 8006e36:	02cd      	lsls	r5, r1, #11
 8006e38:	d50a      	bpl.n	8006e50 <__ieee754_sqrt+0x154>
 8006e3a:	f1c2 0420 	rsb	r4, r2, #32
 8006e3e:	fa23 f404 	lsr.w	r4, r3, r4
 8006e42:	1e55      	subs	r5, r2, #1
 8006e44:	4093      	lsls	r3, r2
 8006e46:	4321      	orrs	r1, r4
 8006e48:	1b42      	subs	r2, r0, r5
 8006e4a:	e78a      	b.n	8006d62 <__ieee754_sqrt+0x66>
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	e7f0      	b.n	8006e32 <__ieee754_sqrt+0x136>
 8006e50:	0049      	lsls	r1, r1, #1
 8006e52:	3201      	adds	r2, #1
 8006e54:	e7ef      	b.n	8006e36 <__ieee754_sqrt+0x13a>
 8006e56:	4680      	mov	r8, r0
 8006e58:	e7bd      	b.n	8006dd6 <__ieee754_sqrt+0xda>
 8006e5a:	bf00      	nop
 8006e5c:	7ff00000 	.word	0x7ff00000

08006e60 <__ieee754_sqrtf>:
 8006e60:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006e64:	4770      	bx	lr

08006e66 <with_errno>:
 8006e66:	b570      	push	{r4, r5, r6, lr}
 8006e68:	4604      	mov	r4, r0
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	f000 f8c5 	bl	8006ffc <__errno>
 8006e72:	4629      	mov	r1, r5
 8006e74:	6006      	str	r6, [r0, #0]
 8006e76:	4620      	mov	r0, r4
 8006e78:	bd70      	pop	{r4, r5, r6, pc}

08006e7a <xflow>:
 8006e7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	461d      	mov	r5, r3
 8006e80:	b108      	cbz	r0, 8006e86 <xflow+0xc>
 8006e82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e86:	e9cd 2300 	strd	r2, r3, [sp]
 8006e8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e8e:	4620      	mov	r0, r4
 8006e90:	4629      	mov	r1, r5
 8006e92:	f7f9 fb71 	bl	8000578 <__aeabi_dmul>
 8006e96:	2222      	movs	r2, #34	; 0x22
 8006e98:	b003      	add	sp, #12
 8006e9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e9e:	f7ff bfe2 	b.w	8006e66 <with_errno>

08006ea2 <__math_uflow>:
 8006ea2:	b508      	push	{r3, lr}
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006eaa:	f7ff ffe6 	bl	8006e7a <xflow>
 8006eae:	ec41 0b10 	vmov	d0, r0, r1
 8006eb2:	bd08      	pop	{r3, pc}

08006eb4 <__math_oflow>:
 8006eb4:	b508      	push	{r3, lr}
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006ebc:	f7ff ffdd 	bl	8006e7a <xflow>
 8006ec0:	ec41 0b10 	vmov	d0, r0, r1
 8006ec4:	bd08      	pop	{r3, pc}

08006ec6 <fabs>:
 8006ec6:	ec51 0b10 	vmov	r0, r1, d0
 8006eca:	ee10 2a10 	vmov	r2, s0
 8006ece:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ed2:	ec43 2b10 	vmov	d0, r2, r3
 8006ed6:	4770      	bx	lr

08006ed8 <finite>:
 8006ed8:	b082      	sub	sp, #8
 8006eda:	ed8d 0b00 	vstr	d0, [sp]
 8006ede:	9801      	ldr	r0, [sp, #4]
 8006ee0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006ee4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006ee8:	0fc0      	lsrs	r0, r0, #31
 8006eea:	b002      	add	sp, #8
 8006eec:	4770      	bx	lr
	...

08006ef0 <scalbn>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	ec55 4b10 	vmov	r4, r5, d0
 8006ef6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006efa:	4606      	mov	r6, r0
 8006efc:	462b      	mov	r3, r5
 8006efe:	b99a      	cbnz	r2, 8006f28 <scalbn+0x38>
 8006f00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f04:	4323      	orrs	r3, r4
 8006f06:	d036      	beq.n	8006f76 <scalbn+0x86>
 8006f08:	4b39      	ldr	r3, [pc, #228]	; (8006ff0 <scalbn+0x100>)
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	ee10 0a10 	vmov	r0, s0
 8006f10:	2200      	movs	r2, #0
 8006f12:	f7f9 fb31 	bl	8000578 <__aeabi_dmul>
 8006f16:	4b37      	ldr	r3, [pc, #220]	; (8006ff4 <scalbn+0x104>)
 8006f18:	429e      	cmp	r6, r3
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	460d      	mov	r5, r1
 8006f1e:	da10      	bge.n	8006f42 <scalbn+0x52>
 8006f20:	a32b      	add	r3, pc, #172	; (adr r3, 8006fd0 <scalbn+0xe0>)
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	e03a      	b.n	8006f9e <scalbn+0xae>
 8006f28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006f2c:	428a      	cmp	r2, r1
 8006f2e:	d10c      	bne.n	8006f4a <scalbn+0x5a>
 8006f30:	ee10 2a10 	vmov	r2, s0
 8006f34:	4620      	mov	r0, r4
 8006f36:	4629      	mov	r1, r5
 8006f38:	f7f9 f968 	bl	800020c <__adddf3>
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	460d      	mov	r5, r1
 8006f40:	e019      	b.n	8006f76 <scalbn+0x86>
 8006f42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006f46:	460b      	mov	r3, r1
 8006f48:	3a36      	subs	r2, #54	; 0x36
 8006f4a:	4432      	add	r2, r6
 8006f4c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006f50:	428a      	cmp	r2, r1
 8006f52:	dd08      	ble.n	8006f66 <scalbn+0x76>
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	a120      	add	r1, pc, #128	; (adr r1, 8006fd8 <scalbn+0xe8>)
 8006f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f5c:	da1c      	bge.n	8006f98 <scalbn+0xa8>
 8006f5e:	a120      	add	r1, pc, #128	; (adr r1, 8006fe0 <scalbn+0xf0>)
 8006f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f64:	e018      	b.n	8006f98 <scalbn+0xa8>
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	dd08      	ble.n	8006f7c <scalbn+0x8c>
 8006f6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006f76:	ec45 4b10 	vmov	d0, r4, r5
 8006f7a:	bd70      	pop	{r4, r5, r6, pc}
 8006f7c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006f80:	da19      	bge.n	8006fb6 <scalbn+0xc6>
 8006f82:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006f86:	429e      	cmp	r6, r3
 8006f88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006f8c:	dd0a      	ble.n	8006fa4 <scalbn+0xb4>
 8006f8e:	a112      	add	r1, pc, #72	; (adr r1, 8006fd8 <scalbn+0xe8>)
 8006f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e2      	bne.n	8006f5e <scalbn+0x6e>
 8006f98:	a30f      	add	r3, pc, #60	; (adr r3, 8006fd8 <scalbn+0xe8>)
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	f7f9 faeb 	bl	8000578 <__aeabi_dmul>
 8006fa2:	e7cb      	b.n	8006f3c <scalbn+0x4c>
 8006fa4:	a10a      	add	r1, pc, #40	; (adr r1, 8006fd0 <scalbn+0xe0>)
 8006fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0b8      	beq.n	8006f20 <scalbn+0x30>
 8006fae:	a10e      	add	r1, pc, #56	; (adr r1, 8006fe8 <scalbn+0xf8>)
 8006fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fb4:	e7b4      	b.n	8006f20 <scalbn+0x30>
 8006fb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006fba:	3236      	adds	r2, #54	; 0x36
 8006fbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006fc0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	4b0c      	ldr	r3, [pc, #48]	; (8006ff8 <scalbn+0x108>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	e7e8      	b.n	8006f9e <scalbn+0xae>
 8006fcc:	f3af 8000 	nop.w
 8006fd0:	c2f8f359 	.word	0xc2f8f359
 8006fd4:	01a56e1f 	.word	0x01a56e1f
 8006fd8:	8800759c 	.word	0x8800759c
 8006fdc:	7e37e43c 	.word	0x7e37e43c
 8006fe0:	8800759c 	.word	0x8800759c
 8006fe4:	fe37e43c 	.word	0xfe37e43c
 8006fe8:	c2f8f359 	.word	0xc2f8f359
 8006fec:	81a56e1f 	.word	0x81a56e1f
 8006ff0:	43500000 	.word	0x43500000
 8006ff4:	ffff3cb0 	.word	0xffff3cb0
 8006ff8:	3c900000 	.word	0x3c900000

08006ffc <__errno>:
 8006ffc:	4b01      	ldr	r3, [pc, #4]	; (8007004 <__errno+0x8>)
 8006ffe:	6818      	ldr	r0, [r3, #0]
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20000230 	.word	0x20000230

08007008 <__libc_init_array>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	4d0d      	ldr	r5, [pc, #52]	; (8007040 <__libc_init_array+0x38>)
 800700c:	4c0d      	ldr	r4, [pc, #52]	; (8007044 <__libc_init_array+0x3c>)
 800700e:	1b64      	subs	r4, r4, r5
 8007010:	10a4      	asrs	r4, r4, #2
 8007012:	2600      	movs	r6, #0
 8007014:	42a6      	cmp	r6, r4
 8007016:	d109      	bne.n	800702c <__libc_init_array+0x24>
 8007018:	4d0b      	ldr	r5, [pc, #44]	; (8007048 <__libc_init_array+0x40>)
 800701a:	4c0c      	ldr	r4, [pc, #48]	; (800704c <__libc_init_array+0x44>)
 800701c:	f000 f82e 	bl	800707c <_init>
 8007020:	1b64      	subs	r4, r4, r5
 8007022:	10a4      	asrs	r4, r4, #2
 8007024:	2600      	movs	r6, #0
 8007026:	42a6      	cmp	r6, r4
 8007028:	d105      	bne.n	8007036 <__libc_init_array+0x2e>
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007030:	4798      	blx	r3
 8007032:	3601      	adds	r6, #1
 8007034:	e7ee      	b.n	8007014 <__libc_init_array+0xc>
 8007036:	f855 3b04 	ldr.w	r3, [r5], #4
 800703a:	4798      	blx	r3
 800703c:	3601      	adds	r6, #1
 800703e:	e7f2      	b.n	8007026 <__libc_init_array+0x1e>
 8007040:	080072c0 	.word	0x080072c0
 8007044:	080072c0 	.word	0x080072c0
 8007048:	080072c0 	.word	0x080072c0
 800704c:	080072c4 	.word	0x080072c4

08007050 <memcpy>:
 8007050:	440a      	add	r2, r1
 8007052:	4291      	cmp	r1, r2
 8007054:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007058:	d100      	bne.n	800705c <memcpy+0xc>
 800705a:	4770      	bx	lr
 800705c:	b510      	push	{r4, lr}
 800705e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007066:	4291      	cmp	r1, r2
 8007068:	d1f9      	bne.n	800705e <memcpy+0xe>
 800706a:	bd10      	pop	{r4, pc}

0800706c <memset>:
 800706c:	4402      	add	r2, r0
 800706e:	4603      	mov	r3, r0
 8007070:	4293      	cmp	r3, r2
 8007072:	d100      	bne.n	8007076 <memset+0xa>
 8007074:	4770      	bx	lr
 8007076:	f803 1b01 	strb.w	r1, [r3], #1
 800707a:	e7f9      	b.n	8007070 <memset+0x4>

0800707c <_init>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	bf00      	nop
 8007080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007082:	bc08      	pop	{r3}
 8007084:	469e      	mov	lr, r3
 8007086:	4770      	bx	lr

08007088 <_fini>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	bf00      	nop
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr


Tire_Temperature_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e38  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005ff8  08005ff8  00015ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006070  08006070  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006070  08006070  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006070  08006070  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006070  08006070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006074  08006074  00016074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000070  080060e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080060e8  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec31  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f9  00000000  00000000  0002ecd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  000311d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00031e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e21c  00000000  00000000  00032998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa41  00000000  00000000  00060bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b7e3  00000000  00000000  000705f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017bdd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003728  00000000  00000000  0017be28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005fe0 	.word	0x08005fe0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08005fe0 	.word	0x08005fe0

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b82:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b86:	f004 fb2b 	bl	80051e0 <sqrtf>
 8000b8a:	eef0 7a40 	vmov.f32	s15, s0
 8000b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_Z15MLX90621_DumpEEPh>:
void ExtractAlphaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);
void ExtractOffsetParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);


int MLX90621_DumpEE(uint8_t *eeData)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
     return MLX90621_I2CReadEEPROM(0x50, 0, 256, eeData);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2050      	movs	r0, #80	; 0x50
 8000baa:	f000 fdf5 	bl	8001798 <_Z22MLX90621_I2CReadEEPROMhhtPh>
 8000bae:	4603      	mov	r3, r0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_Z21MLX90621_GetFrameDataPt>:


int MLX90621_GetFrameData(uint16_t *frameData)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	6078      	str	r0, [r7, #4]
    int error = 1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
        
    error = MLX90621_I2CRead(0x60, 0x02, 0, 1, 66, frameData);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	2342      	movs	r3, #66	; 0x42
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	2060      	movs	r0, #96	; 0x60
 8000bd4:	f000 fe6e 	bl	80018b4 <_Z16MLX90621_I2CReadhhhhhPt>
 8000bd8:	60f8      	str	r0, [r7, #12]
       
    return error;    
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_Z18MLX90621_ConfigurePh>:

int MLX90621_Configure(uint8_t *eeData)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    int error = 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
    uint16_t value;
    
    error = MLX90621_I2CWrite(0x60, 0x04, 0xAA, eeData[247]);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	33f7      	adds	r3, #247	; 0xf7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	22aa      	movs	r2, #170	; 0xaa
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	2060      	movs	r0, #96	; 0x60
 8000bfe:	f000 fed9 	bl	80019b4 <_Z17MLX90621_I2CWritehhht>
 8000c02:	60f8      	str	r0, [r7, #12]
    
    if (error != 0)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <_Z18MLX90621_ConfigurePh+0x2a>
    {
        return error;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	e017      	b.n	8000c3e <_Z18MLX90621_ConfigurePh+0x5a>
    }
    
    value = 256*eeData[246] + eeData[245];      
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	33f6      	adds	r3, #246	; 0xf6
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	33f5      	adds	r3, #245	; 0xf5
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	4413      	add	r3, r2
 8000c24:	817b      	strh	r3, [r7, #10]
    value = value | 0x0400;
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2c:	817b      	strh	r3, [r7, #10]
    error = MLX90621_I2CWrite(0x60, 0x03, 0x55, value);
 8000c2e:	897b      	ldrh	r3, [r7, #10]
 8000c30:	2255      	movs	r2, #85	; 0x55
 8000c32:	2103      	movs	r1, #3
 8000c34:	2060      	movs	r0, #96	; 0x60
 8000c36:	f000 febd 	bl	80019b4 <_Z17MLX90621_I2CWritehhht>
 8000c3a:	60f8      	str	r0, [r7, #12]
    
    return error;      
 8000c3c:	68fb      	ldr	r3, [r7, #12]
}   
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_Z25MLX90621_GetConfigurationPt>:
       
    return error;    
}    

int MLX90621_GetConfiguration(uint16_t *cfgReg)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af02      	add	r7, sp, #8
 8000c4c:	6078      	str	r0, [r7, #4]
    int error = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
        
    error = MLX90621_I2CRead(0x60, 0x02, 0x92, 0, 1, cfgReg); 
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	2301      	movs	r3, #1
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2292      	movs	r2, #146	; 0x92
 8000c5e:	2102      	movs	r1, #2
 8000c60:	2060      	movs	r0, #96	; 0x60
 8000c62:	f000 fe27 	bl	80018b4 <_Z16MLX90621_I2CReadhhhhhPt>
 8000c66:	60f8      	str	r0, [r7, #12]
       
    return error;    
 8000c68:	68fb      	ldr	r3, [r7, #12]
}   
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_Z26MLX90621_ExtractParametersPhP14paramsMLX90621>:
 

int MLX90621_ExtractParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b084      	sub	sp, #16
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
    int error = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
    
    ExtractPTATParameters(eeData, mlx90621);
 8000c80:	6839      	ldr	r1, [r7, #0]
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 fa6a 	bl	800115c <_Z21ExtractPTATParametersPhP14paramsMLX90621>
    ExtractTgcParameters(eeData, mlx90621);
 8000c88:	6839      	ldr	r1, [r7, #0]
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 fb08 	bl	80012a0 <_Z20ExtractTgcParametersPhP14paramsMLX90621>
    ExtractKsTaParameters(eeData, mlx90621);
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 fb22 	bl	80012dc <_Z21ExtractKsTaParametersPhP14paramsMLX90621>
    ExtractKsToParameters(eeData, mlx90621);
 8000c98:	6839      	ldr	r1, [r7, #0]
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 fb5a 	bl	8001354 <_Z21ExtractKsToParametersPhP14paramsMLX90621>
    ExtractAlphaParameters(eeData, mlx90621);
 8000ca0:	6839      	ldr	r1, [r7, #0]
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fb9c 	bl	80013e0 <_Z22ExtractAlphaParametersPhP14paramsMLX90621>
    ExtractOffsetParameters(eeData, mlx90621);
 8000ca8:	6839      	ldr	r1, [r7, #0]
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 fc50 	bl	8001550 <_Z23ExtractOffsetParametersPhP14paramsMLX90621>
        
    return error;
 8000cb0:	68fb      	ldr	r3, [r7, #12]

}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_Z25MLX90621_GetCurResolutionv>:
}

//------------------------------------------------------------------------------

int MLX90621_GetCurResolution()
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
    uint16_t cfgReg;
    int resolution;
    int error;
    
    error = MLX90621_GetConfiguration(&cfgReg);
 8000cc0:	1dbb      	adds	r3, r7, #6
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ffbf 	bl	8000c46 <_Z25MLX90621_GetConfigurationPt>
 8000cc8:	60f8      	str	r0, [r7, #12]
    if(error != 0)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <_Z25MLX90621_GetCurResolutionv+0x1a>
    {
        return error;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	e006      	b.n	8000ce2 <_Z25MLX90621_GetCurResolutionv+0x28>
    }    
    resolution = (cfgReg & 0x0030) >> 4;
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	60bb      	str	r3, [r7, #8]
    
    return resolution; 
 8000ce0:	68bb      	ldr	r3, [r7, #8]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_Z23MLX90621_GetRefreshRatev>:
}

//------------------------------------------------------------------------------

int MLX90621_GetRefreshRate()
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
    uint16_t cfgReg;
    int rr;
    int error;
    
    error = MLX90621_GetConfiguration(&cfgReg);
 8000cf0:	1dbb      	adds	r3, r7, #6
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ffa7 	bl	8000c46 <_Z25MLX90621_GetConfigurationPt>
 8000cf8:	60f8      	str	r0, [r7, #12]
    if(error != 0)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <_Z23MLX90621_GetRefreshRatev+0x1a>
    {
        return error;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	e004      	b.n	8000d0e <_Z23MLX90621_GetRefreshRatev+0x24>
    }    
    rr = (cfgReg & 0x000F);
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	60bb      	str	r3, [r7, #8]
    
    return rr; 
 8000d0c:	68bb      	ldr	r3, [r7, #8]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf>:

//------------------------------------------------------------------------------

void MLX90621_CalculateTo(uint16_t *frameData, const paramsMLX90621 *params, float emissivity, float tr, float *result)
{
 8000d18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d1c:	b090      	sub	sp, #64	; 0x40
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6178      	str	r0, [r7, #20]
 8000d22:	6139      	str	r1, [r7, #16]
 8000d24:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d28:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
    float irData;
    float alphaCompensated;
    float Sx;
    float To;
    
    ta = MLX90621_GetTa(frameData, params);
 8000d2e:	6939      	ldr	r1, [r7, #16]
 8000d30:	6978      	ldr	r0, [r7, #20]
 8000d32:	f000 f99f 	bl	8001074 <_Z14MLX90621_GetTaPtPK14paramsMLX90621>
 8000d36:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    
    ta4 = (ta + 273.15);
 8000d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d3c:	f7ff fbc4 	bl	80004c8 <__aeabi_f2d>
 8000d40:	a3c7      	add	r3, pc, #796	; (adr r3, 8001060 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x348>)
 8000d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d46:	f7ff fa61 	bl	800020c <__adddf3>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	4610      	mov	r0, r2
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff fec1 	bl	8000ad8 <__aeabi_d2f>
 8000d56:	4603      	mov	r3, r0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    ta4 = ta4 * ta4;
 8000d5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    ta4 = ta4 * ta4;
 8000d66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d6e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    tr4 = (tr + 273.15);
 8000d72:	68b8      	ldr	r0, [r7, #8]
 8000d74:	f7ff fba8 	bl	80004c8 <__aeabi_f2d>
 8000d78:	a3b9      	add	r3, pc, #740	; (adr r3, 8001060 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x348>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff fa45 	bl	800020c <__adddf3>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f7ff fea5 	bl	8000ad8 <__aeabi_d2f>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
    tr4 = tr4 * tr4;
 8000d92:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d9a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    tr4 = tr4 * tr4;
 8000d9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000da2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000da6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    taTr = tr4 - (tr4-ta4)/emissivity;
 8000daa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000dae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000db2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000db6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dbe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
//------------------------- To calculation -------------------------------------    
        
    irDataCP = frameData[65];  
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3382      	adds	r3, #130	; 0x82
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    if(irDataCP > 32767)
 8000ddc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000de0:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001068 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x350>
 8000de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dec:	dd07      	ble.n	8000dfe <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0xe6>
    {
        irDataCP = irDataCP - 65536;
 8000dee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000df2:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800106c <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x354>
 8000df6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dfa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }

    irDataCP = irDataCP - (params->cpA + params->cpB * (ta - 25));
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	ed93 7ac7 	vldr	s14, [r3, #796]	; 0x31c
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	edd3 6ac8 	vldr	s13, [r3, #800]	; 0x320
 8000e0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e0e:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8000e12:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000e16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e1e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e26:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    
    for( int pixelNumber = 0; pixelNumber < 64; pixelNumber++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e30:	2b3f      	cmp	r3, #63	; 0x3f
 8000e32:	f300 810e 	bgt.w	8001052 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x33a>
    {    
        irData = frameData[pixelNumber];
 8000e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e48:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        if(irData > 32767)
 8000e4c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e50:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001068 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x350>
 8000e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e5c:	dd07      	ble.n	8000e6e <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x156>
        {
            irData = irData - 65536;
 8000e5e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e62:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800106c <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x354>
 8000e66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e6a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        }
        
        irData = irData - (params->ai[pixelNumber] + params->bi[pixelNumber] * (ta - 25));
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e72:	3346      	adds	r3, #70	; 0x46
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	ed93 7a00 	vldr	s14, [r3]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e80:	3386      	adds	r3, #134	; 0x86
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	edd3 6a00 	vldr	s13, [r3]
 8000e8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e8e:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8000e92:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        
        irData = irData - params->tgc * irDataCP;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	ed93 7a03 	vldr	s14, [r3, #12]
 8000eb0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        irData = irData / emissivity;
 8000ec4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000ec8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ed0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        
        alphaCompensated = params->alpha[pixelNumber] - params->tgc * params->cpAlpha;
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed8:	3306      	adds	r3, #6
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	ed93 7a00 	vldr	s14, [r3]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	edd3 6a03 	vldr	s13, [r3, #12]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	edd3 7ac6 	vldr	s15, [r3, #792]	; 0x318
 8000eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef6:	edc7 7a08 	vstr	s15, [r7, #32]
        alphaCompensated = alphaCompensated *(1 + params->KsTa * (ta - 25));
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f00:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000f04:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8000f08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f18:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f20:	edc7 7a08 	vstr	s15, [r7, #32]
                    
        Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8000f24:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f28:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f34:	edd7 6a08 	vldr	s13, [r7, #32]
 8000f38:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4c:	edc7 7a07 	vstr	s15, [r7, #28]
        Sx = sqrt(sqrt(Sx)) * params->ksTo;            
 8000f50:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f54:	f7ff fe10 	bl	8000b78 <_ZSt4sqrtf>
 8000f58:	eef0 7a40 	vmov.f32	s15, s0
 8000f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f60:	f7ff fe0a 	bl	8000b78 <_ZSt4sqrtf>
 8000f64:	eeb0 7a40 	vmov.f32	s14, s0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f72:	edc7 7a07 	vstr	s15, [r7, #28]
        
        To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo * 273.15) + Sx) + taTr)) - 273.15;                     
 8000f76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f78:	f7ff faa6 	bl	80004c8 <__aeabi_f2d>
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	460d      	mov	r5, r1
 8000f80:	6a38      	ldr	r0, [r7, #32]
 8000f82:	f7ff faa1 	bl	80004c8 <__aeabi_f2d>
 8000f86:	4680      	mov	r8, r0
 8000f88:	4689      	mov	r9, r1
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa9a 	bl	80004c8 <__aeabi_f2d>
 8000f94:	a332      	add	r3, pc, #200	; (adr r3, 8001060 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x348>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	f7ff faed 	bl	8000578 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4932      	ldr	r1, [pc, #200]	; (8001070 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x358>)
 8000fa8:	f7ff f92e 	bl	8000208 <__aeabi_dsub>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	f7ff fae0 	bl	8000578 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	4699      	mov	r9, r3
 8000fc0:	69f8      	ldr	r0, [r7, #28]
 8000fc2:	f7ff fa81 	bl	80004c8 <__aeabi_f2d>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4640      	mov	r0, r8
 8000fcc:	4649      	mov	r1, r9
 8000fce:	f7ff f91d 	bl	800020c <__adddf3>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	4629      	mov	r1, r5
 8000fda:	f7ff fbf7 	bl	80007cc <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4614      	mov	r4, r2
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fe8:	f7ff fa6e 	bl	80004c8 <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff f90a 	bl	800020c <__adddf3>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	ec43 2b17 	vmov	d7, r2, r3
 8001000:	eeb0 0a47 	vmov.f32	s0, s14
 8001004:	eef0 0a67 	vmov.f32	s1, s15
 8001008:	f004 f8be 	bl	8005188 <sqrt>
 800100c:	eeb0 7a40 	vmov.f32	s14, s0
 8001010:	eef0 7a60 	vmov.f32	s15, s1
 8001014:	eeb0 0a47 	vmov.f32	s0, s14
 8001018:	eef0 0a67 	vmov.f32	s1, s15
 800101c:	f004 f8b4 	bl	8005188 <sqrt>
 8001020:	ec51 0b10 	vmov	r0, r1, d0
 8001024:	a30e      	add	r3, pc, #56	; (adr r3, 8001060 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x348>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff f8ed 	bl	8000208 <__aeabi_dsub>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fd4f 	bl	8000ad8 <__aeabi_d2f>
 800103a:	4603      	mov	r3, r0
 800103c:	61bb      	str	r3, [r7, #24]
                                    
        result[pixelNumber] = To;
 800103e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 64; pixelNumber++)
 800104a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104c:	3301      	adds	r3, #1
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
 8001050:	e6ed      	b.n	8000e2e <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf+0x116>
    
    }
}
 8001052:	bf00      	nop
 8001054:	3740      	adds	r7, #64	; 0x40
 8001056:	46bd      	mov	sp, r7
 8001058:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	66666666 	.word	0x66666666
 8001064:	40711266 	.word	0x40711266
 8001068:	46fffe00 	.word	0x46fffe00
 800106c:	47800000 	.word	0x47800000
 8001070:	3ff00000 	.word	0x3ff00000

08001074 <_Z14MLX90621_GetTaPtPK14paramsMLX90621>:
}

//------------------------------------------------------------------------------

float MLX90621_GetTa(uint16_t *frameData, const paramsMLX90621 *params)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
    float ptat;
    float ta;
    
    ptat = frameData[64];
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3380      	adds	r3, #128	; 0x80
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108c:	edc7 7a03 	vstr	s15, [r7, #12]
    if(ptat > 32767)
 8001090:	edd7 7a03 	vldr	s15, [r7, #12]
 8001094:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001154 <_Z14MLX90621_GetTaPtPK14paramsMLX90621+0xe0>
 8001098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a0:	dd07      	ble.n	80010b2 <_Z14MLX90621_GetTaPtPK14paramsMLX90621+0x3e>
    {
        ptat = ptat - 65536;
 80010a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001158 <_Z14MLX90621_GetTaPtPK14paramsMLX90621+0xe4>
 80010aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010ae:	edc7 7a03 	vstr	s15, [r7, #12]
    }
       
    ta = params->vTh25 - ptat;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c8:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = 4*params->kT2*ta;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80010d2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80010d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010da:	ed97 7a02 	vldr	s14, [r7, #8]
 80010de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e2:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = params->kT1*params->kT1 - ta;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80010f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fe:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = sqrt(ta)-params->kT1;
 8001102:	ed97 0a02 	vldr	s0, [r7, #8]
 8001106:	f7ff fd37 	bl	8000b78 <_ZSt4sqrtf>
 800110a:	eeb0 7a40 	vmov.f32	s14, s0
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	edd3 7a01 	vldr	s15, [r3, #4]
 8001114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001118:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta / (2*params->kT2);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001122:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001126:	edd7 6a02 	vldr	s13, [r7, #8]
 800112a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800112e:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta + 25;
 8001132:	edd7 7a02 	vldr	s15, [r7, #8]
 8001136:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800113a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800113e:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	ee07 3a90 	vmov	s15, r3
}
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	46fffe00 	.word	0x46fffe00
 8001158:	47800000 	.word	0x47800000

0800115c <_Z21ExtractPTATParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
    float kt1;
    float kt2;
    int16_t vth25;
    int kt1Scale = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
    int kt2Scale = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
    int resolution = 3;
 800116e:	2303      	movs	r3, #3
 8001170:	60fb      	str	r3, [r7, #12]
    uint16_t data;
    
    resolution = resolution - MLX90621_GetCurResolution();
 8001172:	f7ff fda2 	bl	8000cba <_Z25MLX90621_GetCurResolutionv>
 8001176:	4602      	mov	r2, r0
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	1a9b      	subs	r3, r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
    kt1Scale = (eeData[210] & 0xF0) >> 4;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	33d2      	adds	r3, #210	; 0xd2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	b2db      	uxtb	r3, r3
 8001188:	617b      	str	r3, [r7, #20]
    kt2Scale = eeData[210] & 0x0F;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	33d2      	adds	r3, #210	; 0xd2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	613b      	str	r3, [r7, #16]
    kt2Scale = kt2Scale + 10;
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	330a      	adds	r3, #10
 800119a:	613b      	str	r3, [r7, #16]
    kt1Scale = kt1Scale + resolution;
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]
    kt2Scale = kt2Scale + resolution;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
    
    data = (eeData[219]<<8) + eeData[218];
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	33db      	adds	r3, #219	; 0xdb
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	33da      	adds	r3, #218	; 0xda
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	4413      	add	r3, r2
 80011c2:	817b      	strh	r3, [r7, #10]
    vth25 = data;
 80011c4:	897b      	ldrh	r3, [r7, #10]
 80011c6:	813b      	strh	r3, [r7, #8]
    
    kt1 = (eeData[221]<<8) + eeData[220];
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	33dd      	adds	r3, #221	; 0xdd
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	32dc      	adds	r2, #220	; 0xdc
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	ee07 3a90 	vmov	s15, r3
 80011dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e0:	edc7 7a07 	vstr	s15, [r7, #28]
    if (kt1 > 32767)
 80011e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001298 <_Z21ExtractPTATParametersPhP14paramsMLX90621+0x13c>
 80011ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	dd07      	ble.n	8001206 <_Z21ExtractPTATParametersPhP14paramsMLX90621+0xaa>
    {
        kt1 = kt1 - 65536;
 80011f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80011fa:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800129c <_Z21ExtractPTATParametersPhP14paramsMLX90621+0x140>
 80011fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001202:	edc7 7a07 	vstr	s15, [r7, #28]
    }  
    
    kt1 = kt1 / (1<<kt1Scale);  
 8001206:	2201      	movs	r2, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001216:	edd7 6a07 	vldr	s13, [r7, #28]
 800121a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121e:	edc7 7a07 	vstr	s15, [r7, #28]
    
    kt2 = (eeData[223]<<8) + eeData[222];
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	33df      	adds	r3, #223	; 0xdf
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	32de      	adds	r2, #222	; 0xde
 800122e:	7812      	ldrb	r2, [r2, #0]
 8001230:	4413      	add	r3, r2
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123a:	edc7 7a06 	vstr	s15, [r7, #24]
    if (kt2 > 32767)
 800123e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001242:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001298 <_Z21ExtractPTATParametersPhP14paramsMLX90621+0x13c>
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	dd07      	ble.n	8001260 <_Z21ExtractPTATParametersPhP14paramsMLX90621+0x104>
    {
        kt2 = kt2 - 65536;
 8001250:	edd7 7a06 	vldr	s15, [r7, #24]
 8001254:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800129c <_Z21ExtractPTATParametersPhP14paramsMLX90621+0x140>
 8001258:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800125c:	edc7 7a06 	vstr	s15, [r7, #24]
    }  
    
    kt2 = kt2 / (1<<kt2Scale); 
 8001260:	2201      	movs	r2, #1
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001270:	edd7 6a06 	vldr	s13, [r7, #24]
 8001274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001278:	edc7 7a06 	vstr	s15, [r7, #24]
    
    mlx90621->vTh25 = vth25;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	893a      	ldrh	r2, [r7, #8]
 8001280:	801a      	strh	r2, [r3, #0]
    mlx90621->kT1 = kt1;    
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	605a      	str	r2, [r3, #4]
    mlx90621->kT2 = kt2;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]
      
}
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	46fffe00 	.word	0x46fffe00
 800129c:	47800000 	.word	0x47800000

080012a0 <_Z20ExtractTgcParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[216]/32.0f;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	33d8      	adds	r3, #216	; 0xd8
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012d8 <_Z20ExtractTgcParametersPhP14paramsMLX90621+0x38>
 80012bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c0:	edc7 7a03 	vstr	s15, [r7, #12]
        
    mlx90621->tgc = tgc;        
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	60da      	str	r2, [r3, #12]
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	42000000 	.word	0x42000000

080012dc <_Z21ExtractKsTaParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[231] << 8) + eeData[230];
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	33e7      	adds	r3, #231	; 0xe7
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	32e6      	adds	r2, #230	; 0xe6
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 32767)
 8001302:	edd7 7a03 	vldr	s15, [r7, #12]
 8001306:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001348 <_Z21ExtractKsTaParametersPhP14paramsMLX90621+0x6c>
 800130a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	dd07      	ble.n	8001324 <_Z21ExtractKsTaParametersPhP14paramsMLX90621+0x48>
    {
        KsTa = KsTa - 65536;
 8001314:	edd7 7a03 	vldr	s15, [r7, #12]
 8001318:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800134c <_Z21ExtractKsTaParametersPhP14paramsMLX90621+0x70>
 800131c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001320:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / (1<<20);
 8001324:	ed97 7a03 	vldr	s14, [r7, #12]
 8001328:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001350 <_Z21ExtractKsTaParametersPhP14paramsMLX90621+0x74>
 800132c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001330:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90621->KsTa = KsTa;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	611a      	str	r2, [r3, #16]
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	46fffe00 	.word	0x46fffe00
 800134c:	47800000 	.word	0x47800000
 8001350:	49800000 	.word	0x49800000

08001354 <_Z21ExtractKsToParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
    int scale;
        
    scale = eeData[192] & 0x0F;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	33c0      	adds	r3, #192	; 0xc0
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	60fb      	str	r3, [r7, #12]
    scale = scale + 8;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3308      	adds	r3, #8
 800136e:	60fb      	str	r3, [r7, #12]
    
    mlx90621->ksTo = eeData[196];
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	33c4      	adds	r3, #196	; 0xc4
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	edc3 7a05 	vstr	s15, [r3, #20]
       
    if(mlx90621->ksTo > 127)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	edd3 7a05 	vldr	s15, [r3, #20]
 800138a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80013d8 <_Z21ExtractKsToParametersPhP14paramsMLX90621+0x84>
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	dd09      	ble.n	80013ac <_Z21ExtractKsToParametersPhP14paramsMLX90621+0x58>
    {
        mlx90621->ksTo = mlx90621->ksTo - 256;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	edd3 7a05 	vldr	s15, [r3, #20]
 800139e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80013dc <_Z21ExtractKsToParametersPhP14paramsMLX90621+0x88>
 80013a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	edc3 7a05 	vstr	s15, [r3, #20]
    }
    mlx90621->ksTo = mlx90621->ksTo / (1 << scale);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	edd3 6a05 	vldr	s13, [r3, #20]
 80013b2:	2201      	movs	r2, #1
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	edc3 7a05 	vstr	s15, [r3, #20]
    
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	42fe0000 	.word	0x42fe0000
 80013dc:	43800000 	.word	0x43800000

080013e0 <_Z22ExtractAlphaParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{    
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
    uint8_t resScale;
    float alphaCom; 
    float alphaTemp;
    float temp;
    
    alphaScale = eeData[226];
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	33e2      	adds	r3, #226	; 0xe2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f847 	bl	8000484 <__aeabi_ui2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    deltaScale = eeData[227];
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	33e3      	adds	r3, #227	; 0xe3
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f83d 	bl	8000484 <__aeabi_ui2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    resScale = 3 - MLX90621_GetCurResolution();
 8001412:	f7ff fc52 	bl	8000cba <_Z25MLX90621_GetCurResolutionv>
 8001416:	4603      	mov	r3, r0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f1c3 0303 	rsb	r3, r3, #3
 800141e:	75fb      	strb	r3, [r7, #23]
    alphaCom = (eeData[225]<<8) + eeData[224];
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	33e1      	adds	r3, #225	; 0xe1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	32e0      	adds	r2, #224	; 0xe0
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	4413      	add	r3, r2
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	edc7 7a04 	vstr	s15, [r7, #16]
    alphaScale = pow(2,alphaScale);
 800143c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001440:	2002      	movs	r0, #2
 8001442:	f000 f98d 	bl	8001760 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001446:	ed87 0b08 	vstr	d0, [r7, #32]
    deltaScale = pow(2,deltaScale);
 800144a:	ed97 0b06 	vldr	d0, [r7, #24]
 800144e:	2002      	movs	r0, #2
 8001450:	f000 f986 	bl	8001760 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001454:	ed87 0b06 	vstr	d0, [r7, #24]
    alphaCom = alphaCom / alphaScale;
 8001458:	6938      	ldr	r0, [r7, #16]
 800145a:	f7ff f835 	bl	80004c8 <__aeabi_f2d>
 800145e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001462:	f7ff f9b3 	bl	80007cc <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fb33 	bl	8000ad8 <__aeabi_d2f>
 8001472:	4603      	mov	r3, r0
 8001474:	613b      	str	r3, [r7, #16]
  
    for(int i = 0; i < 64; i++)
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	2b3f      	cmp	r3, #63	; 0x3f
 800147e:	dc37      	bgt.n	80014f0 <_Z22ExtractAlphaParametersPhP14paramsMLX90621+0x110>
    {
        temp = eeData[128+i];
 8001480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001482:	3380      	adds	r3, #128	; 0x80
 8001484:	461a      	mov	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001494:	edc7 7a03 	vstr	s15, [r7, #12]
        temp = temp / deltaScale;        
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff f815 	bl	80004c8 <__aeabi_f2d>
 800149e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a2:	f7ff f993 	bl	80007cc <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fb13 	bl	8000ad8 <__aeabi_d2f>
 80014b2:	4603      	mov	r3, r0
 80014b4:	60fb      	str	r3, [r7, #12]
        alphaTemp = (alphaCom + temp)/(1<<resScale);
 80014b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80014ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80014be:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	2201      	movs	r2, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d6:	edc7 7a02 	vstr	s15, [r7, #8]
        mlx90621->alpha[i] = alphaTemp;
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014de:	3306      	adds	r3, #6
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 64; i++)
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	3301      	adds	r3, #1
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ee:	e7c4      	b.n	800147a <_Z22ExtractAlphaParametersPhP14paramsMLX90621+0x9a>
    } 
    
    alphaTemp = (eeData[215]<<8) + eeData[214];
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	33d7      	adds	r3, #215	; 0xd7
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	32d6      	adds	r2, #214	; 0xd6
 80014fc:	7812      	ldrb	r2, [r2, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	ee07 3a90 	vmov	s15, r3
 8001504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001508:	edc7 7a02 	vstr	s15, [r7, #8]
    alphaTemp = alphaTemp / alphaScale;
 800150c:	68b8      	ldr	r0, [r7, #8]
 800150e:	f7fe ffdb 	bl	80004c8 <__aeabi_f2d>
 8001512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001516:	f7ff f959 	bl	80007cc <__aeabi_ddiv>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fad9 	bl	8000ad8 <__aeabi_d2f>
 8001526:	4603      	mov	r3, r0
 8001528:	60bb      	str	r3, [r7, #8]
    
    mlx90621->cpAlpha = alphaTemp / (1<<resScale);
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	2201      	movs	r2, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153a:	edd7 6a02 	vldr	s13, [r7, #8]
 800153e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	edc3 7ac6 	vstr	s15, [r3, #792]	; 0x318
}
 8001548:	bf00      	nop
 800154a:	3730      	adds	r7, #48	; 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <_Z23ExtractOffsetParametersPhP14paramsMLX90621>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint8_t *eeData, paramsMLX90621 *mlx90621)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
    int16_t aCom;
    float aTemp;
    float bTemp;
    uint16_t data;
    
    aScale = eeData[217]>>4;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	33d9      	adds	r3, #217	; 0xd9
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	76fb      	strb	r3, [r7, #27]
    bScale = eeData[217] & 0x0F;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	33d9      	adds	r3, #217	; 0xd9
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001576:	edc7 7a05 	vstr	s15, [r7, #20]
    resScale = 3 - MLX90621_GetCurResolution();
 800157a:	f7ff fb9e 	bl	8000cba <_Z25MLX90621_GetCurResolutionv>
 800157e:	4603      	mov	r3, r0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f1c3 0303 	rsb	r3, r3, #3
 8001586:	74fb      	strb	r3, [r7, #19]
    bScale = pow(2, (double)(bScale+resScale));
 8001588:	7cfb      	ldrb	r3, [r7, #19]
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001592:	edd7 7a05 	vldr	s15, [r7, #20]
 8001596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159a:	ee17 0a90 	vmov	r0, s15
 800159e:	f7fe ff93 	bl	80004c8 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	ec43 2b10 	vmov	d0, r2, r3
 80015aa:	2002      	movs	r0, #2
 80015ac:	f000 f8d8 	bl	8001760 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015b0:	ec53 2b10 	vmov	r2, r3, d0
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fa8e 	bl	8000ad8 <__aeabi_d2f>
 80015bc:	4603      	mov	r3, r0
 80015be:	617b      	str	r3, [r7, #20]
    
    data = (eeData[209]<<8) + eeData[208];
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	33d1      	adds	r3, #209	; 0xd1
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	33d0      	adds	r3, #208	; 0xd0
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	823b      	strh	r3, [r7, #16]
    aCom = data;    
 80015d8:	8a3b      	ldrh	r3, [r7, #16]
 80015da:	81fb      	strh	r3, [r7, #14]

    for(int i=0; i<64; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b3f      	cmp	r3, #63	; 0x3f
 80015e4:	dc58      	bgt.n	8001698 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x148>
    {
        aTemp = eeData[i]<<aScale; 
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	7efb      	ldrb	r3, [r7, #27]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        bTemp = eeData[64+i];
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3340      	adds	r3, #64	; 0x40
 8001606:	461a      	mov	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001616:	edc7 7a08 	vstr	s15, [r7, #32]
        if (bTemp > 127)
 800161a:	edd7 7a08 	vldr	s15, [r7, #32]
 800161e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001750 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x200>
 8001622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	dd07      	ble.n	800163c <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0xec>
        {
            bTemp = bTemp - 256;
 800162c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001630:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001754 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x204>
 8001634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001638:	edc7 7a08 	vstr	s15, [r7, #32]
        }            
        bTemp = bTemp / bScale;
 800163c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001640:	ed97 7a05 	vldr	s14, [r7, #20]
 8001644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001648:	edc7 7a08 	vstr	s15, [r7, #32]
        
        mlx90621->ai[i] = (aCom + aTemp) / (1<<resScale);
 800164c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001658:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800165c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001660:	7cfb      	ldrb	r3, [r7, #19]
 8001662:	2201      	movs	r2, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3346      	adds	r3, #70	; 0x46
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	edc3 7a00 	vstr	s15, [r3]
        mlx90621->bi[i] = bTemp;
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	3386      	adds	r3, #134	; 0x86
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	6a3a      	ldr	r2, [r7, #32]
 800168e:	601a      	str	r2, [r3, #0]
    for(int i=0; i<64; i++)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	3301      	adds	r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e7a3      	b.n	80015e0 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x90>
    } 
    
    aTemp = (eeData[212]<<8) + eeData[211];
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	33d4      	adds	r3, #212	; 0xd4
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	32d3      	adds	r2, #211	; 0xd3
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (aTemp > 32767)
 80016b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016b8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001758 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x208>
 80016bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	dd07      	ble.n	80016d6 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x186>
    {
        aTemp = aTemp - 65536;
 80016c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ca:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800175c <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x20c>
 80016ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    }    
    aTemp = aTemp / (1<<resScale); 
 80016d6:	7cfb      	ldrb	r3, [r7, #19]
 80016d8:	2201      	movs	r2, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80016ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    bTemp = eeData[213];
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	33d5      	adds	r3, #213	; 0xd5
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001700:	edc7 7a08 	vstr	s15, [r7, #32]
    if (bTemp > 127)
 8001704:	edd7 7a08 	vldr	s15, [r7, #32]
 8001708:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001750 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x200>
 800170c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	dd07      	ble.n	8001726 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x1d6>
    {
        bTemp = bTemp - 256;
 8001716:	edd7 7a08 	vldr	s15, [r7, #32]
 800171a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001754 <_Z23ExtractOffsetParametersPhP14paramsMLX90621+0x204>
 800171e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001722:	edc7 7a08 	vstr	s15, [r7, #32]
    }     
    bTemp = bTemp / bScale;      
 8001726:	edd7 6a08 	vldr	s13, [r7, #32]
 800172a:	ed97 7a05 	vldr	s14, [r7, #20]
 800172e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001732:	edc7 7a08 	vstr	s15, [r7, #32]
    
    mlx90621->cpA = aTemp;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173a:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
    mlx90621->cpB = bTemp;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6a3a      	ldr	r2, [r7, #32]
 8001742:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	; 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	42fe0000 	.word	0x42fe0000
 8001754:	43800000 	.word	0x43800000
 8001758:	46fffe00 	.word	0x46fffe00
 800175c:	47800000 	.word	0x47800000

08001760 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f7fe fe99 	bl	80004a4 <__aeabi_i2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ed97 1b00 	vldr	d1, [r7]
 800177a:	ec43 2b10 	vmov	d0, r2, r3
 800177e:	f003 fc93 	bl	80050a8 <pow>
 8001782:	eeb0 7a40 	vmov.f32	s14, s0
 8001786:	eef0 7a60 	vmov.f32	s15, s1
    }
 800178a:	eeb0 0a47 	vmov.f32	s0, s14
 800178e:	eef0 0a67 	vmov.f32	s1, s15
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <_Z22MLX90621_I2CReadEEPROMhhtPh>:
	//set via the .ioc
    //i2c.frequency(1000*freq);
}

int MLX90621_I2CReadEEPROM(uint8_t slaveAddr, uint8_t startAddress, uint16_t nMemAddressRead, uint8_t *data)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b0cb      	sub	sp, #300	; 0x12c
 800179c:	af04      	add	r7, sp, #16
 800179e:	4604      	mov	r4, r0
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80017a8:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017b2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80017b6:	4622      	mov	r2, r4
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017be:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80017c2:	4602      	mov	r2, r0
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017ce:	460a      	mov	r2, r1
 80017d0:	801a      	strh	r2, [r3, #0]
    uint8_t sa;
    int cnt = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    uint8_t cmd = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    uint8_t i2cData[256] = {0};
 80017de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	3304      	adds	r3, #4
 80017ec:	22fc      	movs	r2, #252	; 0xfc
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fbed 	bl	8005fd0 <memset>
    uint8_t *p;
    
    p = data;
 80017f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    sa = (slaveAddr << 1);
 8001804:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001808:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    cmd = startAddress;
 8001814:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001818:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    
    if(HAL_I2C_Mem_Read(&hi2c2, sa, cmd, 1, i2cData, nMemAddressRead, 100) != HAL_OK)
 8001822:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001826:	b299      	uxth	r1, r3
 8001828:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800182c:	b29a      	uxth	r2, r3
 800182e:	2364      	movs	r3, #100	; 0x64
 8001830:	9302      	str	r3, [sp, #8]
 8001832:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001836:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2301      	movs	r3, #1
 8001846:	481a      	ldr	r0, [pc, #104]	; (80018b0 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x118>)
 8001848:	f001 f994 	bl	8002b74 <HAL_I2C_Mem_Read>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf14      	ite	ne
 8001852:	2301      	movne	r3, #1
 8001854:	2300      	moveq	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <_Z22MLX90621_I2CReadEEPROMhhtPh+0xca>
    {
    	return -1;
 800185c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001860:	e021      	b.n	80018a6 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x10e>
    }
    
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001868:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800186c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001876:	429a      	cmp	r2, r3
 8001878:	da14      	bge.n	80018a4 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x10c>
    {
        *p++ = i2cData[cnt];
 800187a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800187e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001886:	4413      	add	r3, r2
 8001888:	7819      	ldrb	r1, [r3, #0]
 800188a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8001894:	460a      	mov	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8001898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800189c:	3301      	adds	r3, #1
 800189e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018a2:	e7e1      	b.n	8001868 <_Z22MLX90621_I2CReadEEPROMhhtPh+0xd0>
    }

    return 0;
 80018a4:	2300      	movs	r3, #0
} 
 80018a6:	4618      	mov	r0, r3
 80018a8:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	200000b8 	.word	0x200000b8

080018b4 <_Z16MLX90621_I2CReadhhhhhPt>:

int MLX90621_I2CRead(uint8_t slaveAddr,uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead, uint16_t *data)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b0af      	sub	sp, #188	; 0xbc
 80018b8:	af06      	add	r7, sp, #24
 80018ba:	4604      	mov	r4, r0
 80018bc:	4608      	mov	r0, r1
 80018be:	4611      	mov	r1, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	4623      	mov	r3, r4
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	4603      	mov	r3, r0
 80018c8:	71bb      	strb	r3, [r7, #6]
 80018ca:	460b      	mov	r3, r1
 80018cc:	717b      	strb	r3, [r7, #5]
 80018ce:	4613      	mov	r3, r2
 80018d0:	713b      	strb	r3, [r7, #4]
    uint8_t sa;
    int cnt = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    int i = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t i2cData[132] = {0};
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	2280      	movs	r2, #128	; 0x80
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 fb70 	bl	8005fd0 <memset>
    uint16_t *p;
    
    p = data;
 80018f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    sa = (slaveAddr << 1);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    

    if(Custom_HAL_I2C_Mem_Read(&hi2c2, sa, command, startAddress, addressStep, nMemAddressRead, i2cData, 2*nMemAddressRead, 100) != HAL_OK)
 8001900:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001904:	b299      	uxth	r1, r3
 8001906:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800190a:	b29b      	uxth	r3, r3
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	b29b      	uxth	r3, r3
 8001910:	7978      	ldrb	r0, [r7, #5]
 8001912:	79ba      	ldrb	r2, [r7, #6]
 8001914:	2464      	movs	r4, #100	; 0x64
 8001916:	9404      	str	r4, [sp, #16]
 8001918:	9303      	str	r3, [sp, #12]
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	793b      	ldrb	r3, [r7, #4]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	4603      	mov	r3, r0
 800192c:	4820      	ldr	r0, [pc, #128]	; (80019b0 <_Z16MLX90621_I2CReadhhhhhPt+0xfc>)
 800192e:	f001 fc8d 	bl	800324c <Custom_HAL_I2C_Mem_Read>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <_Z16MLX90621_I2CReadhhhhhPt+0x94>
    {
    	return -1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001946:	e02e      	b.n	80019a6 <_Z16MLX90621_I2CReadhhhhhPt+0xf2>
    }
    
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800194e:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8001952:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001956:	429a      	cmp	r2, r3
 8001958:	da24      	bge.n	80019a4 <_Z16MLX90621_I2CReadhhhhhPt+0xf0>
    {
        i = cnt << 1;
 800195a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        *p++ = (uint16_t)i2cData[i+1]*256 + (uint16_t)i2cData[i];
 8001964:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001968:	3301      	adds	r3, #1
 800196a:	33a0      	adds	r3, #160	; 0xa0
 800196c:	443b      	add	r3, r7
 800196e:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8001972:	b29b      	uxth	r3, r3
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	b29a      	uxth	r2, r3
 8001978:	f107 010c 	add.w	r1, r7, #12
 800197c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001980:	440b      	add	r3, r1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4413      	add	r3, r2
 8001988:	b299      	uxth	r1, r3
 800198a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800198e:	1c9a      	adds	r2, r3, #2
 8001990:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001994:	460a      	mov	r2, r1
 8001996:	801a      	strh	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8001998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800199c:	3301      	adds	r3, #1
 800199e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80019a2:	e7d4      	b.n	800194e <_Z16MLX90621_I2CReadhhhhhPt+0x9a>
    }

    return 0;   
 80019a4:	2300      	movs	r3, #0
} 
 80019a6:	4618      	mov	r0, r3
 80019a8:	37a4      	adds	r7, #164	; 0xa4
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200000b8 	.word	0x200000b8

080019b4 <_Z17MLX90621_I2CWritehhht>:

int MLX90621_I2CWrite(uint8_t slaveAddr, uint8_t command, uint8_t checkValue, uint16_t data)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	4604      	mov	r4, r0
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	4603      	mov	r3, r0
 80019c8:	71bb      	strb	r3, [r7, #6]
 80019ca:	460b      	mov	r3, r1
 80019cc:	717b      	strb	r3, [r7, #5]
 80019ce:	4613      	mov	r3, r2
 80019d0:	807b      	strh	r3, [r7, #2]
    uint8_t sa;
    uint8_t cmd[5] = {0,0,0,0,0};
 80019d2:	4a26      	ldr	r2, [pc, #152]	; (8001a6c <_Z17MLX90621_I2CWritehhht+0xb8>)
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019dc:	6018      	str	r0, [r3, #0]
 80019de:	3304      	adds	r3, #4
 80019e0:	7019      	strb	r1, [r3, #0]
    static uint16_t dataCheck;
    

    sa = (slaveAddr << 1);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
    cmd[0] = command;
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	723b      	strb	r3, [r7, #8]
    cmd[2] = data & 0x00FF;
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	72bb      	strb	r3, [r7, #10]
    cmd[1] = cmd[2] - checkValue;
 80019f2:	7aba      	ldrb	r2, [r7, #10]
 80019f4:	797b      	ldrb	r3, [r7, #5]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	727b      	strb	r3, [r7, #9]
    cmd[4] = data >> 8;
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	733b      	strb	r3, [r7, #12]
    cmd[3] = cmd[4] - checkValue;
 8001a06:	7b3a      	ldrb	r2, [r7, #12]
 8001a08:	797b      	ldrb	r3, [r7, #5]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	72fb      	strb	r3, [r7, #11]

    if(HAL_I2C_Master_Transmit(&hi2c2, sa, cmd, 5, 100) != HAL_OK)
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	b299      	uxth	r1, r3
 8001a14:	f107 0208 	add.w	r2, r7, #8
 8001a18:	2364      	movs	r3, #100	; 0x64
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2305      	movs	r3, #5
 8001a1e:	4814      	ldr	r0, [pc, #80]	; (8001a70 <_Z17MLX90621_I2CWritehhht+0xbc>)
 8001a20:	f000 ffb4 	bl	800298c <HAL_I2C_Master_Transmit>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf14      	ite	ne
 8001a2a:	2301      	movne	r3, #1
 8001a2c:	2300      	moveq	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <_Z17MLX90621_I2CWritehhht+0x86>
    {
        return -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a38:	e014      	b.n	8001a64 <_Z17MLX90621_I2CWritehhht+0xb0>
    }

    MLX90621_I2CRead(slaveAddr, 0x02, 0x8F+command, 0, 1, &dataCheck);
 8001a3a:	79bb      	ldrb	r3, [r7, #6]
 8001a3c:	3b71      	subs	r3, #113	; 0x71
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	79f8      	ldrb	r0, [r7, #7]
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <_Z17MLX90621_I2CWritehhht+0xc0>)
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	2301      	movs	r3, #1
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	f7ff ff31 	bl	80018b4 <_Z16MLX90621_I2CReadhhhhhPt>
    
    if ( dataCheck != data)
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_Z17MLX90621_I2CWritehhht+0xc0>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d002      	beq.n	8001a62 <_Z17MLX90621_I2CWritehhht+0xae>
    {
        return -2;
 8001a5c:	f06f 0301 	mvn.w	r3, #1
 8001a60:	e000      	b.n	8001a64 <_Z17MLX90621_I2CWritehhht+0xb0>
    }    
    
    return 0;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	08005ff8 	.word	0x08005ff8
 8001a70:	200000b8 	.word	0x200000b8
 8001a74:	2000008c 	.word	0x2000008c

08001a78 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_CAN1_Init+0x64>)
 8001a7e:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <MX_CAN1_Init+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_CAN1_Init+0x64>)
 8001a84:	2218      	movs	r2, #24
 8001a86:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_CAN1_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_CAN1_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_CAN1_Init+0x64>)
 8001a96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a9a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_CAN1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_CAN1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_CAN1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MX_CAN1_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_CAN1_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <MX_CAN1_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_CAN1_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_CAN1_Init+0x64>)
 8001ac8:	f000 fb44 	bl	8002154 <HAL_CAN_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001ad2:	f000 fa18 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000090 	.word	0x20000090
 8001ae0:	40006400 	.word	0x40006400

08001ae4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <HAL_CAN_MspInit+0x80>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d129      	bne.n	8001b5a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_CAN_MspInit+0x84>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <HAL_CAN_MspInit+0x84>)
 8001b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b10:	6593      	str	r3, [r2, #88]	; 0x58
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_CAN_MspInit+0x84>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_CAN_MspInit+0x84>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_CAN_MspInit+0x84>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_CAN_MspInit+0x84>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b48:	2309      	movs	r3, #9
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f000 fcdf 	bl	8002518 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3728      	adds	r7, #40	; 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40006400 	.word	0x40006400
 8001b68:	40021000 	.word	0x40021000

08001b6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	4a36      	ldr	r2, [pc, #216]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a30      	ldr	r2, [pc, #192]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a2a      	ldr	r2, [pc, #168]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_WAR2_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2144      	movs	r1, #68	; 0x44
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bea:	f000 fe27 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WAR1_GPIO_Port, LED_WAR1_Pin, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2110      	movs	r1, #16
 8001bf2:	481c      	ldr	r0, [pc, #112]	; (8001c64 <MX_GPIO_Init+0xf8>)
 8001bf4:	f000 fe22 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	481a      	ldr	r0, [pc, #104]	; (8001c68 <MX_GPIO_Init+0xfc>)
 8001bfe:	f000 fe1d 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_WAR2_Pin|LED_ERR_Pin;
 8001c02:	2344      	movs	r3, #68	; 0x44
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1c:	f000 fc7c 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WAR1_Pin;
 8001c20:	2310      	movs	r3, #16
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_WAR1_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	480b      	ldr	r0, [pc, #44]	; (8001c64 <MX_GPIO_Init+0xf8>)
 8001c38:	f000 fc6e 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OK_Pin;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OK_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_GPIO_Init+0xfc>)
 8001c54:	f000 fc60 	bl	8002518 <HAL_GPIO_Init>

}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000800 	.word	0x48000800
 8001c68:	48000400 	.word	0x48000400

08001c6c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <MX_I2C2_Init+0x78>)
 8001c74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x302027FF;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <MX_I2C2_Init+0x7c>)
 8001c7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ca6:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001ca8:	f000 fde0 	bl	800286c <HAL_I2C_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001cb2:	f000 f928 	bl	8001f06 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001cba:	f001 fc47 	bl	800354c <HAL_I2CEx_ConfigAnalogFilter>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001cc4:	f000 f91f 	bl	8001f06 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_I2C2_Init+0x74>)
 8001ccc:	f001 fc89 	bl	80035e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cd6:	f000 f916 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200000b8 	.word	0x200000b8
 8001ce4:	40005800 	.word	0x40005800
 8001ce8:	302027ff 	.word	0x302027ff

08001cec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0b0      	sub	sp, #192	; 0xc0
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2298      	movs	r2, #152	; 0x98
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 f95f 	bl	8005fd0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <HAL_I2C_MspInit+0xb0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d13b      	bne.n	8001d94 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f002 fc69 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d34:	f000 f8e7 	bl	8001f06 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_I2C_MspInit+0xb4>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_I2C_MspInit+0xb4>)
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <HAL_I2C_MspInit+0xb4>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d58:	2312      	movs	r3, #18
 8001d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d74:	4619      	mov	r1, r3
 8001d76:	480b      	ldr	r0, [pc, #44]	; (8001da4 <HAL_I2C_MspInit+0xb8>)
 8001d78:	f000 fbce 	bl	8002518 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_I2C_MspInit+0xb4>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_I2C_MspInit+0xb4>)
 8001d82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d86:	6593      	str	r3, [r2, #88]	; 0x58
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_I2C_MspInit+0xb4>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d94:	bf00      	nop
 8001d96:	37c0      	adds	r7, #192	; 0xc0
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40005800 	.word	0x40005800
 8001da0:	40021000 	.word	0x40021000
 8001da4:	48000400 	.word	0x48000400

08001da8 <main>:
  */



int main(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db0:	f000 f937 	bl	8002022 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db4:	f000 f84a 	bl	8001e4c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db8:	f7ff fed8 	bl	8001b6c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001dbc:	f7ff fe5c 	bl	8001a78 <MX_CAN1_Init>
  MX_I2C2_Init();
 8001dc0:	f7ff ff54 	bl	8001c6c <MX_I2C2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(500);
 8001dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dc8:	f000 f9a0 	bl	800210c <HAL_Delay>
  int resolution;
  int refresh;
  static uint8_t eeMLX90621[256];
  static uint16_t mlx90621Frame[66];
  paramsMLX90621 mlx90621;
  float emissivity = 0.95;
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <main+0x90>)
 8001dce:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
  float tr = 28;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <main+0x94>)
 8001dd4:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348





  status = MLX90621_DumpEE(eeMLX90621);
 8001dd8:	4819      	ldr	r0, [pc, #100]	; (8001e40 <main+0x98>)
 8001dda:	f7fe fedd 	bl	8000b98 <_Z15MLX90621_DumpEEPh>
 8001dde:	f8c7 0344 	str.w	r0, [r7, #836]	; 0x344
  status = MLX90621_Configure(eeMLX90621);
 8001de2:	4817      	ldr	r0, [pc, #92]	; (8001e40 <main+0x98>)
 8001de4:	f7fe fefe 	bl	8000be4 <_Z18MLX90621_ConfigurePh>
 8001de8:	f8c7 0344 	str.w	r0, [r7, #836]	; 0x344

  resolution = MLX90621_GetCurResolution();
 8001dec:	f7fe ff65 	bl	8000cba <_Z25MLX90621_GetCurResolutionv>
 8001df0:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
  refresh = MLX90621_GetRefreshRate();
 8001df4:	f7fe ff79 	bl	8000cea <_Z23MLX90621_GetRefreshRatev>
 8001df8:	f8c7 033c 	str.w	r0, [r7, #828]	; 0x33c

  status = MLX90621_ExtractParameters(eeMLX90621, &mlx90621);
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480f      	ldr	r0, [pc, #60]	; (8001e40 <main+0x98>)
 8001e02:	f7fe ff36 	bl	8000c72 <_Z26MLX90621_ExtractParametersPhP14paramsMLX90621>
 8001e06:	f8c7 0344 	str.w	r0, [r7, #836]	; 0x344

  while (1)
  {
    /* USER CODE END WHILE */

	  status = MLX90621_GetFrameData(mlx90621Frame);
 8001e0a:	480e      	ldr	r0, [pc, #56]	; (8001e44 <main+0x9c>)
 8001e0c:	f7fe fed4 	bl	8000bb8 <_Z21MLX90621_GetFrameDataPt>
 8001e10:	f8c7 0344 	str.w	r0, [r7, #836]	; 0x344

	  Ta = MLX90621_GetTa(mlx90621Frame, &mlx90621);
 8001e14:	463b      	mov	r3, r7
 8001e16:	4619      	mov	r1, r3
 8001e18:	480a      	ldr	r0, [pc, #40]	; (8001e44 <main+0x9c>)
 8001e1a:	f7ff f92b 	bl	8001074 <_Z14MLX90621_GetTaPtPK14paramsMLX90621>
 8001e1e:	ed87 0ace 	vstr	s0, [r7, #824]	; 0x338

	  MLX90621_CalculateTo(mlx90621Frame, &mlx90621, emissivity, tr, mlx90621To);
 8001e22:	463b      	mov	r3, r7
 8001e24:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <main+0xa0>)
 8001e26:	edd7 0ad2 	vldr	s1, [r7, #840]	; 0x348
 8001e2a:	ed97 0ad3 	vldr	s0, [r7, #844]	; 0x34c
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4804      	ldr	r0, [pc, #16]	; (8001e44 <main+0x9c>)
 8001e32:	f7fe ff71 	bl	8000d18 <_Z20MLX90621_CalculateToPtPK14paramsMLX90621ffPf>
	  status = MLX90621_GetFrameData(mlx90621Frame);
 8001e36:	e7e8      	b.n	8001e0a <main+0x62>
 8001e38:	3f733333 	.word	0x3f733333
 8001e3c:	41e00000 	.word	0x41e00000
 8001e40:	2000010c 	.word	0x2000010c
 8001e44:	2000020c 	.word	0x2000020c
 8001e48:	20000290 	.word	0x20000290

08001e4c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b098      	sub	sp, #96	; 0x60
 8001e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e52:	f107 0318 	add.w	r3, r7, #24
 8001e56:	2248      	movs	r2, #72	; 0x48
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 f8b8 	bl	8005fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f001 fc24 	bl	80036bc <HAL_PWREx_ControlVoltageScaling>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bf14      	ite	ne
 8001e7a:	2301      	movne	r3, #1
 8001e7c:	2300      	moveq	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8001e84:	f000 f83f 	bl	8001f06 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e90:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e92:	2302      	movs	r3, #2
 8001e94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e96:	2303      	movs	r3, #3
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001e9e:	231e      	movs	r3, #30
 8001ea0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eae:	f107 0318 	add.w	r3, r7, #24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 fca6 	bl	8003804 <HAL_RCC_OscConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8001ec8:	f000 f81d 	bl	8001f06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ecc:	230f      	movs	r3, #15
 8001ece:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2105      	movs	r1, #5
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 f909 	bl	80040fc <HAL_RCC_ClockConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8001efa:	f000 f804 	bl	8001f06 <Error_Handler>
  }
}
 8001efe:	bf00      	nop
 8001f00:	3760      	adds	r7, #96	; 0x60
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0a:	b672      	cpsid	i
}
 8001f0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <Error_Handler+0x8>

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_MspInit+0x44>)
 8001f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_MspInit+0x44>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6613      	str	r3, [r2, #96]	; 0x60
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_MspInit+0x44>)
 8001f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_MspInit+0x44>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <HAL_MspInit+0x44>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_MspInit+0x44>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <NMI_Handler+0x4>

08001f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <HardFault_Handler+0x4>

08001f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <MemManage_Handler+0x4>

08001f6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa4:	f000 f892 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <SystemInit+0x20>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <SystemInit+0x20>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002008 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd4:	f7ff ffea 	bl	8001fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <LoopForever+0x6>)
  ldr r1, =_edata
 8001fda:	490d      	ldr	r1, [pc, #52]	; (8002010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <LoopForever+0xe>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe0:	e002      	b.n	8001fe8 <LoopCopyDataInit>

08001fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe6:	3304      	adds	r3, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fec:	d3f9      	bcc.n	8001fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff0:	4c0a      	ldr	r4, [pc, #40]	; (800201c <LoopForever+0x16>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff4:	e001      	b.n	8001ffa <LoopFillZerobss>

08001ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff8:	3204      	adds	r2, #4

08001ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ffc:	d3fb      	bcc.n	8001ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f003 ffc3 	bl	8005f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002002:	f7ff fed1 	bl	8001da8 <main>

08002006 <LoopForever>:

LoopForever:
    b LoopForever
 8002006:	e7fe      	b.n	8002006 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002008:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002014:	08006078 	.word	0x08006078
  ldr r2, =_sbss
 8002018:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800201c:	20000394 	.word	0x20000394

08002020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC1_2_IRQHandler>

08002022 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202c:	2003      	movs	r0, #3
 800202e:	f000 fa3f 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002032:	200f      	movs	r0, #15
 8002034:	f000 f80e 	bl	8002054 <HAL_InitTick>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	e001      	b.n	8002048 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002044:	f7ff ff64 	bl	8001f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002048:	79fb      	ldrb	r3, [r7, #7]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <HAL_InitTick+0x6c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d023      	beq.n	80020b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_InitTick+0x70>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <HAL_InitTick+0x6c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	fbb3 f3f1 	udiv	r3, r3, r1
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fa3d 	bl	80024fe <HAL_SYSTICK_Config>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d809      	bhi.n	80020a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002098:	f000 fa15 	bl	80024c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_InitTick+0x74>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e007      	b.n	80020b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e004      	b.n	80020b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
 80020ae:	e001      	b.n	80020b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000008 	.word	0x20000008
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x24>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_IncTick+0x24>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20000390 	.word	0x20000390

080020f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_GetTick+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000390 	.word	0x20000390

0800210c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff ffee 	bl	80020f4 <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002124:	d005      	beq.n	8002132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_Delay+0x44>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002132:	bf00      	nop
 8002134:	f7ff ffde 	bl	80020f4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d8f7      	bhi.n	8002134 <HAL_Delay+0x28>
  {
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000008 	.word	0x20000008

08002154 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0ed      	b.n	8002342 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fcb6 	bl	8001ae4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002188:	f7ff ffb4 	bl	80020f4 <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800218e:	e012      	b.n	80021b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002190:	f7ff ffb0 	bl	80020f4 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b0a      	cmp	r3, #10
 800219c:	d90b      	bls.n	80021b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2205      	movs	r2, #5
 80021ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0c5      	b.n	8002342 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0e5      	beq.n	8002190 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0202 	bic.w	r2, r2, #2
 80021d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d4:	f7ff ff8e 	bl	80020f4 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021da:	e012      	b.n	8002202 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021dc:	f7ff ff8a 	bl	80020f4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b0a      	cmp	r3, #10
 80021e8:	d90b      	bls.n	8002202 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2205      	movs	r2, #5
 80021fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e09f      	b.n	8002342 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e5      	bne.n	80021dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7e1b      	ldrb	r3, [r3, #24]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d108      	bne.n	800222a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e007      	b.n	800223a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7e5b      	ldrb	r3, [r3, #25]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d108      	bne.n	8002254 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e007      	b.n	8002264 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002262:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e9b      	ldrb	r3, [r3, #26]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d108      	bne.n	800227e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0220 	orr.w	r2, r2, #32
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e007      	b.n	800228e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0220 	bic.w	r2, r2, #32
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7edb      	ldrb	r3, [r3, #27]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d108      	bne.n	80022a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0210 	bic.w	r2, r2, #16
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e007      	b.n	80022b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0210 	orr.w	r2, r2, #16
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7f1b      	ldrb	r3, [r3, #28]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d108      	bne.n	80022d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0208 	orr.w	r2, r2, #8
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e007      	b.n	80022e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0208 	bic.w	r2, r2, #8
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7f5b      	ldrb	r3, [r3, #29]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d108      	bne.n	80022fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0204 	orr.w	r2, r2, #4
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e007      	b.n	800230c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0204 	bic.w	r2, r2, #4
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	ea42 0103 	orr.w	r1, r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	1e5a      	subs	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247c:	d301      	bcc.n	8002482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2301      	movs	r3, #1
 8002480:	e00f      	b.n	80024a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SysTick_Config+0x40>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248a:	210f      	movs	r1, #15
 800248c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002490:	f7ff ff8e 	bl	80023b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x40>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff47 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff5c 	bl	8002394 <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff8e 	bl	8002404 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5d 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffb0 	bl	800246c <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002526:	e166      	b.n	80027f6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8158 	beq.w	80027f0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d005      	beq.n	8002558 <HAL_GPIO_Init+0x40>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d130      	bne.n	80025ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800258e:	2201      	movs	r2, #1
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f003 0201 	and.w	r2, r3, #1
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d017      	beq.n	80025f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d123      	bne.n	800264a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	08da      	lsrs	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3208      	adds	r2, #8
 800260a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	220f      	movs	r2, #15
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	6939      	ldr	r1, [r7, #16]
 8002646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	2203      	movs	r2, #3
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0203 	and.w	r2, r3, #3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80b2 	beq.w	80027f0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <HAL_GPIO_Init+0x2fc>)
 800268e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002690:	4a60      	ldr	r2, [pc, #384]	; (8002814 <HAL_GPIO_Init+0x2fc>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6613      	str	r3, [r2, #96]	; 0x60
 8002698:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <HAL_GPIO_Init+0x2fc>)
 800269a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026a4:	4a5c      	ldr	r2, [pc, #368]	; (8002818 <HAL_GPIO_Init+0x300>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026ce:	d02b      	beq.n	8002728 <HAL_GPIO_Init+0x210>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a52      	ldr	r2, [pc, #328]	; (800281c <HAL_GPIO_Init+0x304>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d025      	beq.n	8002724 <HAL_GPIO_Init+0x20c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a51      	ldr	r2, [pc, #324]	; (8002820 <HAL_GPIO_Init+0x308>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d01f      	beq.n	8002720 <HAL_GPIO_Init+0x208>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a50      	ldr	r2, [pc, #320]	; (8002824 <HAL_GPIO_Init+0x30c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d019      	beq.n	800271c <HAL_GPIO_Init+0x204>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a4f      	ldr	r2, [pc, #316]	; (8002828 <HAL_GPIO_Init+0x310>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <HAL_GPIO_Init+0x200>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a4e      	ldr	r2, [pc, #312]	; (800282c <HAL_GPIO_Init+0x314>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00d      	beq.n	8002714 <HAL_GPIO_Init+0x1fc>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a4d      	ldr	r2, [pc, #308]	; (8002830 <HAL_GPIO_Init+0x318>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d007      	beq.n	8002710 <HAL_GPIO_Init+0x1f8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a4c      	ldr	r2, [pc, #304]	; (8002834 <HAL_GPIO_Init+0x31c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <HAL_GPIO_Init+0x1f4>
 8002708:	2307      	movs	r3, #7
 800270a:	e00e      	b.n	800272a <HAL_GPIO_Init+0x212>
 800270c:	2308      	movs	r3, #8
 800270e:	e00c      	b.n	800272a <HAL_GPIO_Init+0x212>
 8002710:	2306      	movs	r3, #6
 8002712:	e00a      	b.n	800272a <HAL_GPIO_Init+0x212>
 8002714:	2305      	movs	r3, #5
 8002716:	e008      	b.n	800272a <HAL_GPIO_Init+0x212>
 8002718:	2304      	movs	r3, #4
 800271a:	e006      	b.n	800272a <HAL_GPIO_Init+0x212>
 800271c:	2303      	movs	r3, #3
 800271e:	e004      	b.n	800272a <HAL_GPIO_Init+0x212>
 8002720:	2302      	movs	r3, #2
 8002722:	e002      	b.n	800272a <HAL_GPIO_Init+0x212>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_GPIO_Init+0x212>
 8002728:	2300      	movs	r3, #0
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	f002 0203 	and.w	r2, r2, #3
 8002730:	0092      	lsls	r2, r2, #2
 8002732:	4093      	lsls	r3, r2
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800273a:	4937      	ldr	r1, [pc, #220]	; (8002818 <HAL_GPIO_Init+0x300>)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	3302      	adds	r3, #2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_GPIO_Init+0x320>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800276c:	4a32      	ldr	r2, [pc, #200]	; (8002838 <HAL_GPIO_Init+0x320>)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002772:	4b31      	ldr	r3, [pc, #196]	; (8002838 <HAL_GPIO_Init+0x320>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002796:	4a28      	ldr	r2, [pc, #160]	; (8002838 <HAL_GPIO_Init+0x320>)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <HAL_GPIO_Init+0x320>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027c0:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <HAL_GPIO_Init+0x320>)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_GPIO_Init+0x320>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <HAL_GPIO_Init+0x320>)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	3301      	adds	r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	f47f ae91 	bne.w	8002528 <HAL_GPIO_Init+0x10>
  }
}
 8002806:	bf00      	nop
 8002808:	bf00      	nop
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40021000 	.word	0x40021000
 8002818:	40010000 	.word	0x40010000
 800281c:	48000400 	.word	0x48000400
 8002820:	48000800 	.word	0x48000800
 8002824:	48000c00 	.word	0x48000c00
 8002828:	48001000 	.word	0x48001000
 800282c:	48001400 	.word	0x48001400
 8002830:	48001800 	.word	0x48001800
 8002834:	48001c00 	.word	0x48001c00
 8002838:	40010400 	.word	0x40010400

0800283c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
 8002848:	4613      	mov	r3, r2
 800284a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800284c:	787b      	ldrb	r3, [r7, #1]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002858:	e002      	b.n	8002860 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e081      	b.n	8002982 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fa2a 	bl	8001cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2224      	movs	r2, #36	; 0x24
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d107      	bne.n	80028e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	e006      	b.n	80028f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d104      	bne.n	8002906 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002904:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002918:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002928:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69d9      	ldr	r1, [r3, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1a      	ldr	r2, [r3, #32]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	461a      	mov	r2, r3
 8002998:	460b      	mov	r3, r1
 800299a:	817b      	strh	r3, [r7, #10]
 800299c:	4613      	mov	r3, r2
 800299e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	f040 80da 	bne.w	8002b62 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_I2C_Master_Transmit+0x30>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e0d3      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x1d8>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029c4:	f7ff fb96 	bl	80020f4 <HAL_GetTick>
 80029c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2319      	movs	r3, #25
 80029d0:	2201      	movs	r2, #1
 80029d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fa5e 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0be      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2221      	movs	r2, #33	; 0x21
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2210      	movs	r2, #16
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	893a      	ldrh	r2, [r7, #8]
 8002a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2bff      	cmp	r3, #255	; 0xff
 8002a16:	d90e      	bls.n	8002a36 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	22ff      	movs	r2, #255	; 0xff
 8002a1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	8979      	ldrh	r1, [r7, #10]
 8002a26:	4b51      	ldr	r3, [pc, #324]	; (8002b6c <HAL_I2C_Master_Transmit+0x1e0>)
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fbda 	bl	80031e8 <I2C_TransferConfig>
 8002a34:	e06c      	b.n	8002b10 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	8979      	ldrh	r1, [r7, #10]
 8002a48:	4b48      	ldr	r3, [pc, #288]	; (8002b6c <HAL_I2C_Master_Transmit+0x1e0>)
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fbc9 	bl	80031e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a56:	e05b      	b.n	8002b10 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	6a39      	ldr	r1, [r7, #32]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fa5b 	bl	8002f18 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e07b      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d034      	beq.n	8002b10 <HAL_I2C_Master_Transmit+0x184>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d130      	bne.n	8002b10 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2180      	movs	r1, #128	; 0x80
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f9ed 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e04d      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2bff      	cmp	r3, #255	; 0xff
 8002ad0:	d90e      	bls.n	8002af0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	22ff      	movs	r2, #255	; 0xff
 8002ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	8979      	ldrh	r1, [r7, #10]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fb7d 	bl	80031e8 <I2C_TransferConfig>
 8002aee:	e00f      	b.n	8002b10 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	8979      	ldrh	r1, [r7, #10]
 8002b02:	2300      	movs	r3, #0
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fb6c 	bl	80031e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d19e      	bne.n	8002a58 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	6a39      	ldr	r1, [r7, #32]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fa3a 	bl	8002f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e01a      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2220      	movs	r2, #32
 8002b34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b42:	400b      	ands	r3, r1
 8002b44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e000      	b.n	8002b64 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
  }
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	80002000 	.word	0x80002000
 8002b70:	fe00e800 	.word	0xfe00e800

08002b74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4611      	mov	r1, r2
 8002b80:	461a      	mov	r2, r3
 8002b82:	4603      	mov	r3, r0
 8002b84:	817b      	strh	r3, [r7, #10]
 8002b86:	460b      	mov	r3, r1
 8002b88:	813b      	strh	r3, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	f040 80fd 	bne.w	8002d96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_I2C_Mem_Read+0x34>
 8002ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0f1      	b.n	8002d98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2C_Mem_Read+0x4e>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e0ea      	b.n	8002d98 <HAL_I2C_Mem_Read+0x224>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bca:	f7ff fa93 	bl	80020f4 <HAL_GetTick>
 8002bce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2319      	movs	r3, #25
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f95b 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0d5      	b.n	8002d98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2222      	movs	r2, #34	; 0x22
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2240      	movs	r2, #64	; 0x40
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c14:	88f8      	ldrh	r0, [r7, #6]
 8002c16:	893a      	ldrh	r2, [r7, #8]
 8002c18:	8979      	ldrh	r1, [r7, #10]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	4603      	mov	r3, r0
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f8bf 	bl	8002da8 <I2C_RequestMemoryRead>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0ad      	b.n	8002d98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2bff      	cmp	r3, #255	; 0xff
 8002c44:	d90e      	bls.n	8002c64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	22ff      	movs	r2, #255	; 0xff
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	8979      	ldrh	r1, [r7, #10]
 8002c54:	4b52      	ldr	r3, [pc, #328]	; (8002da0 <HAL_I2C_Mem_Read+0x22c>)
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fac3 	bl	80031e8 <I2C_TransferConfig>
 8002c62:	e00f      	b.n	8002c84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	8979      	ldrh	r1, [r7, #10]
 8002c76:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <HAL_I2C_Mem_Read+0x22c>)
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fab2 	bl	80031e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f902 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e07c      	b.n	8002d98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d034      	beq.n	8002d44 <HAL_I2C_Mem_Read+0x1d0>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d130      	bne.n	8002d44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2180      	movs	r1, #128	; 0x80
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f8d3 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e04d      	b.n	8002d98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2bff      	cmp	r3, #255	; 0xff
 8002d04:	d90e      	bls.n	8002d24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	22ff      	movs	r2, #255	; 0xff
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	8979      	ldrh	r1, [r7, #10]
 8002d14:	2300      	movs	r3, #0
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fa63 	bl	80031e8 <I2C_TransferConfig>
 8002d22:	e00f      	b.n	8002d44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	8979      	ldrh	r1, [r7, #10]
 8002d36:	2300      	movs	r3, #0
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fa52 	bl	80031e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d19a      	bne.n	8002c84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f920 	bl	8002f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e01a      	b.n	8002d98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2220      	movs	r2, #32
 8002d68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_I2C_Mem_Read+0x230>)
 8002d76:	400b      	ands	r3, r1
 8002d78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	80002400 	.word	0x80002400
 8002da4:	fe00e800 	.word	0xfe00e800

08002da8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	4608      	mov	r0, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	817b      	strh	r3, [r7, #10]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	813b      	strh	r3, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	8979      	ldrh	r1, [r7, #10]
 8002dc8:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <I2C_RequestMemoryRead+0xa4>)
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fa0a 	bl	80031e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	69b9      	ldr	r1, [r7, #24]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f89d 	bl	8002f18 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e02c      	b.n	8002e42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dee:	893b      	ldrh	r3, [r7, #8]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
 8002df8:	e015      	b.n	8002e26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dfa:	893b      	ldrh	r3, [r7, #8]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	69b9      	ldr	r1, [r7, #24]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f883 	bl	8002f18 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e012      	b.n	8002e42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1c:	893b      	ldrh	r3, [r7, #8]
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2140      	movs	r1, #64	; 0x40
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f831 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	80002000 	.word	0x80002000

08002e50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d103      	bne.n	8002e6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d007      	beq.n	8002e8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	619a      	str	r2, [r3, #24]
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea8:	e022      	b.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb0:	d01e      	beq.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb2:	f7ff f91f 	bl	80020f4 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d113      	bne.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e00f      	b.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d0cd      	beq.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f24:	e02c      	b.n	8002f80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f870 	bl	8003010 <I2C_IsErrorOccurred>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e02a      	b.n	8002f90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f40:	d01e      	beq.n	8002f80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f42:	f7ff f8d7 	bl	80020f4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d302      	bcc.n	8002f58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d113      	bne.n	8002f80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e007      	b.n	8002f90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d1cb      	bne.n	8002f26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa4:	e028      	b.n	8002ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f830 	bl	8003010 <I2C_IsErrorOccurred>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e026      	b.n	8003008 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fba:	f7ff f89b 	bl	80020f4 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d302      	bcc.n	8002fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d113      	bne.n	8002ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e007      	b.n	8003008 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b20      	cmp	r3, #32
 8003004:	d1cf      	bne.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d075      	beq.n	8003128 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2210      	movs	r2, #16
 8003042:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003044:	e056      	b.n	80030f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800304c:	d052      	beq.n	80030f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7ff f851 	bl	80020f4 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <I2C_IsErrorOccurred+0x54>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d147      	bne.n	80030f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003076:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003086:	d12e      	bne.n	80030e6 <I2C_IsErrorOccurred+0xd6>
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308e:	d02a      	beq.n	80030e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	2b20      	cmp	r3, #32
 8003094:	d027      	beq.n	80030e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030a6:	f7ff f825 	bl	80020f4 <HAL_GetTick>
 80030aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ac:	e01b      	b.n	80030e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030ae:	f7ff f821 	bl	80020f4 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b19      	cmp	r3, #25
 80030ba:	d914      	bls.n	80030e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d1dc      	bne.n	80030ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d003      	beq.n	800310a <I2C_IsErrorOccurred+0xfa>
 8003102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003106:	2b00      	cmp	r3, #0
 8003108:	d09d      	beq.n	8003046 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800310a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2220      	movs	r2, #32
 8003118:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800314a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	f043 0308 	orr.w	r3, r3, #8
 8003162:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800316c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01c      	beq.n	80031d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7ff fe56 	bl	8002e50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <I2C_IsErrorOccurred+0x1d4>)
 80031b0:	400b      	ands	r3, r1
 80031b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3728      	adds	r7, #40	; 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	fe00e800 	.word	0xfe00e800

080031e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	817b      	strh	r3, [r7, #10]
 80031f6:	4613      	mov	r3, r2
 80031f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003200:	7a7b      	ldrb	r3, [r7, #9]
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003208:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	4313      	orrs	r3, r2
 8003212:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003216:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	0d5b      	lsrs	r3, r3, #21
 8003222:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <I2C_TransferConfig+0x60>)
 8003228:	430b      	orrs	r3, r1
 800322a:	43db      	mvns	r3, r3
 800322c:	ea02 0103 	and.w	r1, r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	03ff63ff 	.word	0x03ff63ff

0800324c <Custom_HAL_I2C_Mem_Read>:
HAL_StatusTypeDef Custom_HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,

										  uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead,

										  uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af04      	add	r7, sp, #16
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	4608      	mov	r0, r1
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4603      	mov	r3, r0
 800325c:	807b      	strh	r3, [r7, #2]
 800325e:	460b      	mov	r3, r1
 8003260:	707b      	strb	r3, [r7, #1]
 8003262:	4613      	mov	r3, r2
 8003264:	703b      	strb	r3, [r7, #0]
  uint32_t tickstart;

  /* Check the parameters */
  //assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b20      	cmp	r3, #32
 8003270:	f040 8101 	bne.w	8003476 <Custom_HAL_I2C_Mem_Read+0x22a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <Custom_HAL_I2C_Mem_Read+0x34>
 800327a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <Custom_HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003286:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0f5      	b.n	8003478 <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <Custom_HAL_I2C_Mem_Read+0x4e>
 8003296:	2302      	movs	r3, #2
 8003298:	e0ee      	b.n	8003478 <Custom_HAL_I2C_Mem_Read+0x22c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032a2:	f7fe ff27 	bl	80020f4 <HAL_GetTick>
 80032a6:	60f8      	str	r0, [r7, #12]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2319      	movs	r3, #25
 80032ae:	2201      	movs	r2, #1
 80032b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fdef 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <Custom_HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0d9      	b.n	8003478 <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2222      	movs	r2, #34	; 0x22
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2240      	movs	r2, #64	; 0x40
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if(Custom_I2C_RequestMemoryRead(hi2c, DevAddress,
 80032ec:	7838      	ldrb	r0, [r7, #0]
 80032ee:	787a      	ldrb	r2, [r7, #1]
 80032f0:	8879      	ldrh	r1, [r7, #2]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	9303      	str	r3, [sp, #12]
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	9302      	str	r3, [sp, #8]
 80032fa:	7f3b      	ldrb	r3, [r7, #28]
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	7e3b      	ldrb	r3, [r7, #24]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	4603      	mov	r3, r0
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f8bf 	bl	8003488 <Custom_I2C_RequestMemoryRead>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <Custom_HAL_I2C_Mem_Read+0xd0>
    								command, startAddress,
									addressStep, nMemAddressRead,
									Timeout, tickstart) != HAL_OK)
    {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0ad      	b.n	8003478 <Custom_HAL_I2C_Mem_Read+0x22c>
    }


    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2bff      	cmp	r3, #255	; 0xff
 8003324:	d90e      	bls.n	8003344 <Custom_HAL_I2C_Mem_Read+0xf8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	22ff      	movs	r2, #255	; 0xff
 800332a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	b2da      	uxtb	r2, r3
 8003332:	8879      	ldrh	r1, [r7, #2]
 8003334:	4b52      	ldr	r3, [pc, #328]	; (8003480 <Custom_HAL_I2C_Mem_Read+0x234>)
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ff53 	bl	80031e8 <I2C_TransferConfig>
 8003342:	e00f      	b.n	8003364 <Custom_HAL_I2C_Mem_Read+0x118>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29a      	uxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	b2da      	uxtb	r2, r3
 8003354:	8879      	ldrh	r1, [r7, #2]
 8003356:	4b4a      	ldr	r3, [pc, #296]	; (8003480 <Custom_HAL_I2C_Mem_Read+0x234>)
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ff42 	bl	80031e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	2200      	movs	r2, #0
 800336c:	2104      	movs	r1, #4
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff fd92 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <Custom_HAL_I2C_Mem_Read+0x132>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07c      	b.n	8003478 <Custom_HAL_I2C_Mem_Read+0x22c>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d034      	beq.n	8003424 <Custom_HAL_I2C_Mem_Read+0x1d8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d130      	bne.n	8003424 <Custom_HAL_I2C_Mem_Read+0x1d8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	2200      	movs	r2, #0
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff fd63 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <Custom_HAL_I2C_Mem_Read+0x190>
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e04d      	b.n	8003478 <Custom_HAL_I2C_Mem_Read+0x22c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2bff      	cmp	r3, #255	; 0xff
 80033e4:	d90e      	bls.n	8003404 <Custom_HAL_I2C_Mem_Read+0x1b8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	22ff      	movs	r2, #255	; 0xff
 80033ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	8879      	ldrh	r1, [r7, #2]
 80033f4:	2300      	movs	r3, #0
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff fef3 	bl	80031e8 <I2C_TransferConfig>
 8003402:	e00f      	b.n	8003424 <Custom_HAL_I2C_Mem_Read+0x1d8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29a      	uxth	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	b2da      	uxtb	r2, r3
 8003414:	8879      	ldrh	r1, [r7, #2]
 8003416:	2300      	movs	r3, #0
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fee2 	bl	80031e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d19a      	bne.n	8003364 <Custom_HAL_I2C_Mem_Read+0x118>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff fdb0 	bl	8002f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <Custom_HAL_I2C_Mem_Read+0x1f6>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e01a      	b.n	8003478 <Custom_HAL_I2C_Mem_Read+0x22c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2220      	movs	r2, #32
 8003448:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <Custom_HAL_I2C_Mem_Read+0x238>)
 8003456:	400b      	ands	r3, r1
 8003458:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e000      	b.n	8003478 <Custom_HAL_I2C_Mem_Read+0x22c>
  }
  else
  {
    return HAL_BUSY;
 8003476:	2302      	movs	r3, #2
  }
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	80002400 	.word	0x80002400
 8003484:	fe00e800 	.word	0xfe00e800

08003488 <Custom_I2C_RequestMemoryRead>:

static HAL_StatusTypeDef Custom_I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead,
											   uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af02      	add	r7, sp, #8
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	4608      	mov	r0, r1
 8003492:	4611      	mov	r1, r2
 8003494:	461a      	mov	r2, r3
 8003496:	4603      	mov	r3, r0
 8003498:	807b      	strh	r3, [r7, #2]
 800349a:	460b      	mov	r3, r1
 800349c:	707b      	strb	r3, [r7, #1]
 800349e:	4613      	mov	r3, r2
 80034a0:	703b      	strb	r3, [r7, #0]

									//The_num_of_bytes
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)4, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034a2:	8879      	ldrh	r1, [r7, #2]
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <Custom_I2C_RequestMemoryRead+0xc0>)
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	2300      	movs	r3, #0
 80034aa:	2204      	movs	r2, #4
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fe9b 	bl	80031e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	69b9      	ldr	r1, [r7, #24]
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff fd2e 	bl	8002f18 <I2C_WaitOnTXISFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <Custom_I2C_RequestMemoryRead+0x3e>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e03b      	b.n	800353e <Custom_I2C_RequestMemoryRead+0xb6>
  }

// "mem_write"
  hi2c->Instance->TXDR = command;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	787a      	ldrb	r2, [r7, #1]
 80034cc:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	69b9      	ldr	r1, [r7, #24]
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fd20 	bl	8002f18 <I2C_WaitOnTXISFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <Custom_I2C_RequestMemoryRead+0x5a>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e02d      	b.n	800353e <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = startAddress;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	783a      	ldrb	r2, [r7, #0]
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff fd12 	bl	8002f18 <I2C_WaitOnTXISFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <Custom_I2C_RequestMemoryRead+0x76>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e01f      	b.n	800353e <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = addressStep;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	7c3a      	ldrb	r2, [r7, #16]
 8003504:	629a      	str	r2, [r3, #40]	; 0x28


  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	69b9      	ldr	r1, [r7, #24]
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff fd04 	bl	8002f18 <I2C_WaitOnTXISFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <Custom_I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e011      	b.n	800353e <Custom_I2C_RequestMemoryRead+0xb6>
  }
  hi2c->Instance->TXDR = nMemAddressRead;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	7d3a      	ldrb	r2, [r7, #20]
 8003520:	629a      	str	r2, [r3, #40]	; 0x28
//

  /* Wait until [Transfer Complete] flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2200      	movs	r2, #0
 800352a:	2140      	movs	r1, #64	; 0x40
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fcb3 	bl	8002e98 <I2C_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <Custom_I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <Custom_I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	80002000 	.word	0x80002000

0800354c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b20      	cmp	r3, #32
 8003560:	d138      	bne.n	80035d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800356c:	2302      	movs	r3, #2
 800356e:	e032      	b.n	80035d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2224      	movs	r2, #36	; 0x24
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800359e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d139      	bne.n	800366c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003602:	2302      	movs	r3, #2
 8003604:	e033      	b.n	800366e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2224      	movs	r2, #36	; 0x24
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003634:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368c:	d102      	bne.n	8003694 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800368e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003692:	e00b      	b.n	80036ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d102      	bne.n	80036aa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80036a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a8:	e000      	b.n	80036ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80036aa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40007000 	.word	0x40007000

080036bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d141      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ca:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d131      	bne.n	800373c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d8:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036de:	4a46      	ldr	r2, [pc, #280]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036e8:	4b43      	ldr	r3, [pc, #268]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f0:	4a41      	ldr	r2, [pc, #260]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80036f8:	4b40      	ldr	r3, [pc, #256]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2232      	movs	r2, #50	; 0x32
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	4a3f      	ldr	r2, [pc, #252]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	0c9b      	lsrs	r3, r3, #18
 800370a:	3301      	adds	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800370e:	e002      	b.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3b01      	subs	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003716:	4b38      	ldr	r3, [pc, #224]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003722:	d102      	bne.n	800372a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f2      	bne.n	8003710 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800372a:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d158      	bne.n	80037ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e057      	b.n	80037ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800373c:	4b2e      	ldr	r3, [pc, #184]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003742:	4a2d      	ldr	r2, [pc, #180]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003748:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800374c:	e04d      	b.n	80037ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003754:	d141      	bne.n	80037da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003756:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003762:	d131      	bne.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800376a:	4a23      	ldr	r2, [pc, #140]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003774:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800377c:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003782:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2232      	movs	r2, #50	; 0x32
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	4a1c      	ldr	r2, [pc, #112]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	0c9b      	lsrs	r3, r3, #18
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800379a:	e002      	b.n	80037a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3b01      	subs	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ae:	d102      	bne.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f2      	bne.n	800379c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c2:	d112      	bne.n	80037ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e011      	b.n	80037ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037d8:	e007      	b.n	80037ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037e2:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40007000 	.word	0x40007000
 80037fc:	20000000 	.word	0x20000000
 8003800:	431bde83 	.word	0x431bde83

08003804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f000 bc68 	b.w	80040e8 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003818:	4b97      	ldr	r3, [pc, #604]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003822:	4b95      	ldr	r3, [pc, #596]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80e6 	beq.w	8003a06 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_RCC_OscConfig+0x4c>
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	2b0c      	cmp	r3, #12
 8003844:	f040 808d 	bne.w	8003962 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	2b01      	cmp	r3, #1
 800384c:	f040 8089 	bne.w	8003962 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003850:	4b89      	ldr	r3, [pc, #548]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d006      	beq.n	800386a <HAL_RCC_OscConfig+0x66>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	f000 bc3f 	b.w	80040e8 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386e:	4b82      	ldr	r3, [pc, #520]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <HAL_RCC_OscConfig+0x80>
 800387a:	4b7f      	ldr	r3, [pc, #508]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003882:	e005      	b.n	8003890 <HAL_RCC_OscConfig+0x8c>
 8003884:	4b7c      	ldr	r3, [pc, #496]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003890:	4293      	cmp	r3, r2
 8003892:	d224      	bcs.n	80038de <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fdf3 	bl	8004484 <RCC_SetFlashLatencyFromMSIRange>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f000 bc1f 	b.w	80040e8 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038aa:	4b73      	ldr	r3, [pc, #460]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a72      	ldr	r2, [pc, #456]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b70      	ldr	r3, [pc, #448]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	496d      	ldr	r1, [pc, #436]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c8:	4b6b      	ldr	r3, [pc, #428]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	4968      	ldr	r1, [pc, #416]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
 80038dc:	e025      	b.n	800392a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038de:	4b66      	ldr	r3, [pc, #408]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a65      	ldr	r2, [pc, #404]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80038e4:	f043 0308 	orr.w	r3, r3, #8
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	4b63      	ldr	r3, [pc, #396]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	4960      	ldr	r1, [pc, #384]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038fc:	4b5e      	ldr	r3, [pc, #376]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	495b      	ldr	r1, [pc, #364]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fdb2 	bl	8004484 <RCC_SetFlashLatencyFromMSIRange>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e3de      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800392a:	f000 fd21 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 800392e:	4602      	mov	r2, r0
 8003930:	4b51      	ldr	r3, [pc, #324]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	4950      	ldr	r1, [pc, #320]	; (8003a7c <HAL_RCC_OscConfig+0x278>)
 800393c:	5ccb      	ldrb	r3, [r1, r3]
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	4a4e      	ldr	r2, [pc, #312]	; (8003a80 <HAL_RCC_OscConfig+0x27c>)
 8003948:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800394a:	4b4e      	ldr	r3, [pc, #312]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fb80 	bl	8002054 <HAL_InitTick>
 8003954:	4603      	mov	r3, r0
 8003956:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d052      	beq.n	8003a04 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	e3c2      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d032      	beq.n	80039d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800396a:	4b43      	ldr	r3, [pc, #268]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a42      	ldr	r2, [pc, #264]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003976:	f7fe fbbd 	bl	80020f4 <HAL_GetTick>
 800397a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800397e:	f7fe fbb9 	bl	80020f4 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e3ab      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003990:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800399c:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80039a2:	f043 0308 	orr.w	r3, r3, #8
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b33      	ldr	r3, [pc, #204]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	4930      	ldr	r1, [pc, #192]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ba:	4b2f      	ldr	r3, [pc, #188]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	492b      	ldr	r1, [pc, #172]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
 80039ce:	e01a      	b.n	8003a06 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039d0:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a28      	ldr	r2, [pc, #160]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039dc:	f7fe fb8a 	bl	80020f4 <HAL_GetTick>
 80039e0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039e4:	f7fe fb86 	bl	80020f4 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e378      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x1e0>
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d073      	beq.n	8003afa <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_OscConfig+0x220>
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d10e      	bne.n	8003a3c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d063      	beq.n	8003af8 <HAL_RCC_OscConfig+0x2f4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d15f      	bne.n	8003af8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e355      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d106      	bne.n	8003a54 <HAL_RCC_OscConfig+0x250>
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a0b      	ldr	r2, [pc, #44]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e025      	b.n	8003aa0 <HAL_RCC_OscConfig+0x29c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a5c:	d114      	bne.n	8003a88 <HAL_RCC_OscConfig+0x284>
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a02      	ldr	r2, [pc, #8]	; (8003a78 <HAL_RCC_OscConfig+0x274>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e013      	b.n	8003aa0 <HAL_RCC_OscConfig+0x29c>
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08006000 	.word	0x08006000
 8003a80:	20000000 	.word	0x20000000
 8003a84:	20000004 	.word	0x20000004
 8003a88:	4b8f      	ldr	r3, [pc, #572]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a8e      	ldr	r2, [pc, #568]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b8c      	ldr	r3, [pc, #560]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a8b      	ldr	r2, [pc, #556]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fe fb24 	bl	80020f4 <HAL_GetTick>
 8003aac:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7fe fb20 	bl	80020f4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	; 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e312      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac2:	4b81      	ldr	r3, [pc, #516]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x2ac>
 8003ace:	e014      	b.n	8003afa <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fb10 	bl	80020f4 <HAL_GetTick>
 8003ad4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fe fb0c 	bl	80020f4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e2fe      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aea:	4b77      	ldr	r3, [pc, #476]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x2d4>
 8003af6:	e000      	b.n	8003afa <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d060      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_OscConfig+0x314>
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d119      	bne.n	8003b46 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d116      	bne.n	8003b46 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b18:	4b6b      	ldr	r3, [pc, #428]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_OscConfig+0x32c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e2db      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b30:	4b65      	ldr	r3, [pc, #404]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	4962      	ldr	r1, [pc, #392]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b44:	e040      	b.n	8003bc8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d023      	beq.n	8003b96 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b4e:	4b5e      	ldr	r3, [pc, #376]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5d      	ldr	r2, [pc, #372]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fe facb 	bl	80020f4 <HAL_GetTick>
 8003b5e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b62:	f7fe fac7 	bl	80020f4 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e2b9      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b74:	4b54      	ldr	r3, [pc, #336]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b80:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	494e      	ldr	r1, [pc, #312]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
 8003b94:	e018      	b.n	8003bc8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b96:	4b4c      	ldr	r3, [pc, #304]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a4b      	ldr	r2, [pc, #300]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fe faa7 	bl	80020f4 <HAL_GetTick>
 8003ba6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003baa:	f7fe faa3 	bl	80020f4 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e295      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bbc:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8082 	beq.w	8003cda <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d05f      	beq.n	8003c9e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003bde:	4b3a      	ldr	r3, [pc, #232]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d037      	beq.n	8003c64 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e26d      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01b      	beq.n	8003c4e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003c16:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1c:	4a2a      	ldr	r2, [pc, #168]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c26:	f7fe fa65 	bl	80020f4 <HAL_GetTick>
 8003c2a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2e:	f7fe fa61 	bl	80020f4 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b11      	cmp	r3, #17
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e253      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c40:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ef      	bne.n	8003c2e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c54:	f023 0210 	bic.w	r2, r3, #16
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	491a      	ldr	r1, [pc, #104]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c64:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6a:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fe fa3e 	bl	80020f4 <HAL_GetTick>
 8003c78:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7c:	f7fe fa3a 	bl	80020f4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b11      	cmp	r3, #17
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e22c      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0ef      	beq.n	8003c7c <HAL_RCC_OscConfig+0x478>
 8003c9c:	e01d      	b.n	8003cda <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca4:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cae:	f7fe fa21 	bl	80020f4 <HAL_GetTick>
 8003cb2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fe fa1d 	bl	80020f4 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b11      	cmp	r3, #17
 8003cc2:	d903      	bls.n	8003ccc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e20f      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
 8003cc8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ccc:	4b83      	ldr	r3, [pc, #524]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1ed      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80bd 	beq.w	8003e62 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cee:	4b7b      	ldr	r3, [pc, #492]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10e      	bne.n	8003d18 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	4b78      	ldr	r3, [pc, #480]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	4a77      	ldr	r2, [pc, #476]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6593      	str	r3, [r2, #88]	; 0x58
 8003d06:	4b75      	ldr	r3, [pc, #468]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d18:	4b71      	ldr	r3, [pc, #452]	; (8003ee0 <HAL_RCC_OscConfig+0x6dc>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d118      	bne.n	8003d56 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d24:	4b6e      	ldr	r3, [pc, #440]	; (8003ee0 <HAL_RCC_OscConfig+0x6dc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a6d      	ldr	r2, [pc, #436]	; (8003ee0 <HAL_RCC_OscConfig+0x6dc>)
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d30:	f7fe f9e0 	bl	80020f4 <HAL_GetTick>
 8003d34:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d38:	f7fe f9dc 	bl	80020f4 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1ce      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4a:	4b65      	ldr	r3, [pc, #404]	; (8003ee0 <HAL_RCC_OscConfig+0x6dc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d02c      	beq.n	8003dbc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003d62:	4b5e      	ldr	r3, [pc, #376]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d68:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	4959      	ldr	r1, [pc, #356]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d010      	beq.n	8003daa <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d88:	4b54      	ldr	r3, [pc, #336]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	4a53      	ldr	r2, [pc, #332]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d98:	4b50      	ldr	r3, [pc, #320]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	4a4f      	ldr	r2, [pc, #316]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da8:	e018      	b.n	8003ddc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003daa:	4b4c      	ldr	r3, [pc, #304]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	4a4a      	ldr	r2, [pc, #296]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dba:	e00f      	b.n	8003ddc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dbc:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	4a46      	ldr	r2, [pc, #280]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003dcc:	4b43      	ldr	r3, [pc, #268]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	4a42      	ldr	r2, [pc, #264]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003dd4:	f023 0304 	bic.w	r3, r3, #4
 8003dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d016      	beq.n	8003e12 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fe f986 	bl	80020f4 <HAL_GetTick>
 8003de8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fe f982 	bl	80020f4 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e172      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e02:	4b36      	ldr	r3, [pc, #216]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ed      	beq.n	8003dec <HAL_RCC_OscConfig+0x5e8>
 8003e10:	e01d      	b.n	8003e4e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e12:	f7fe f96f 	bl	80020f4 <HAL_GetTick>
 8003e16:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fe f96b 	bl	80020f4 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e15b      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ed      	bne.n	8003e1a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003e3e:	4b27      	ldr	r3, [pc, #156]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	4a25      	ldr	r2, [pc, #148]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d105      	bne.n	8003e62 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e56:	4b21      	ldr	r3, [pc, #132]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	4a20      	ldr	r2, [pc, #128]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d041      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01c      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e7c:	4a17      	ldr	r2, [pc, #92]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fe f935 	bl	80020f4 <HAL_GetTick>
 8003e8a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e8e:	f7fe f931 	bl	80020f4 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e123      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0ef      	beq.n	8003e8e <HAL_RCC_OscConfig+0x68a>
 8003eae:	e020      	b.n	8003ef2 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eb6:	4a09      	ldr	r2, [pc, #36]	; (8003edc <HAL_RCC_OscConfig+0x6d8>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fe f918 	bl	80020f4 <HAL_GetTick>
 8003ec4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ec6:	e00d      	b.n	8003ee4 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ec8:	f7fe f914 	bl	80020f4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d906      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e106      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ee4:	4b82      	ldr	r3, [pc, #520]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8003ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1ea      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80f5 	beq.w	80040e6 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	f040 80cb 	bne.w	800409c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f06:	4b7a      	ldr	r3, [pc, #488]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0203 	and.w	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d12c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	3b01      	subs	r3, #1
 8003f26:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d123      	bne.n	8003f74 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d11b      	bne.n	8003f74 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d113      	bne.n	8003f74 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d109      	bne.n	8003f74 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d06d      	beq.n	8004050 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d068      	beq.n	800404c <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f7a:	4b5d      	ldr	r3, [pc, #372]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d105      	bne.n	8003f92 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f86:	4b5a      	ldr	r3, [pc, #360]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0a8      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f96:	4b56      	ldr	r3, [pc, #344]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a55      	ldr	r2, [pc, #340]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8003f9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fa2:	f7fe f8a7 	bl	80020f4 <HAL_GetTick>
 8003fa6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fe f8a3 	bl	80020f4 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e095      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fbc:	4b4c      	ldr	r3, [pc, #304]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fc8:	4b49      	ldr	r3, [pc, #292]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	4b49      	ldr	r3, [pc, #292]	; (80040f4 <HAL_RCC_OscConfig+0x8f0>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fd8:	3a01      	subs	r2, #1
 8003fda:	0112      	lsls	r2, r2, #4
 8003fdc:	4311      	orrs	r1, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fe2:	0212      	lsls	r2, r2, #8
 8003fe4:	4311      	orrs	r1, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fea:	0852      	lsrs	r2, r2, #1
 8003fec:	3a01      	subs	r2, #1
 8003fee:	0552      	lsls	r2, r2, #21
 8003ff0:	4311      	orrs	r1, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ff6:	0852      	lsrs	r2, r2, #1
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	0652      	lsls	r2, r2, #25
 8003ffc:	4311      	orrs	r1, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004002:	06d2      	lsls	r2, r2, #27
 8004004:	430a      	orrs	r2, r1
 8004006:	493a      	ldr	r1, [pc, #232]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8004008:	4313      	orrs	r3, r2
 800400a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800400c:	4b38      	ldr	r3, [pc, #224]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a37      	ldr	r2, [pc, #220]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8004012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004018:	4b35      	ldr	r3, [pc, #212]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 800401e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004022:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004024:	f7fe f866 	bl	80020f4 <HAL_GetTick>
 8004028:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fe f862 	bl	80020f4 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e054      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800404a:	e04c      	b.n	80040e6 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e04b      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004050:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d144      	bne.n	80040e6 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800405c:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8004062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004066:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 800406e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004072:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004074:	f7fe f83e 	bl	80020f4 <HAL_GetTick>
 8004078:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407c:	f7fe f83a 	bl	80020f4 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e02c      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408e:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x878>
 800409a:	e024      	b.n	80040e6 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	2b0c      	cmp	r3, #12
 80040a0:	d01f      	beq.n	80040e2 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 80040a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ae:	f7fe f821 	bl	80020f4 <HAL_GetTick>
 80040b2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b6:	f7fe f81d 	bl	80020f4 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e00f      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f0      	bne.n	80040b6 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	4905      	ldr	r1, [pc, #20]	; (80040f0 <HAL_RCC_OscConfig+0x8ec>)
 80040da:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <HAL_RCC_OscConfig+0x8f4>)
 80040dc:	4013      	ands	r3, r2
 80040de:	60cb      	str	r3, [r1, #12]
 80040e0:	e001      	b.n	80040e6 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3728      	adds	r7, #40	; 0x28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000
 80040f4:	019d800c 	.word	0x019d800c
 80040f8:	feeefffc 	.word	0xfeeefffc

080040fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e11d      	b.n	8004350 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b90      	ldr	r3, [pc, #576]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d910      	bls.n	8004144 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b8d      	ldr	r3, [pc, #564]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 020f 	bic.w	r2, r3, #15
 800412a:	498b      	ldr	r1, [pc, #556]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b89      	ldr	r3, [pc, #548]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e105      	b.n	8004350 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	4b81      	ldr	r3, [pc, #516]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800415c:	429a      	cmp	r2, r3
 800415e:	d908      	bls.n	8004172 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4b7e      	ldr	r3, [pc, #504]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	497b      	ldr	r1, [pc, #492]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d079      	beq.n	8004272 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d11e      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004186:	4b75      	ldr	r3, [pc, #468]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0dc      	b.n	8004350 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004196:	f000 f9cf 	bl	8004538 <RCC_GetSysClockFreqFromPLLSource>
 800419a:	4603      	mov	r3, r0
 800419c:	4a70      	ldr	r2, [pc, #448]	; (8004360 <HAL_RCC_ClockConfig+0x264>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d946      	bls.n	8004230 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80041a2:	4b6e      	ldr	r3, [pc, #440]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d140      	bne.n	8004230 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041ae:	4b6b      	ldr	r3, [pc, #428]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041b6:	4a69      	ldr	r2, [pc, #420]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80041b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e035      	b.n	8004230 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d107      	bne.n	80041dc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041cc:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d115      	bne.n	8004204 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0b9      	b.n	8004350 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041e4:	4b5d      	ldr	r3, [pc, #372]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0ad      	b.n	8004350 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f4:	4b59      	ldr	r3, [pc, #356]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e0a5      	b.n	8004350 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004204:	f000 f8b4 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8004208:	4603      	mov	r3, r0
 800420a:	4a55      	ldr	r2, [pc, #340]	; (8004360 <HAL_RCC_ClockConfig+0x264>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d90f      	bls.n	8004230 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004210:	4b52      	ldr	r3, [pc, #328]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800421c:	4b4f      	ldr	r3, [pc, #316]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004224:	4a4d      	ldr	r2, [pc, #308]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004230:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f023 0203 	bic.w	r2, r3, #3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4947      	ldr	r1, [pc, #284]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004242:	f7fd ff57 	bl	80020f4 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004248:	e00a      	b.n	8004260 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424a:	f7fd ff53 	bl	80020f4 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	; 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e077      	b.n	8004350 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004260:	4b3e      	ldr	r3, [pc, #248]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 020c 	and.w	r2, r3, #12
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	429a      	cmp	r2, r3
 8004270:	d1eb      	bne.n	800424a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b80      	cmp	r3, #128	; 0x80
 8004276:	d105      	bne.n	8004284 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004278:	4b38      	ldr	r3, [pc, #224]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4a37      	ldr	r2, [pc, #220]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 800427e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004282:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	4b31      	ldr	r3, [pc, #196]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429c:	429a      	cmp	r2, r3
 800429e:	d208      	bcs.n	80042b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b2e      	ldr	r3, [pc, #184]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	492b      	ldr	r1, [pc, #172]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b2:	4b29      	ldr	r3, [pc, #164]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d210      	bcs.n	80042e2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c0:	4b25      	ldr	r3, [pc, #148]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f023 020f 	bic.w	r2, r3, #15
 80042c8:	4923      	ldr	r1, [pc, #140]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d0:	4b21      	ldr	r3, [pc, #132]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e036      	b.n	8004350 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d008      	beq.n	8004300 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ee:	4b1b      	ldr	r3, [pc, #108]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	4918      	ldr	r1, [pc, #96]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d009      	beq.n	8004320 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4910      	ldr	r1, [pc, #64]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 800431c:	4313      	orrs	r3, r2
 800431e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004320:	f000 f826 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	091b      	lsrs	r3, r3, #4
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	490c      	ldr	r1, [pc, #48]	; (8004364 <HAL_RCC_ClockConfig+0x268>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
 800433c:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <HAL_RCC_ClockConfig+0x26c>)
 800433e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_RCC_ClockConfig+0x270>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f7fd fe85 	bl	8002054 <HAL_InitTick>
 800434a:	4603      	mov	r3, r0
 800434c:	73fb      	strb	r3, [r7, #15]

  return status;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40022000 	.word	0x40022000
 800435c:	40021000 	.word	0x40021000
 8004360:	04c4b400 	.word	0x04c4b400
 8004364:	08006000 	.word	0x08006000
 8004368:	20000000 	.word	0x20000000
 800436c:	20000004 	.word	0x20000004

08004370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004370:	b480      	push	{r7}
 8004372:	b089      	sub	sp, #36	; 0x24
 8004374:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437e:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004388:	4b3b      	ldr	r3, [pc, #236]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x34>
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b0c      	cmp	r3, #12
 800439c:	d121      	bne.n	80043e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d11e      	bne.n	80043e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043a4:	4b34      	ldr	r3, [pc, #208]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d107      	bne.n	80043c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043b0:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e005      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043c0:	4b2d      	ldr	r3, [pc, #180]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043cc:	4a2b      	ldr	r2, [pc, #172]	; (800447c <HAL_RCC_GetSysClockFreq+0x10c>)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d102      	bne.n	80043ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043e8:	4b25      	ldr	r3, [pc, #148]	; (8004480 <HAL_RCC_GetSysClockFreq+0x110>)
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	e004      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043f4:	4b22      	ldr	r3, [pc, #136]	; (8004480 <HAL_RCC_GetSysClockFreq+0x110>)
 80043f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d134      	bne.n	8004468 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043fe:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d003      	beq.n	8004416 <HAL_RCC_GetSysClockFreq+0xa6>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d003      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0xac>
 8004414:	e005      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004416:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <HAL_RCC_GetSysClockFreq+0x110>)
 8004418:	617b      	str	r3, [r7, #20]
      break;
 800441a:	e005      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800441c:	4b18      	ldr	r3, [pc, #96]	; (8004480 <HAL_RCC_GetSysClockFreq+0x110>)
 800441e:	617b      	str	r3, [r7, #20]
      break;
 8004420:	e002      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	617b      	str	r3, [r7, #20]
      break;
 8004426:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004428:	4b13      	ldr	r3, [pc, #76]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	091b      	lsrs	r3, r3, #4
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	3301      	adds	r3, #1
 8004434:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	fb03 f202 	mul.w	r2, r3, r2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800444e:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	0e5b      	lsrs	r3, r3, #25
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	3301      	adds	r3, #1
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004468:	69bb      	ldr	r3, [r7, #24]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3724      	adds	r7, #36	; 0x24
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000
 800447c:	08006010 	.word	0x08006010
 8004480:	00f42400 	.word	0x00f42400

08004484 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004490:	4b27      	ldr	r3, [pc, #156]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800449c:	f7ff f8ee 	bl	800367c <HAL_PWREx_GetVoltageRange>
 80044a0:	6178      	str	r0, [r7, #20]
 80044a2:	e014      	b.n	80044ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b22      	ldr	r3, [pc, #136]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	4a21      	ldr	r2, [pc, #132]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	6593      	str	r3, [r2, #88]	; 0x58
 80044b0:	4b1f      	ldr	r3, [pc, #124]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044bc:	f7ff f8de 	bl	800367c <HAL_PWREx_GetVoltageRange>
 80044c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044c2:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	4a1a      	ldr	r2, [pc, #104]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d4:	d10b      	bne.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b80      	cmp	r3, #128	; 0x80
 80044da:	d913      	bls.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2ba0      	cmp	r3, #160	; 0xa0
 80044e0:	d902      	bls.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044e2:	2302      	movs	r3, #2
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	e00d      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044e8:	2301      	movs	r3, #1
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	e00a      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b7f      	cmp	r3, #127	; 0x7f
 80044f2:	d902      	bls.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80044f4:	2302      	movs	r3, #2
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e004      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b70      	cmp	r3, #112	; 0x70
 80044fe:	d101      	bne.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004500:	2301      	movs	r3, #1
 8004502:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 020f 	bic.w	r2, r3, #15
 800450c:	4909      	ldr	r1, [pc, #36]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004514:	4b07      	ldr	r3, [pc, #28]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	429a      	cmp	r2, r3
 8004520:	d001      	beq.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	40022000 	.word	0x40022000

08004538 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800453e:	4b2d      	ldr	r3, [pc, #180]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d00b      	beq.n	8004566 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d825      	bhi.n	80045a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d008      	beq.n	800456c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d11f      	bne.n	80045a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004562:	613b      	str	r3, [r7, #16]
    break;
 8004564:	e01f      	b.n	80045a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004566:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004568:	613b      	str	r3, [r7, #16]
    break;
 800456a:	e01c      	b.n	80045a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800456c:	4b21      	ldr	r3, [pc, #132]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d107      	bne.n	8004588 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004578:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800457a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e005      	b.n	8004594 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004594:	4a19      	ldr	r2, [pc, #100]	; (80045fc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459c:	613b      	str	r3, [r7, #16]
    break;
 800459e:	e002      	b.n	80045a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
    break;
 80045a4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045a6:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	3301      	adds	r3, #1
 80045b2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	0a1b      	lsrs	r3, r3, #8
 80045ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	fb03 f202 	mul.w	r2, r3, r2
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045cc:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0e5b      	lsrs	r3, r3, #25
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	3301      	adds	r3, #1
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80045e6:	683b      	ldr	r3, [r7, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40021000 	.word	0x40021000
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	08006010 	.word	0x08006010

08004600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004608:	2300      	movs	r3, #0
 800460a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800460c:	2300      	movs	r3, #0
 800460e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004618:	2b00      	cmp	r3, #0
 800461a:	d040      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004620:	2b80      	cmp	r3, #128	; 0x80
 8004622:	d02a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004624:	2b80      	cmp	r3, #128	; 0x80
 8004626:	d825      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004628:	2b60      	cmp	r3, #96	; 0x60
 800462a:	d026      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800462c:	2b60      	cmp	r3, #96	; 0x60
 800462e:	d821      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d006      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d81d      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800463c:	2b20      	cmp	r3, #32
 800463e:	d010      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004640:	e018      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004642:	4b89      	ldr	r3, [pc, #548]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	4a88      	ldr	r2, [pc, #544]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800464e:	e015      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	2100      	movs	r1, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fb3e 	bl	8004cd8 <RCCEx_PLLSAI1_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004660:	e00c      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3320      	adds	r3, #32
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fc29 	bl	8004ec0 <RCCEx_PLLSAI2_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004672:	e003      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	74fb      	strb	r3, [r7, #19]
      break;
 8004678:	e000      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800467a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800467c:	7cfb      	ldrb	r3, [r7, #19]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10b      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004682:	4b79      	ldr	r3, [pc, #484]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004688:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004690:	4975      	ldr	r1, [pc, #468]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004698:	e001      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d047      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b2:	d030      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b8:	d82a      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046be:	d02a      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80046c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c4:	d824      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ca:	d008      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80046cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d0:	d81e      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xec>
 80046d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046da:	d010      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046dc:	e018      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046de:	4b62      	ldr	r3, [pc, #392]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4a61      	ldr	r2, [pc, #388]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ea:	e015      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 faf0 	bl	8004cd8 <RCCEx_PLLSAI1_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046fc:	e00c      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3320      	adds	r3, #32
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fbdb 	bl	8004ec0 <RCCEx_PLLSAI2_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800470e:	e003      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	74fb      	strb	r3, [r7, #19]
      break;
 8004714:	e000      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800471e:	4b52      	ldr	r3, [pc, #328]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	494e      	ldr	r1, [pc, #312]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004734:	e001      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 809f 	beq.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004748:	2300      	movs	r3, #0
 800474a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800474c:	4b46      	ldr	r3, [pc, #280]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	4b41      	ldr	r3, [pc, #260]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004766:	4a40      	ldr	r2, [pc, #256]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476c:	6593      	str	r3, [r2, #88]	; 0x58
 800476e:	4b3e      	ldr	r3, [pc, #248]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477a:	2301      	movs	r3, #1
 800477c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800477e:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a3a      	ldr	r2, [pc, #232]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004788:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800478a:	f7fd fcb3 	bl	80020f4 <HAL_GetTick>
 800478e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004790:	e009      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004792:	f7fd fcaf 	bl	80020f4 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d902      	bls.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	74fb      	strb	r3, [r7, #19]
        break;
 80047a4:	e005      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047a6:	4b31      	ldr	r3, [pc, #196]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0ef      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d15b      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047b8:	4b2b      	ldr	r3, [pc, #172]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01f      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d019      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047d6:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047e2:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e8:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	4a1b      	ldr	r2, [pc, #108]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004802:	4a19      	ldr	r2, [pc, #100]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d016      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fd fc6e 	bl	80020f4 <HAL_GetTick>
 8004818:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481a:	e00b      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481c:	f7fd fc6a 	bl	80020f4 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d902      	bls.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	74fb      	strb	r3, [r7, #19]
            break;
 8004832:	e006      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0ec      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10c      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004858:	4903      	ldr	r1, [pc, #12]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004860:	e008      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004862:	7cfb      	ldrb	r3, [r7, #19]
 8004864:	74bb      	strb	r3, [r7, #18]
 8004866:	e005      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004868:	40021000 	.word	0x40021000
 800486c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004874:	7c7b      	ldrb	r3, [r7, #17]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d105      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487a:	4ba0      	ldr	r3, [pc, #640]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487e:	4a9f      	ldr	r2, [pc, #636]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004884:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004892:	4b9a      	ldr	r3, [pc, #616]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004898:	f023 0203 	bic.w	r2, r3, #3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	4996      	ldr	r1, [pc, #600]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b4:	4b91      	ldr	r3, [pc, #580]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ba:	f023 020c 	bic.w	r2, r3, #12
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	498e      	ldr	r1, [pc, #568]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048d6:	4b89      	ldr	r3, [pc, #548]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	4985      	ldr	r1, [pc, #532]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048f8:	4b80      	ldr	r3, [pc, #512]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004906:	497d      	ldr	r1, [pc, #500]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800491a:	4b78      	ldr	r3, [pc, #480]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004928:	4974      	ldr	r1, [pc, #464]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800493c:	4b6f      	ldr	r3, [pc, #444]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494a:	496c      	ldr	r1, [pc, #432]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800495e:	4b67      	ldr	r3, [pc, #412]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800496c:	4963      	ldr	r1, [pc, #396]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004980:	4b5e      	ldr	r3, [pc, #376]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800498e:	495b      	ldr	r1, [pc, #364]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049a2:	4b56      	ldr	r3, [pc, #344]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	4952      	ldr	r1, [pc, #328]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049c4:	4b4d      	ldr	r3, [pc, #308]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d2:	494a      	ldr	r1, [pc, #296]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049e6:	4b45      	ldr	r3, [pc, #276]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	4941      	ldr	r1, [pc, #260]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a08:	4b3c      	ldr	r3, [pc, #240]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a0e:	f023 0203 	bic.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a16:	4939      	ldr	r1, [pc, #228]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d028      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a2a:	4b34      	ldr	r3, [pc, #208]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a38:	4930      	ldr	r1, [pc, #192]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a4a:	4b2c      	ldr	r3, [pc, #176]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	4a2b      	ldr	r2, [pc, #172]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a54:	60d3      	str	r3, [r2, #12]
 8004a56:	e011      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	2101      	movs	r1, #1
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 f935 	bl	8004cd8 <RCCEx_PLLSAI1_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a72:	7cfb      	ldrb	r3, [r7, #19]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d04d      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a90:	d108      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004a92:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a98:	4a18      	ldr	r2, [pc, #96]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004aa2:	e012      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004aa4:	4b15      	ldr	r3, [pc, #84]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aaa:	4a14      	ldr	r2, [pc, #80]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ab4:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ac2:	490e      	ldr	r1, [pc, #56]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad2:	d106      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad4:	4b09      	ldr	r3, [pc, #36]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4a08      	ldr	r2, [pc, #32]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ade:	60d3      	str	r3, [r2, #12]
 8004ae0:	e020      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aea:	d109      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a02      	ldr	r2, [pc, #8]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af6:	60d3      	str	r3, [r2, #12]
 8004af8:	e014      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f8e1 	bl	8004cd8 <RCCEx_PLLSAI1_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1a:	7cfb      	ldrb	r3, [r7, #19]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d028      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b30:	4b68      	ldr	r3, [pc, #416]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b3e:	4965      	ldr	r1, [pc, #404]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b50:	4b60      	ldr	r3, [pc, #384]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4a5f      	ldr	r2, [pc, #380]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5a:	60d3      	str	r3, [r2, #12]
 8004b5c:	e011      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b66:	d10c      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f8b2 	bl	8004cd8 <RCCEx_PLLSAI1_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004b7e:	7cfb      	ldrb	r3, [r7, #19]
 8004b80:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01e      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b8e:	4b51      	ldr	r3, [pc, #324]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9e:	494d      	ldr	r1, [pc, #308]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 f88d 	bl	8004cd8 <RCCEx_PLLSAI1_Config>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bc2:	7cfb      	ldrb	r3, [r7, #19]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004bc8:	7cfb      	ldrb	r3, [r7, #19]
 8004bca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00b      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bd8:	4b3e      	ldr	r3, [pc, #248]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bde:	f023 0204 	bic.w	r2, r3, #4
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be8:	493a      	ldr	r1, [pc, #232]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004bfc:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c02:	f023 0218 	bic.w	r2, r3, #24
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	4931      	ldr	r1, [pc, #196]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d035      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c20:	4b2c      	ldr	r3, [pc, #176]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2b      	ldr	r2, [pc, #172]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2c:	f7fd fa62 	bl	80020f4 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c32:	e009      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c34:	f7fd fa5e 	bl	80020f4 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d902      	bls.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	74fb      	strb	r3, [r7, #19]
        break;
 8004c46:	e005      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c48:	4b22      	ldr	r3, [pc, #136]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ef      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d113      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004c5a:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c6a:	491a      	ldr	r1, [pc, #104]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3320      	adds	r3, #32
 8004c76:	2102      	movs	r1, #2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f921 	bl	8004ec0 <RCCEx_PLLSAI2_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004c82:	7cfb      	ldrb	r3, [r7, #19]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d017      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c98:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	490a      	ldr	r1, [pc, #40]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cbc:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a04      	ldr	r2, [pc, #16]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cc8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40021000 	.word	0x40021000

08004cd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ce6:	4b72      	ldr	r3, [pc, #456]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00e      	beq.n	8004d10 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cf2:	4b6f      	ldr	r3, [pc, #444]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0203 	and.w	r2, r3, #3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d103      	bne.n	8004d0a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
       ||
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d142      	bne.n	8004d90 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
 8004d0e:	e03f      	b.n	8004d90 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d018      	beq.n	8004d4a <RCCEx_PLLSAI1_Config+0x72>
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d825      	bhi.n	8004d68 <RCCEx_PLLSAI1_Config+0x90>
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d002      	beq.n	8004d26 <RCCEx_PLLSAI1_Config+0x4e>
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d009      	beq.n	8004d38 <RCCEx_PLLSAI1_Config+0x60>
 8004d24:	e020      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d26:	4b62      	ldr	r3, [pc, #392]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d11d      	bne.n	8004d6e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d36:	e01a      	b.n	8004d6e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d38:	4b5d      	ldr	r3, [pc, #372]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d116      	bne.n	8004d72 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d48:	e013      	b.n	8004d72 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d4a:	4b59      	ldr	r3, [pc, #356]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10f      	bne.n	8004d76 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d56:	4b56      	ldr	r3, [pc, #344]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d66:	e006      	b.n	8004d76 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d6c:	e004      	b.n	8004d78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e002      	b.n	8004d78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d76:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d108      	bne.n	8004d90 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004d7e:	4b4c      	ldr	r3, [pc, #304]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f023 0203 	bic.w	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4949      	ldr	r1, [pc, #292]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 8086 	bne.w	8004ea4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d98:	4b45      	ldr	r3, [pc, #276]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a44      	ldr	r2, [pc, #272]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da4:	f7fd f9a6 	bl	80020f4 <HAL_GetTick>
 8004da8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004daa:	e009      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dac:	f7fd f9a2 	bl	80020f4 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d902      	bls.n	8004dc0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	73fb      	strb	r3, [r7, #15]
        break;
 8004dbe:	e005      	b.n	8004dcc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dc0:	4b3b      	ldr	r3, [pc, #236]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1ef      	bne.n	8004dac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d168      	bne.n	8004ea4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d113      	bne.n	8004e00 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dd8:	4b35      	ldr	r3, [pc, #212]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	4b35      	ldr	r3, [pc, #212]	; (8004eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6892      	ldr	r2, [r2, #8]
 8004de4:	0211      	lsls	r1, r2, #8
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68d2      	ldr	r2, [r2, #12]
 8004dea:	06d2      	lsls	r2, r2, #27
 8004dec:	4311      	orrs	r1, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6852      	ldr	r2, [r2, #4]
 8004df2:	3a01      	subs	r2, #1
 8004df4:	0112      	lsls	r2, r2, #4
 8004df6:	430a      	orrs	r2, r1
 8004df8:	492d      	ldr	r1, [pc, #180]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	610b      	str	r3, [r1, #16]
 8004dfe:	e02d      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d115      	bne.n	8004e32 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e06:	4b2a      	ldr	r3, [pc, #168]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6892      	ldr	r2, [r2, #8]
 8004e12:	0211      	lsls	r1, r2, #8
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6912      	ldr	r2, [r2, #16]
 8004e18:	0852      	lsrs	r2, r2, #1
 8004e1a:	3a01      	subs	r2, #1
 8004e1c:	0552      	lsls	r2, r2, #21
 8004e1e:	4311      	orrs	r1, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6852      	ldr	r2, [r2, #4]
 8004e24:	3a01      	subs	r2, #1
 8004e26:	0112      	lsls	r2, r2, #4
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	4921      	ldr	r1, [pc, #132]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	610b      	str	r3, [r1, #16]
 8004e30:	e014      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e32:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	4b21      	ldr	r3, [pc, #132]	; (8004ebc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6892      	ldr	r2, [r2, #8]
 8004e3e:	0211      	lsls	r1, r2, #8
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6952      	ldr	r2, [r2, #20]
 8004e44:	0852      	lsrs	r2, r2, #1
 8004e46:	3a01      	subs	r2, #1
 8004e48:	0652      	lsls	r2, r2, #25
 8004e4a:	4311      	orrs	r1, r2
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6852      	ldr	r2, [r2, #4]
 8004e50:	3a01      	subs	r2, #1
 8004e52:	0112      	lsls	r2, r2, #4
 8004e54:	430a      	orrs	r2, r1
 8004e56:	4916      	ldr	r1, [pc, #88]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fd f944 	bl	80020f4 <HAL_GetTick>
 8004e6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e6e:	e009      	b.n	8004e84 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e70:	f7fd f940 	bl	80020f4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d902      	bls.n	8004e84 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	73fb      	strb	r3, [r7, #15]
          break;
 8004e82:	e005      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ef      	beq.n	8004e70 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	4904      	ldr	r1, [pc, #16]	; (8004eb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	07ff800f 	.word	0x07ff800f
 8004eb8:	ff9f800f 	.word	0xff9f800f
 8004ebc:	f9ff800f 	.word	0xf9ff800f

08004ec0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ece:	4b72      	ldr	r3, [pc, #456]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00e      	beq.n	8004ef8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004eda:	4b6f      	ldr	r3, [pc, #444]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0203 	and.w	r2, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d103      	bne.n	8004ef2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
       ||
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d142      	bne.n	8004f78 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	e03f      	b.n	8004f78 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d018      	beq.n	8004f32 <RCCEx_PLLSAI2_Config+0x72>
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d825      	bhi.n	8004f50 <RCCEx_PLLSAI2_Config+0x90>
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d002      	beq.n	8004f0e <RCCEx_PLLSAI2_Config+0x4e>
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d009      	beq.n	8004f20 <RCCEx_PLLSAI2_Config+0x60>
 8004f0c:	e020      	b.n	8004f50 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f0e:	4b62      	ldr	r3, [pc, #392]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11d      	bne.n	8004f56 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1e:	e01a      	b.n	8004f56 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f20:	4b5d      	ldr	r3, [pc, #372]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d116      	bne.n	8004f5a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f30:	e013      	b.n	8004f5a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f32:	4b59      	ldr	r3, [pc, #356]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10f      	bne.n	8004f5e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f3e:	4b56      	ldr	r3, [pc, #344]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f4e:	e006      	b.n	8004f5e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
      break;
 8004f54:	e004      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f56:	bf00      	nop
 8004f58:	e002      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e000      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004f66:	4b4c      	ldr	r3, [pc, #304]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f023 0203 	bic.w	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4949      	ldr	r1, [pc, #292]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 8086 	bne.w	800508c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f80:	4b45      	ldr	r3, [pc, #276]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a44      	ldr	r2, [pc, #272]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8c:	f7fd f8b2 	bl	80020f4 <HAL_GetTick>
 8004f90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f92:	e009      	b.n	8004fa8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f94:	f7fd f8ae 	bl	80020f4 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d902      	bls.n	8004fa8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fa6:	e005      	b.n	8004fb4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1ef      	bne.n	8004f94 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d168      	bne.n	800508c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d113      	bne.n	8004fe8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fc0:	4b35      	ldr	r3, [pc, #212]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	4b35      	ldr	r3, [pc, #212]	; (800509c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6892      	ldr	r2, [r2, #8]
 8004fcc:	0211      	lsls	r1, r2, #8
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68d2      	ldr	r2, [r2, #12]
 8004fd2:	06d2      	lsls	r2, r2, #27
 8004fd4:	4311      	orrs	r1, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6852      	ldr	r2, [r2, #4]
 8004fda:	3a01      	subs	r2, #1
 8004fdc:	0112      	lsls	r2, r2, #4
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	492d      	ldr	r1, [pc, #180]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	614b      	str	r3, [r1, #20]
 8004fe6:	e02d      	b.n	8005044 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d115      	bne.n	800501a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fee:	4b2a      	ldr	r3, [pc, #168]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	4b2b      	ldr	r3, [pc, #172]	; (80050a0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6892      	ldr	r2, [r2, #8]
 8004ffa:	0211      	lsls	r1, r2, #8
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6912      	ldr	r2, [r2, #16]
 8005000:	0852      	lsrs	r2, r2, #1
 8005002:	3a01      	subs	r2, #1
 8005004:	0552      	lsls	r2, r2, #21
 8005006:	4311      	orrs	r1, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6852      	ldr	r2, [r2, #4]
 800500c:	3a01      	subs	r2, #1
 800500e:	0112      	lsls	r2, r2, #4
 8005010:	430a      	orrs	r2, r1
 8005012:	4921      	ldr	r1, [pc, #132]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005014:	4313      	orrs	r3, r2
 8005016:	614b      	str	r3, [r1, #20]
 8005018:	e014      	b.n	8005044 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800501a:	4b1f      	ldr	r3, [pc, #124]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800501c:	695a      	ldr	r2, [r3, #20]
 800501e:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005020:	4013      	ands	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6892      	ldr	r2, [r2, #8]
 8005026:	0211      	lsls	r1, r2, #8
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6952      	ldr	r2, [r2, #20]
 800502c:	0852      	lsrs	r2, r2, #1
 800502e:	3a01      	subs	r2, #1
 8005030:	0652      	lsls	r2, r2, #25
 8005032:	4311      	orrs	r1, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6852      	ldr	r2, [r2, #4]
 8005038:	3a01      	subs	r2, #1
 800503a:	0112      	lsls	r2, r2, #4
 800503c:	430a      	orrs	r2, r1
 800503e:	4916      	ldr	r1, [pc, #88]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005040:	4313      	orrs	r3, r2
 8005042:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005044:	4b14      	ldr	r3, [pc, #80]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a13      	ldr	r2, [pc, #76]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800504a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005050:	f7fd f850 	bl	80020f4 <HAL_GetTick>
 8005054:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005056:	e009      	b.n	800506c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005058:	f7fd f84c 	bl	80020f4 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d902      	bls.n	800506c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	73fb      	strb	r3, [r7, #15]
          break;
 800506a:	e005      	b.n	8005078 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0ef      	beq.n	8005058 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	4904      	ldr	r1, [pc, #16]	; (8005098 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000
 800509c:	07ff800f 	.word	0x07ff800f
 80050a0:	ff9f800f 	.word	0xff9f800f
 80050a4:	f9ff800f 	.word	0xf9ff800f

080050a8 <pow>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	ed2d 8b02 	vpush	{d8}
 80050ae:	eeb0 8a40 	vmov.f32	s16, s0
 80050b2:	eef0 8a60 	vmov.f32	s17, s1
 80050b6:	ec55 4b11 	vmov	r4, r5, d1
 80050ba:	f000 f8b1 	bl	8005220 <__ieee754_pow>
 80050be:	4622      	mov	r2, r4
 80050c0:	462b      	mov	r3, r5
 80050c2:	4620      	mov	r0, r4
 80050c4:	4629      	mov	r1, r5
 80050c6:	ec57 6b10 	vmov	r6, r7, d0
 80050ca:	f7fb fcef 	bl	8000aac <__aeabi_dcmpun>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d13b      	bne.n	800514a <pow+0xa2>
 80050d2:	ec51 0b18 	vmov	r0, r1, d8
 80050d6:	2200      	movs	r2, #0
 80050d8:	2300      	movs	r3, #0
 80050da:	f7fb fcb5 	bl	8000a48 <__aeabi_dcmpeq>
 80050de:	b1b8      	cbz	r0, 8005110 <pow+0x68>
 80050e0:	2200      	movs	r2, #0
 80050e2:	2300      	movs	r3, #0
 80050e4:	4620      	mov	r0, r4
 80050e6:	4629      	mov	r1, r5
 80050e8:	f7fb fcae 	bl	8000a48 <__aeabi_dcmpeq>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d146      	bne.n	800517e <pow+0xd6>
 80050f0:	ec45 4b10 	vmov	d0, r4, r5
 80050f4:	f000 feb0 	bl	8005e58 <finite>
 80050f8:	b338      	cbz	r0, 800514a <pow+0xa2>
 80050fa:	2200      	movs	r2, #0
 80050fc:	2300      	movs	r3, #0
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	f7fb fcab 	bl	8000a5c <__aeabi_dcmplt>
 8005106:	b300      	cbz	r0, 800514a <pow+0xa2>
 8005108:	f000 ff38 	bl	8005f7c <__errno>
 800510c:	2322      	movs	r3, #34	; 0x22
 800510e:	e01b      	b.n	8005148 <pow+0xa0>
 8005110:	ec47 6b10 	vmov	d0, r6, r7
 8005114:	f000 fea0 	bl	8005e58 <finite>
 8005118:	b9e0      	cbnz	r0, 8005154 <pow+0xac>
 800511a:	eeb0 0a48 	vmov.f32	s0, s16
 800511e:	eef0 0a68 	vmov.f32	s1, s17
 8005122:	f000 fe99 	bl	8005e58 <finite>
 8005126:	b1a8      	cbz	r0, 8005154 <pow+0xac>
 8005128:	ec45 4b10 	vmov	d0, r4, r5
 800512c:	f000 fe94 	bl	8005e58 <finite>
 8005130:	b180      	cbz	r0, 8005154 <pow+0xac>
 8005132:	4632      	mov	r2, r6
 8005134:	463b      	mov	r3, r7
 8005136:	4630      	mov	r0, r6
 8005138:	4639      	mov	r1, r7
 800513a:	f7fb fcb7 	bl	8000aac <__aeabi_dcmpun>
 800513e:	2800      	cmp	r0, #0
 8005140:	d0e2      	beq.n	8005108 <pow+0x60>
 8005142:	f000 ff1b 	bl	8005f7c <__errno>
 8005146:	2321      	movs	r3, #33	; 0x21
 8005148:	6003      	str	r3, [r0, #0]
 800514a:	ecbd 8b02 	vpop	{d8}
 800514e:	ec47 6b10 	vmov	d0, r6, r7
 8005152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005154:	2200      	movs	r2, #0
 8005156:	2300      	movs	r3, #0
 8005158:	4630      	mov	r0, r6
 800515a:	4639      	mov	r1, r7
 800515c:	f7fb fc74 	bl	8000a48 <__aeabi_dcmpeq>
 8005160:	2800      	cmp	r0, #0
 8005162:	d0f2      	beq.n	800514a <pow+0xa2>
 8005164:	eeb0 0a48 	vmov.f32	s0, s16
 8005168:	eef0 0a68 	vmov.f32	s1, s17
 800516c:	f000 fe74 	bl	8005e58 <finite>
 8005170:	2800      	cmp	r0, #0
 8005172:	d0ea      	beq.n	800514a <pow+0xa2>
 8005174:	ec45 4b10 	vmov	d0, r4, r5
 8005178:	f000 fe6e 	bl	8005e58 <finite>
 800517c:	e7c3      	b.n	8005106 <pow+0x5e>
 800517e:	4f01      	ldr	r7, [pc, #4]	; (8005184 <pow+0xdc>)
 8005180:	2600      	movs	r6, #0
 8005182:	e7e2      	b.n	800514a <pow+0xa2>
 8005184:	3ff00000 	.word	0x3ff00000

08005188 <sqrt>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	ed2d 8b02 	vpush	{d8}
 800518e:	ec55 4b10 	vmov	r4, r5, d0
 8005192:	f000 fd73 	bl	8005c7c <__ieee754_sqrt>
 8005196:	4622      	mov	r2, r4
 8005198:	462b      	mov	r3, r5
 800519a:	4620      	mov	r0, r4
 800519c:	4629      	mov	r1, r5
 800519e:	eeb0 8a40 	vmov.f32	s16, s0
 80051a2:	eef0 8a60 	vmov.f32	s17, s1
 80051a6:	f7fb fc81 	bl	8000aac <__aeabi_dcmpun>
 80051aa:	b990      	cbnz	r0, 80051d2 <sqrt+0x4a>
 80051ac:	2200      	movs	r2, #0
 80051ae:	2300      	movs	r3, #0
 80051b0:	4620      	mov	r0, r4
 80051b2:	4629      	mov	r1, r5
 80051b4:	f7fb fc52 	bl	8000a5c <__aeabi_dcmplt>
 80051b8:	b158      	cbz	r0, 80051d2 <sqrt+0x4a>
 80051ba:	f000 fedf 	bl	8005f7c <__errno>
 80051be:	2321      	movs	r3, #33	; 0x21
 80051c0:	6003      	str	r3, [r0, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	2300      	movs	r3, #0
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	f7fb faff 	bl	80007cc <__aeabi_ddiv>
 80051ce:	ec41 0b18 	vmov	d8, r0, r1
 80051d2:	eeb0 0a48 	vmov.f32	s0, s16
 80051d6:	eef0 0a68 	vmov.f32	s1, s17
 80051da:	ecbd 8b02 	vpop	{d8}
 80051de:	bd38      	pop	{r3, r4, r5, pc}

080051e0 <sqrtf>:
 80051e0:	b508      	push	{r3, lr}
 80051e2:	ed2d 8b02 	vpush	{d8}
 80051e6:	eeb0 8a40 	vmov.f32	s16, s0
 80051ea:	f000 fdf9 	bl	8005de0 <__ieee754_sqrtf>
 80051ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80051f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f6:	d60c      	bvs.n	8005212 <sqrtf+0x32>
 80051f8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8005218 <sqrtf+0x38>
 80051fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	d505      	bpl.n	8005212 <sqrtf+0x32>
 8005206:	f000 feb9 	bl	8005f7c <__errno>
 800520a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800520e:	2321      	movs	r3, #33	; 0x21
 8005210:	6003      	str	r3, [r0, #0]
 8005212:	ecbd 8b02 	vpop	{d8}
 8005216:	bd08      	pop	{r3, pc}
	...

08005220 <__ieee754_pow>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	ed2d 8b06 	vpush	{d8-d10}
 8005228:	b089      	sub	sp, #36	; 0x24
 800522a:	ed8d 1b00 	vstr	d1, [sp]
 800522e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005232:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005236:	ea58 0102 	orrs.w	r1, r8, r2
 800523a:	ec57 6b10 	vmov	r6, r7, d0
 800523e:	d115      	bne.n	800526c <__ieee754_pow+0x4c>
 8005240:	19b3      	adds	r3, r6, r6
 8005242:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005246:	4152      	adcs	r2, r2
 8005248:	4299      	cmp	r1, r3
 800524a:	4b89      	ldr	r3, [pc, #548]	; (8005470 <__ieee754_pow+0x250>)
 800524c:	4193      	sbcs	r3, r2
 800524e:	f080 84d2 	bcs.w	8005bf6 <__ieee754_pow+0x9d6>
 8005252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005256:	4630      	mov	r0, r6
 8005258:	4639      	mov	r1, r7
 800525a:	f7fa ffd7 	bl	800020c <__adddf3>
 800525e:	ec41 0b10 	vmov	d0, r0, r1
 8005262:	b009      	add	sp, #36	; 0x24
 8005264:	ecbd 8b06 	vpop	{d8-d10}
 8005268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526c:	4b81      	ldr	r3, [pc, #516]	; (8005474 <__ieee754_pow+0x254>)
 800526e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005272:	429c      	cmp	r4, r3
 8005274:	ee10 aa10 	vmov	sl, s0
 8005278:	463d      	mov	r5, r7
 800527a:	dc06      	bgt.n	800528a <__ieee754_pow+0x6a>
 800527c:	d101      	bne.n	8005282 <__ieee754_pow+0x62>
 800527e:	2e00      	cmp	r6, #0
 8005280:	d1e7      	bne.n	8005252 <__ieee754_pow+0x32>
 8005282:	4598      	cmp	r8, r3
 8005284:	dc01      	bgt.n	800528a <__ieee754_pow+0x6a>
 8005286:	d10f      	bne.n	80052a8 <__ieee754_pow+0x88>
 8005288:	b172      	cbz	r2, 80052a8 <__ieee754_pow+0x88>
 800528a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800528e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005292:	ea55 050a 	orrs.w	r5, r5, sl
 8005296:	d1dc      	bne.n	8005252 <__ieee754_pow+0x32>
 8005298:	e9dd 3200 	ldrd	r3, r2, [sp]
 800529c:	18db      	adds	r3, r3, r3
 800529e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80052a2:	4152      	adcs	r2, r2
 80052a4:	429d      	cmp	r5, r3
 80052a6:	e7d0      	b.n	800524a <__ieee754_pow+0x2a>
 80052a8:	2d00      	cmp	r5, #0
 80052aa:	da3b      	bge.n	8005324 <__ieee754_pow+0x104>
 80052ac:	4b72      	ldr	r3, [pc, #456]	; (8005478 <__ieee754_pow+0x258>)
 80052ae:	4598      	cmp	r8, r3
 80052b0:	dc51      	bgt.n	8005356 <__ieee754_pow+0x136>
 80052b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80052b6:	4598      	cmp	r8, r3
 80052b8:	f340 84ac 	ble.w	8005c14 <__ieee754_pow+0x9f4>
 80052bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80052c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80052c4:	2b14      	cmp	r3, #20
 80052c6:	dd0f      	ble.n	80052e8 <__ieee754_pow+0xc8>
 80052c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80052cc:	fa22 f103 	lsr.w	r1, r2, r3
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	4293      	cmp	r3, r2
 80052d6:	f040 849d 	bne.w	8005c14 <__ieee754_pow+0x9f4>
 80052da:	f001 0101 	and.w	r1, r1, #1
 80052de:	f1c1 0302 	rsb	r3, r1, #2
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	b182      	cbz	r2, 8005308 <__ieee754_pow+0xe8>
 80052e6:	e05f      	b.n	80053a8 <__ieee754_pow+0x188>
 80052e8:	2a00      	cmp	r2, #0
 80052ea:	d15b      	bne.n	80053a4 <__ieee754_pow+0x184>
 80052ec:	f1c3 0314 	rsb	r3, r3, #20
 80052f0:	fa48 f103 	asr.w	r1, r8, r3
 80052f4:	fa01 f303 	lsl.w	r3, r1, r3
 80052f8:	4543      	cmp	r3, r8
 80052fa:	f040 8488 	bne.w	8005c0e <__ieee754_pow+0x9ee>
 80052fe:	f001 0101 	and.w	r1, r1, #1
 8005302:	f1c1 0302 	rsb	r3, r1, #2
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	4b5c      	ldr	r3, [pc, #368]	; (800547c <__ieee754_pow+0x25c>)
 800530a:	4598      	cmp	r8, r3
 800530c:	d132      	bne.n	8005374 <__ieee754_pow+0x154>
 800530e:	f1b9 0f00 	cmp.w	r9, #0
 8005312:	f280 8478 	bge.w	8005c06 <__ieee754_pow+0x9e6>
 8005316:	4959      	ldr	r1, [pc, #356]	; (800547c <__ieee754_pow+0x25c>)
 8005318:	4632      	mov	r2, r6
 800531a:	463b      	mov	r3, r7
 800531c:	2000      	movs	r0, #0
 800531e:	f7fb fa55 	bl	80007cc <__aeabi_ddiv>
 8005322:	e79c      	b.n	800525e <__ieee754_pow+0x3e>
 8005324:	2300      	movs	r3, #0
 8005326:	9304      	str	r3, [sp, #16]
 8005328:	2a00      	cmp	r2, #0
 800532a:	d13d      	bne.n	80053a8 <__ieee754_pow+0x188>
 800532c:	4b51      	ldr	r3, [pc, #324]	; (8005474 <__ieee754_pow+0x254>)
 800532e:	4598      	cmp	r8, r3
 8005330:	d1ea      	bne.n	8005308 <__ieee754_pow+0xe8>
 8005332:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005336:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800533a:	ea53 030a 	orrs.w	r3, r3, sl
 800533e:	f000 845a 	beq.w	8005bf6 <__ieee754_pow+0x9d6>
 8005342:	4b4f      	ldr	r3, [pc, #316]	; (8005480 <__ieee754_pow+0x260>)
 8005344:	429c      	cmp	r4, r3
 8005346:	dd08      	ble.n	800535a <__ieee754_pow+0x13a>
 8005348:	f1b9 0f00 	cmp.w	r9, #0
 800534c:	f2c0 8457 	blt.w	8005bfe <__ieee754_pow+0x9de>
 8005350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005354:	e783      	b.n	800525e <__ieee754_pow+0x3e>
 8005356:	2302      	movs	r3, #2
 8005358:	e7e5      	b.n	8005326 <__ieee754_pow+0x106>
 800535a:	f1b9 0f00 	cmp.w	r9, #0
 800535e:	f04f 0000 	mov.w	r0, #0
 8005362:	f04f 0100 	mov.w	r1, #0
 8005366:	f6bf af7a 	bge.w	800525e <__ieee754_pow+0x3e>
 800536a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800536e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005372:	e774      	b.n	800525e <__ieee754_pow+0x3e>
 8005374:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005378:	d106      	bne.n	8005388 <__ieee754_pow+0x168>
 800537a:	4632      	mov	r2, r6
 800537c:	463b      	mov	r3, r7
 800537e:	4630      	mov	r0, r6
 8005380:	4639      	mov	r1, r7
 8005382:	f7fb f8f9 	bl	8000578 <__aeabi_dmul>
 8005386:	e76a      	b.n	800525e <__ieee754_pow+0x3e>
 8005388:	4b3e      	ldr	r3, [pc, #248]	; (8005484 <__ieee754_pow+0x264>)
 800538a:	4599      	cmp	r9, r3
 800538c:	d10c      	bne.n	80053a8 <__ieee754_pow+0x188>
 800538e:	2d00      	cmp	r5, #0
 8005390:	db0a      	blt.n	80053a8 <__ieee754_pow+0x188>
 8005392:	ec47 6b10 	vmov	d0, r6, r7
 8005396:	b009      	add	sp, #36	; 0x24
 8005398:	ecbd 8b06 	vpop	{d8-d10}
 800539c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a0:	f000 bc6c 	b.w	8005c7c <__ieee754_sqrt>
 80053a4:	2300      	movs	r3, #0
 80053a6:	9304      	str	r3, [sp, #16]
 80053a8:	ec47 6b10 	vmov	d0, r6, r7
 80053ac:	f000 fd4b 	bl	8005e46 <fabs>
 80053b0:	ec51 0b10 	vmov	r0, r1, d0
 80053b4:	f1ba 0f00 	cmp.w	sl, #0
 80053b8:	d129      	bne.n	800540e <__ieee754_pow+0x1ee>
 80053ba:	b124      	cbz	r4, 80053c6 <__ieee754_pow+0x1a6>
 80053bc:	4b2f      	ldr	r3, [pc, #188]	; (800547c <__ieee754_pow+0x25c>)
 80053be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d123      	bne.n	800540e <__ieee754_pow+0x1ee>
 80053c6:	f1b9 0f00 	cmp.w	r9, #0
 80053ca:	da05      	bge.n	80053d8 <__ieee754_pow+0x1b8>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	2000      	movs	r0, #0
 80053d2:	492a      	ldr	r1, [pc, #168]	; (800547c <__ieee754_pow+0x25c>)
 80053d4:	f7fb f9fa 	bl	80007cc <__aeabi_ddiv>
 80053d8:	2d00      	cmp	r5, #0
 80053da:	f6bf af40 	bge.w	800525e <__ieee754_pow+0x3e>
 80053de:	9b04      	ldr	r3, [sp, #16]
 80053e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80053e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80053e8:	4323      	orrs	r3, r4
 80053ea:	d108      	bne.n	80053fe <__ieee754_pow+0x1de>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4610      	mov	r0, r2
 80053f2:	4619      	mov	r1, r3
 80053f4:	f7fa ff08 	bl	8000208 <__aeabi_dsub>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	e78f      	b.n	800531e <__ieee754_pow+0xfe>
 80053fe:	9b04      	ldr	r3, [sp, #16]
 8005400:	2b01      	cmp	r3, #1
 8005402:	f47f af2c 	bne.w	800525e <__ieee754_pow+0x3e>
 8005406:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800540a:	4619      	mov	r1, r3
 800540c:	e727      	b.n	800525e <__ieee754_pow+0x3e>
 800540e:	0feb      	lsrs	r3, r5, #31
 8005410:	3b01      	subs	r3, #1
 8005412:	9306      	str	r3, [sp, #24]
 8005414:	9a06      	ldr	r2, [sp, #24]
 8005416:	9b04      	ldr	r3, [sp, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	d102      	bne.n	8005422 <__ieee754_pow+0x202>
 800541c:	4632      	mov	r2, r6
 800541e:	463b      	mov	r3, r7
 8005420:	e7e6      	b.n	80053f0 <__ieee754_pow+0x1d0>
 8005422:	4b19      	ldr	r3, [pc, #100]	; (8005488 <__ieee754_pow+0x268>)
 8005424:	4598      	cmp	r8, r3
 8005426:	f340 80fb 	ble.w	8005620 <__ieee754_pow+0x400>
 800542a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800542e:	4598      	cmp	r8, r3
 8005430:	4b13      	ldr	r3, [pc, #76]	; (8005480 <__ieee754_pow+0x260>)
 8005432:	dd0c      	ble.n	800544e <__ieee754_pow+0x22e>
 8005434:	429c      	cmp	r4, r3
 8005436:	dc0f      	bgt.n	8005458 <__ieee754_pow+0x238>
 8005438:	f1b9 0f00 	cmp.w	r9, #0
 800543c:	da0f      	bge.n	800545e <__ieee754_pow+0x23e>
 800543e:	2000      	movs	r0, #0
 8005440:	b009      	add	sp, #36	; 0x24
 8005442:	ecbd 8b06 	vpop	{d8-d10}
 8005446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544a:	f000 bcf3 	b.w	8005e34 <__math_oflow>
 800544e:	429c      	cmp	r4, r3
 8005450:	dbf2      	blt.n	8005438 <__ieee754_pow+0x218>
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <__ieee754_pow+0x25c>)
 8005454:	429c      	cmp	r4, r3
 8005456:	dd19      	ble.n	800548c <__ieee754_pow+0x26c>
 8005458:	f1b9 0f00 	cmp.w	r9, #0
 800545c:	dcef      	bgt.n	800543e <__ieee754_pow+0x21e>
 800545e:	2000      	movs	r0, #0
 8005460:	b009      	add	sp, #36	; 0x24
 8005462:	ecbd 8b06 	vpop	{d8-d10}
 8005466:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546a:	f000 bcda 	b.w	8005e22 <__math_uflow>
 800546e:	bf00      	nop
 8005470:	fff00000 	.word	0xfff00000
 8005474:	7ff00000 	.word	0x7ff00000
 8005478:	433fffff 	.word	0x433fffff
 800547c:	3ff00000 	.word	0x3ff00000
 8005480:	3fefffff 	.word	0x3fefffff
 8005484:	3fe00000 	.word	0x3fe00000
 8005488:	41e00000 	.word	0x41e00000
 800548c:	4b60      	ldr	r3, [pc, #384]	; (8005610 <__ieee754_pow+0x3f0>)
 800548e:	2200      	movs	r2, #0
 8005490:	f7fa feba 	bl	8000208 <__aeabi_dsub>
 8005494:	a354      	add	r3, pc, #336	; (adr r3, 80055e8 <__ieee754_pow+0x3c8>)
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	4604      	mov	r4, r0
 800549c:	460d      	mov	r5, r1
 800549e:	f7fb f86b 	bl	8000578 <__aeabi_dmul>
 80054a2:	a353      	add	r3, pc, #332	; (adr r3, 80055f0 <__ieee754_pow+0x3d0>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	4606      	mov	r6, r0
 80054aa:	460f      	mov	r7, r1
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7fb f862 	bl	8000578 <__aeabi_dmul>
 80054b4:	4b57      	ldr	r3, [pc, #348]	; (8005614 <__ieee754_pow+0x3f4>)
 80054b6:	4682      	mov	sl, r0
 80054b8:	468b      	mov	fp, r1
 80054ba:	2200      	movs	r2, #0
 80054bc:	4620      	mov	r0, r4
 80054be:	4629      	mov	r1, r5
 80054c0:	f7fb f85a 	bl	8000578 <__aeabi_dmul>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	a14b      	add	r1, pc, #300	; (adr r1, 80055f8 <__ieee754_pow+0x3d8>)
 80054ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054ce:	f7fa fe9b 	bl	8000208 <__aeabi_dsub>
 80054d2:	4622      	mov	r2, r4
 80054d4:	462b      	mov	r3, r5
 80054d6:	f7fb f84f 	bl	8000578 <__aeabi_dmul>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	2000      	movs	r0, #0
 80054e0:	494d      	ldr	r1, [pc, #308]	; (8005618 <__ieee754_pow+0x3f8>)
 80054e2:	f7fa fe91 	bl	8000208 <__aeabi_dsub>
 80054e6:	4622      	mov	r2, r4
 80054e8:	4680      	mov	r8, r0
 80054ea:	4689      	mov	r9, r1
 80054ec:	462b      	mov	r3, r5
 80054ee:	4620      	mov	r0, r4
 80054f0:	4629      	mov	r1, r5
 80054f2:	f7fb f841 	bl	8000578 <__aeabi_dmul>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4640      	mov	r0, r8
 80054fc:	4649      	mov	r1, r9
 80054fe:	f7fb f83b 	bl	8000578 <__aeabi_dmul>
 8005502:	a33f      	add	r3, pc, #252	; (adr r3, 8005600 <__ieee754_pow+0x3e0>)
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f7fb f836 	bl	8000578 <__aeabi_dmul>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4650      	mov	r0, sl
 8005512:	4659      	mov	r1, fp
 8005514:	f7fa fe78 	bl	8000208 <__aeabi_dsub>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4680      	mov	r8, r0
 800551e:	4689      	mov	r9, r1
 8005520:	4630      	mov	r0, r6
 8005522:	4639      	mov	r1, r7
 8005524:	f7fa fe72 	bl	800020c <__adddf3>
 8005528:	2000      	movs	r0, #0
 800552a:	4632      	mov	r2, r6
 800552c:	463b      	mov	r3, r7
 800552e:	4604      	mov	r4, r0
 8005530:	460d      	mov	r5, r1
 8005532:	f7fa fe69 	bl	8000208 <__aeabi_dsub>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4640      	mov	r0, r8
 800553c:	4649      	mov	r1, r9
 800553e:	f7fa fe63 	bl	8000208 <__aeabi_dsub>
 8005542:	9b04      	ldr	r3, [sp, #16]
 8005544:	9a06      	ldr	r2, [sp, #24]
 8005546:	3b01      	subs	r3, #1
 8005548:	4313      	orrs	r3, r2
 800554a:	4682      	mov	sl, r0
 800554c:	468b      	mov	fp, r1
 800554e:	f040 81e7 	bne.w	8005920 <__ieee754_pow+0x700>
 8005552:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005608 <__ieee754_pow+0x3e8>
 8005556:	eeb0 8a47 	vmov.f32	s16, s14
 800555a:	eef0 8a67 	vmov.f32	s17, s15
 800555e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005562:	2600      	movs	r6, #0
 8005564:	4632      	mov	r2, r6
 8005566:	463b      	mov	r3, r7
 8005568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800556c:	f7fa fe4c 	bl	8000208 <__aeabi_dsub>
 8005570:	4622      	mov	r2, r4
 8005572:	462b      	mov	r3, r5
 8005574:	f7fb f800 	bl	8000578 <__aeabi_dmul>
 8005578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800557c:	4680      	mov	r8, r0
 800557e:	4689      	mov	r9, r1
 8005580:	4650      	mov	r0, sl
 8005582:	4659      	mov	r1, fp
 8005584:	f7fa fff8 	bl	8000578 <__aeabi_dmul>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4640      	mov	r0, r8
 800558e:	4649      	mov	r1, r9
 8005590:	f7fa fe3c 	bl	800020c <__adddf3>
 8005594:	4632      	mov	r2, r6
 8005596:	463b      	mov	r3, r7
 8005598:	4680      	mov	r8, r0
 800559a:	4689      	mov	r9, r1
 800559c:	4620      	mov	r0, r4
 800559e:	4629      	mov	r1, r5
 80055a0:	f7fa ffea 	bl	8000578 <__aeabi_dmul>
 80055a4:	460b      	mov	r3, r1
 80055a6:	4604      	mov	r4, r0
 80055a8:	460d      	mov	r5, r1
 80055aa:	4602      	mov	r2, r0
 80055ac:	4649      	mov	r1, r9
 80055ae:	4640      	mov	r0, r8
 80055b0:	f7fa fe2c 	bl	800020c <__adddf3>
 80055b4:	4b19      	ldr	r3, [pc, #100]	; (800561c <__ieee754_pow+0x3fc>)
 80055b6:	4299      	cmp	r1, r3
 80055b8:	ec45 4b19 	vmov	d9, r4, r5
 80055bc:	4606      	mov	r6, r0
 80055be:	460f      	mov	r7, r1
 80055c0:	468b      	mov	fp, r1
 80055c2:	f340 82f1 	ble.w	8005ba8 <__ieee754_pow+0x988>
 80055c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80055ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80055ce:	4303      	orrs	r3, r0
 80055d0:	f000 81e4 	beq.w	800599c <__ieee754_pow+0x77c>
 80055d4:	ec51 0b18 	vmov	r0, r1, d8
 80055d8:	2200      	movs	r2, #0
 80055da:	2300      	movs	r3, #0
 80055dc:	f7fb fa3e 	bl	8000a5c <__aeabi_dcmplt>
 80055e0:	3800      	subs	r0, #0
 80055e2:	bf18      	it	ne
 80055e4:	2001      	movne	r0, #1
 80055e6:	e72b      	b.n	8005440 <__ieee754_pow+0x220>
 80055e8:	60000000 	.word	0x60000000
 80055ec:	3ff71547 	.word	0x3ff71547
 80055f0:	f85ddf44 	.word	0xf85ddf44
 80055f4:	3e54ae0b 	.word	0x3e54ae0b
 80055f8:	55555555 	.word	0x55555555
 80055fc:	3fd55555 	.word	0x3fd55555
 8005600:	652b82fe 	.word	0x652b82fe
 8005604:	3ff71547 	.word	0x3ff71547
 8005608:	00000000 	.word	0x00000000
 800560c:	bff00000 	.word	0xbff00000
 8005610:	3ff00000 	.word	0x3ff00000
 8005614:	3fd00000 	.word	0x3fd00000
 8005618:	3fe00000 	.word	0x3fe00000
 800561c:	408fffff 	.word	0x408fffff
 8005620:	4bd5      	ldr	r3, [pc, #852]	; (8005978 <__ieee754_pow+0x758>)
 8005622:	402b      	ands	r3, r5
 8005624:	2200      	movs	r2, #0
 8005626:	b92b      	cbnz	r3, 8005634 <__ieee754_pow+0x414>
 8005628:	4bd4      	ldr	r3, [pc, #848]	; (800597c <__ieee754_pow+0x75c>)
 800562a:	f7fa ffa5 	bl	8000578 <__aeabi_dmul>
 800562e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005632:	460c      	mov	r4, r1
 8005634:	1523      	asrs	r3, r4, #20
 8005636:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800563a:	4413      	add	r3, r2
 800563c:	9305      	str	r3, [sp, #20]
 800563e:	4bd0      	ldr	r3, [pc, #832]	; (8005980 <__ieee754_pow+0x760>)
 8005640:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005644:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005648:	429c      	cmp	r4, r3
 800564a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800564e:	dd08      	ble.n	8005662 <__ieee754_pow+0x442>
 8005650:	4bcc      	ldr	r3, [pc, #816]	; (8005984 <__ieee754_pow+0x764>)
 8005652:	429c      	cmp	r4, r3
 8005654:	f340 8162 	ble.w	800591c <__ieee754_pow+0x6fc>
 8005658:	9b05      	ldr	r3, [sp, #20]
 800565a:	3301      	adds	r3, #1
 800565c:	9305      	str	r3, [sp, #20]
 800565e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005662:	2400      	movs	r4, #0
 8005664:	00e3      	lsls	r3, r4, #3
 8005666:	9307      	str	r3, [sp, #28]
 8005668:	4bc7      	ldr	r3, [pc, #796]	; (8005988 <__ieee754_pow+0x768>)
 800566a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800566e:	ed93 7b00 	vldr	d7, [r3]
 8005672:	4629      	mov	r1, r5
 8005674:	ec53 2b17 	vmov	r2, r3, d7
 8005678:	eeb0 9a47 	vmov.f32	s18, s14
 800567c:	eef0 9a67 	vmov.f32	s19, s15
 8005680:	4682      	mov	sl, r0
 8005682:	f7fa fdc1 	bl	8000208 <__aeabi_dsub>
 8005686:	4652      	mov	r2, sl
 8005688:	4606      	mov	r6, r0
 800568a:	460f      	mov	r7, r1
 800568c:	462b      	mov	r3, r5
 800568e:	ec51 0b19 	vmov	r0, r1, d9
 8005692:	f7fa fdbb 	bl	800020c <__adddf3>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	2000      	movs	r0, #0
 800569c:	49bb      	ldr	r1, [pc, #748]	; (800598c <__ieee754_pow+0x76c>)
 800569e:	f7fb f895 	bl	80007cc <__aeabi_ddiv>
 80056a2:	ec41 0b1a 	vmov	d10, r0, r1
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4630      	mov	r0, r6
 80056ac:	4639      	mov	r1, r7
 80056ae:	f7fa ff63 	bl	8000578 <__aeabi_dmul>
 80056b2:	2300      	movs	r3, #0
 80056b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b8:	9302      	str	r3, [sp, #8]
 80056ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056be:	46ab      	mov	fp, r5
 80056c0:	106d      	asrs	r5, r5, #1
 80056c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80056c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80056ca:	ec41 0b18 	vmov	d8, r0, r1
 80056ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80056d2:	2200      	movs	r2, #0
 80056d4:	4640      	mov	r0, r8
 80056d6:	4649      	mov	r1, r9
 80056d8:	4614      	mov	r4, r2
 80056da:	461d      	mov	r5, r3
 80056dc:	f7fa ff4c 	bl	8000578 <__aeabi_dmul>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4630      	mov	r0, r6
 80056e6:	4639      	mov	r1, r7
 80056e8:	f7fa fd8e 	bl	8000208 <__aeabi_dsub>
 80056ec:	ec53 2b19 	vmov	r2, r3, d9
 80056f0:	4606      	mov	r6, r0
 80056f2:	460f      	mov	r7, r1
 80056f4:	4620      	mov	r0, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	f7fa fd86 	bl	8000208 <__aeabi_dsub>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4650      	mov	r0, sl
 8005702:	4659      	mov	r1, fp
 8005704:	f7fa fd80 	bl	8000208 <__aeabi_dsub>
 8005708:	4642      	mov	r2, r8
 800570a:	464b      	mov	r3, r9
 800570c:	f7fa ff34 	bl	8000578 <__aeabi_dmul>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4630      	mov	r0, r6
 8005716:	4639      	mov	r1, r7
 8005718:	f7fa fd76 	bl	8000208 <__aeabi_dsub>
 800571c:	ec53 2b1a 	vmov	r2, r3, d10
 8005720:	f7fa ff2a 	bl	8000578 <__aeabi_dmul>
 8005724:	ec53 2b18 	vmov	r2, r3, d8
 8005728:	ec41 0b19 	vmov	d9, r0, r1
 800572c:	ec51 0b18 	vmov	r0, r1, d8
 8005730:	f7fa ff22 	bl	8000578 <__aeabi_dmul>
 8005734:	a37c      	add	r3, pc, #496	; (adr r3, 8005928 <__ieee754_pow+0x708>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	4604      	mov	r4, r0
 800573c:	460d      	mov	r5, r1
 800573e:	f7fa ff1b 	bl	8000578 <__aeabi_dmul>
 8005742:	a37b      	add	r3, pc, #492	; (adr r3, 8005930 <__ieee754_pow+0x710>)
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f7fa fd60 	bl	800020c <__adddf3>
 800574c:	4622      	mov	r2, r4
 800574e:	462b      	mov	r3, r5
 8005750:	f7fa ff12 	bl	8000578 <__aeabi_dmul>
 8005754:	a378      	add	r3, pc, #480	; (adr r3, 8005938 <__ieee754_pow+0x718>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f7fa fd57 	bl	800020c <__adddf3>
 800575e:	4622      	mov	r2, r4
 8005760:	462b      	mov	r3, r5
 8005762:	f7fa ff09 	bl	8000578 <__aeabi_dmul>
 8005766:	a376      	add	r3, pc, #472	; (adr r3, 8005940 <__ieee754_pow+0x720>)
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f7fa fd4e 	bl	800020c <__adddf3>
 8005770:	4622      	mov	r2, r4
 8005772:	462b      	mov	r3, r5
 8005774:	f7fa ff00 	bl	8000578 <__aeabi_dmul>
 8005778:	a373      	add	r3, pc, #460	; (adr r3, 8005948 <__ieee754_pow+0x728>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f7fa fd45 	bl	800020c <__adddf3>
 8005782:	4622      	mov	r2, r4
 8005784:	462b      	mov	r3, r5
 8005786:	f7fa fef7 	bl	8000578 <__aeabi_dmul>
 800578a:	a371      	add	r3, pc, #452	; (adr r3, 8005950 <__ieee754_pow+0x730>)
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	f7fa fd3c 	bl	800020c <__adddf3>
 8005794:	4622      	mov	r2, r4
 8005796:	4606      	mov	r6, r0
 8005798:	460f      	mov	r7, r1
 800579a:	462b      	mov	r3, r5
 800579c:	4620      	mov	r0, r4
 800579e:	4629      	mov	r1, r5
 80057a0:	f7fa feea 	bl	8000578 <__aeabi_dmul>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4630      	mov	r0, r6
 80057aa:	4639      	mov	r1, r7
 80057ac:	f7fa fee4 	bl	8000578 <__aeabi_dmul>
 80057b0:	4642      	mov	r2, r8
 80057b2:	4604      	mov	r4, r0
 80057b4:	460d      	mov	r5, r1
 80057b6:	464b      	mov	r3, r9
 80057b8:	ec51 0b18 	vmov	r0, r1, d8
 80057bc:	f7fa fd26 	bl	800020c <__adddf3>
 80057c0:	ec53 2b19 	vmov	r2, r3, d9
 80057c4:	f7fa fed8 	bl	8000578 <__aeabi_dmul>
 80057c8:	4622      	mov	r2, r4
 80057ca:	462b      	mov	r3, r5
 80057cc:	f7fa fd1e 	bl	800020c <__adddf3>
 80057d0:	4642      	mov	r2, r8
 80057d2:	4682      	mov	sl, r0
 80057d4:	468b      	mov	fp, r1
 80057d6:	464b      	mov	r3, r9
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	f7fa fecc 	bl	8000578 <__aeabi_dmul>
 80057e0:	4b6b      	ldr	r3, [pc, #428]	; (8005990 <__ieee754_pow+0x770>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	4606      	mov	r6, r0
 80057e6:	460f      	mov	r7, r1
 80057e8:	f7fa fd10 	bl	800020c <__adddf3>
 80057ec:	4652      	mov	r2, sl
 80057ee:	465b      	mov	r3, fp
 80057f0:	f7fa fd0c 	bl	800020c <__adddf3>
 80057f4:	2000      	movs	r0, #0
 80057f6:	4604      	mov	r4, r0
 80057f8:	460d      	mov	r5, r1
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4640      	mov	r0, r8
 8005800:	4649      	mov	r1, r9
 8005802:	f7fa feb9 	bl	8000578 <__aeabi_dmul>
 8005806:	4b62      	ldr	r3, [pc, #392]	; (8005990 <__ieee754_pow+0x770>)
 8005808:	4680      	mov	r8, r0
 800580a:	4689      	mov	r9, r1
 800580c:	2200      	movs	r2, #0
 800580e:	4620      	mov	r0, r4
 8005810:	4629      	mov	r1, r5
 8005812:	f7fa fcf9 	bl	8000208 <__aeabi_dsub>
 8005816:	4632      	mov	r2, r6
 8005818:	463b      	mov	r3, r7
 800581a:	f7fa fcf5 	bl	8000208 <__aeabi_dsub>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4650      	mov	r0, sl
 8005824:	4659      	mov	r1, fp
 8005826:	f7fa fcef 	bl	8000208 <__aeabi_dsub>
 800582a:	ec53 2b18 	vmov	r2, r3, d8
 800582e:	f7fa fea3 	bl	8000578 <__aeabi_dmul>
 8005832:	4622      	mov	r2, r4
 8005834:	4606      	mov	r6, r0
 8005836:	460f      	mov	r7, r1
 8005838:	462b      	mov	r3, r5
 800583a:	ec51 0b19 	vmov	r0, r1, d9
 800583e:	f7fa fe9b 	bl	8000578 <__aeabi_dmul>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4630      	mov	r0, r6
 8005848:	4639      	mov	r1, r7
 800584a:	f7fa fcdf 	bl	800020c <__adddf3>
 800584e:	4606      	mov	r6, r0
 8005850:	460f      	mov	r7, r1
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4640      	mov	r0, r8
 8005858:	4649      	mov	r1, r9
 800585a:	f7fa fcd7 	bl	800020c <__adddf3>
 800585e:	a33e      	add	r3, pc, #248	; (adr r3, 8005958 <__ieee754_pow+0x738>)
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	2000      	movs	r0, #0
 8005866:	4604      	mov	r4, r0
 8005868:	460d      	mov	r5, r1
 800586a:	f7fa fe85 	bl	8000578 <__aeabi_dmul>
 800586e:	4642      	mov	r2, r8
 8005870:	ec41 0b18 	vmov	d8, r0, r1
 8005874:	464b      	mov	r3, r9
 8005876:	4620      	mov	r0, r4
 8005878:	4629      	mov	r1, r5
 800587a:	f7fa fcc5 	bl	8000208 <__aeabi_dsub>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4630      	mov	r0, r6
 8005884:	4639      	mov	r1, r7
 8005886:	f7fa fcbf 	bl	8000208 <__aeabi_dsub>
 800588a:	a335      	add	r3, pc, #212	; (adr r3, 8005960 <__ieee754_pow+0x740>)
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f7fa fe72 	bl	8000578 <__aeabi_dmul>
 8005894:	a334      	add	r3, pc, #208	; (adr r3, 8005968 <__ieee754_pow+0x748>)
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	4606      	mov	r6, r0
 800589c:	460f      	mov	r7, r1
 800589e:	4620      	mov	r0, r4
 80058a0:	4629      	mov	r1, r5
 80058a2:	f7fa fe69 	bl	8000578 <__aeabi_dmul>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4630      	mov	r0, r6
 80058ac:	4639      	mov	r1, r7
 80058ae:	f7fa fcad 	bl	800020c <__adddf3>
 80058b2:	9a07      	ldr	r2, [sp, #28]
 80058b4:	4b37      	ldr	r3, [pc, #220]	; (8005994 <__ieee754_pow+0x774>)
 80058b6:	4413      	add	r3, r2
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f7fa fca6 	bl	800020c <__adddf3>
 80058c0:	4682      	mov	sl, r0
 80058c2:	9805      	ldr	r0, [sp, #20]
 80058c4:	468b      	mov	fp, r1
 80058c6:	f7fa fded 	bl	80004a4 <__aeabi_i2d>
 80058ca:	9a07      	ldr	r2, [sp, #28]
 80058cc:	4b32      	ldr	r3, [pc, #200]	; (8005998 <__ieee754_pow+0x778>)
 80058ce:	4413      	add	r3, r2
 80058d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058d4:	4606      	mov	r6, r0
 80058d6:	460f      	mov	r7, r1
 80058d8:	4652      	mov	r2, sl
 80058da:	465b      	mov	r3, fp
 80058dc:	ec51 0b18 	vmov	r0, r1, d8
 80058e0:	f7fa fc94 	bl	800020c <__adddf3>
 80058e4:	4642      	mov	r2, r8
 80058e6:	464b      	mov	r3, r9
 80058e8:	f7fa fc90 	bl	800020c <__adddf3>
 80058ec:	4632      	mov	r2, r6
 80058ee:	463b      	mov	r3, r7
 80058f0:	f7fa fc8c 	bl	800020c <__adddf3>
 80058f4:	2000      	movs	r0, #0
 80058f6:	4632      	mov	r2, r6
 80058f8:	463b      	mov	r3, r7
 80058fa:	4604      	mov	r4, r0
 80058fc:	460d      	mov	r5, r1
 80058fe:	f7fa fc83 	bl	8000208 <__aeabi_dsub>
 8005902:	4642      	mov	r2, r8
 8005904:	464b      	mov	r3, r9
 8005906:	f7fa fc7f 	bl	8000208 <__aeabi_dsub>
 800590a:	ec53 2b18 	vmov	r2, r3, d8
 800590e:	f7fa fc7b 	bl	8000208 <__aeabi_dsub>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4650      	mov	r0, sl
 8005918:	4659      	mov	r1, fp
 800591a:	e610      	b.n	800553e <__ieee754_pow+0x31e>
 800591c:	2401      	movs	r4, #1
 800591e:	e6a1      	b.n	8005664 <__ieee754_pow+0x444>
 8005920:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005970 <__ieee754_pow+0x750>
 8005924:	e617      	b.n	8005556 <__ieee754_pow+0x336>
 8005926:	bf00      	nop
 8005928:	4a454eef 	.word	0x4a454eef
 800592c:	3fca7e28 	.word	0x3fca7e28
 8005930:	93c9db65 	.word	0x93c9db65
 8005934:	3fcd864a 	.word	0x3fcd864a
 8005938:	a91d4101 	.word	0xa91d4101
 800593c:	3fd17460 	.word	0x3fd17460
 8005940:	518f264d 	.word	0x518f264d
 8005944:	3fd55555 	.word	0x3fd55555
 8005948:	db6fabff 	.word	0xdb6fabff
 800594c:	3fdb6db6 	.word	0x3fdb6db6
 8005950:	33333303 	.word	0x33333303
 8005954:	3fe33333 	.word	0x3fe33333
 8005958:	e0000000 	.word	0xe0000000
 800595c:	3feec709 	.word	0x3feec709
 8005960:	dc3a03fd 	.word	0xdc3a03fd
 8005964:	3feec709 	.word	0x3feec709
 8005968:	145b01f5 	.word	0x145b01f5
 800596c:	be3e2fe0 	.word	0xbe3e2fe0
 8005970:	00000000 	.word	0x00000000
 8005974:	3ff00000 	.word	0x3ff00000
 8005978:	7ff00000 	.word	0x7ff00000
 800597c:	43400000 	.word	0x43400000
 8005980:	0003988e 	.word	0x0003988e
 8005984:	000bb679 	.word	0x000bb679
 8005988:	08006040 	.word	0x08006040
 800598c:	3ff00000 	.word	0x3ff00000
 8005990:	40080000 	.word	0x40080000
 8005994:	08006060 	.word	0x08006060
 8005998:	08006050 	.word	0x08006050
 800599c:	a3b5      	add	r3, pc, #724	; (adr r3, 8005c74 <__ieee754_pow+0xa54>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	4640      	mov	r0, r8
 80059a4:	4649      	mov	r1, r9
 80059a6:	f7fa fc31 	bl	800020c <__adddf3>
 80059aa:	4622      	mov	r2, r4
 80059ac:	ec41 0b1a 	vmov	d10, r0, r1
 80059b0:	462b      	mov	r3, r5
 80059b2:	4630      	mov	r0, r6
 80059b4:	4639      	mov	r1, r7
 80059b6:	f7fa fc27 	bl	8000208 <__aeabi_dsub>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	ec51 0b1a 	vmov	r0, r1, d10
 80059c2:	f7fb f869 	bl	8000a98 <__aeabi_dcmpgt>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f47f ae04 	bne.w	80055d4 <__ieee754_pow+0x3b4>
 80059cc:	4aa4      	ldr	r2, [pc, #656]	; (8005c60 <__ieee754_pow+0xa40>)
 80059ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80059d2:	4293      	cmp	r3, r2
 80059d4:	f340 8108 	ble.w	8005be8 <__ieee754_pow+0x9c8>
 80059d8:	151b      	asrs	r3, r3, #20
 80059da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80059de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80059e2:	fa4a f303 	asr.w	r3, sl, r3
 80059e6:	445b      	add	r3, fp
 80059e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80059ec:	4e9d      	ldr	r6, [pc, #628]	; (8005c64 <__ieee754_pow+0xa44>)
 80059ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80059f2:	4116      	asrs	r6, r2
 80059f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80059f8:	2000      	movs	r0, #0
 80059fa:	ea23 0106 	bic.w	r1, r3, r6
 80059fe:	f1c2 0214 	rsb	r2, r2, #20
 8005a02:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005a06:	fa4a fa02 	asr.w	sl, sl, r2
 8005a0a:	f1bb 0f00 	cmp.w	fp, #0
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	bfb8      	it	lt
 8005a18:	f1ca 0a00 	rsblt	sl, sl, #0
 8005a1c:	f7fa fbf4 	bl	8000208 <__aeabi_dsub>
 8005a20:	ec41 0b19 	vmov	d9, r0, r1
 8005a24:	4642      	mov	r2, r8
 8005a26:	464b      	mov	r3, r9
 8005a28:	ec51 0b19 	vmov	r0, r1, d9
 8005a2c:	f7fa fbee 	bl	800020c <__adddf3>
 8005a30:	a37b      	add	r3, pc, #492	; (adr r3, 8005c20 <__ieee754_pow+0xa00>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	2000      	movs	r0, #0
 8005a38:	4604      	mov	r4, r0
 8005a3a:	460d      	mov	r5, r1
 8005a3c:	f7fa fd9c 	bl	8000578 <__aeabi_dmul>
 8005a40:	ec53 2b19 	vmov	r2, r3, d9
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	4620      	mov	r0, r4
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	f7fa fbdc 	bl	8000208 <__aeabi_dsub>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4640      	mov	r0, r8
 8005a56:	4649      	mov	r1, r9
 8005a58:	f7fa fbd6 	bl	8000208 <__aeabi_dsub>
 8005a5c:	a372      	add	r3, pc, #456	; (adr r3, 8005c28 <__ieee754_pow+0xa08>)
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f7fa fd89 	bl	8000578 <__aeabi_dmul>
 8005a66:	a372      	add	r3, pc, #456	; (adr r3, 8005c30 <__ieee754_pow+0xa10>)
 8005a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	4689      	mov	r9, r1
 8005a70:	4620      	mov	r0, r4
 8005a72:	4629      	mov	r1, r5
 8005a74:	f7fa fd80 	bl	8000578 <__aeabi_dmul>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	4649      	mov	r1, r9
 8005a80:	f7fa fbc4 	bl	800020c <__adddf3>
 8005a84:	4604      	mov	r4, r0
 8005a86:	460d      	mov	r5, r1
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	f7fa fbbc 	bl	800020c <__adddf3>
 8005a94:	4632      	mov	r2, r6
 8005a96:	463b      	mov	r3, r7
 8005a98:	4680      	mov	r8, r0
 8005a9a:	4689      	mov	r9, r1
 8005a9c:	f7fa fbb4 	bl	8000208 <__aeabi_dsub>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	f7fa fbae 	bl	8000208 <__aeabi_dsub>
 8005aac:	4642      	mov	r2, r8
 8005aae:	4606      	mov	r6, r0
 8005ab0:	460f      	mov	r7, r1
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	f7fa fd5e 	bl	8000578 <__aeabi_dmul>
 8005abc:	a35e      	add	r3, pc, #376	; (adr r3, 8005c38 <__ieee754_pow+0xa18>)
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	460d      	mov	r5, r1
 8005ac6:	f7fa fd57 	bl	8000578 <__aeabi_dmul>
 8005aca:	a35d      	add	r3, pc, #372	; (adr r3, 8005c40 <__ieee754_pow+0xa20>)
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	f7fa fb9a 	bl	8000208 <__aeabi_dsub>
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	f7fa fd4e 	bl	8000578 <__aeabi_dmul>
 8005adc:	a35a      	add	r3, pc, #360	; (adr r3, 8005c48 <__ieee754_pow+0xa28>)
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f7fa fb93 	bl	800020c <__adddf3>
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	462b      	mov	r3, r5
 8005aea:	f7fa fd45 	bl	8000578 <__aeabi_dmul>
 8005aee:	a358      	add	r3, pc, #352	; (adr r3, 8005c50 <__ieee754_pow+0xa30>)
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f7fa fb88 	bl	8000208 <__aeabi_dsub>
 8005af8:	4622      	mov	r2, r4
 8005afa:	462b      	mov	r3, r5
 8005afc:	f7fa fd3c 	bl	8000578 <__aeabi_dmul>
 8005b00:	a355      	add	r3, pc, #340	; (adr r3, 8005c58 <__ieee754_pow+0xa38>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f7fa fb81 	bl	800020c <__adddf3>
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	f7fa fd33 	bl	8000578 <__aeabi_dmul>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4640      	mov	r0, r8
 8005b18:	4649      	mov	r1, r9
 8005b1a:	f7fa fb75 	bl	8000208 <__aeabi_dsub>
 8005b1e:	4604      	mov	r4, r0
 8005b20:	460d      	mov	r5, r1
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4640      	mov	r0, r8
 8005b28:	4649      	mov	r1, r9
 8005b2a:	f7fa fd25 	bl	8000578 <__aeabi_dmul>
 8005b2e:	2200      	movs	r2, #0
 8005b30:	ec41 0b19 	vmov	d9, r0, r1
 8005b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b38:	4620      	mov	r0, r4
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	f7fa fb64 	bl	8000208 <__aeabi_dsub>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	ec51 0b19 	vmov	r0, r1, d9
 8005b48:	f7fa fe40 	bl	80007cc <__aeabi_ddiv>
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	4604      	mov	r4, r0
 8005b50:	460d      	mov	r5, r1
 8005b52:	463b      	mov	r3, r7
 8005b54:	4640      	mov	r0, r8
 8005b56:	4649      	mov	r1, r9
 8005b58:	f7fa fd0e 	bl	8000578 <__aeabi_dmul>
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	463b      	mov	r3, r7
 8005b60:	f7fa fb54 	bl	800020c <__adddf3>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4620      	mov	r0, r4
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	f7fa fb4c 	bl	8000208 <__aeabi_dsub>
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	f7fa fb48 	bl	8000208 <__aeabi_dsub>
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	493a      	ldr	r1, [pc, #232]	; (8005c68 <__ieee754_pow+0xa48>)
 8005b7e:	2000      	movs	r0, #0
 8005b80:	f7fa fb42 	bl	8000208 <__aeabi_dsub>
 8005b84:	ec41 0b10 	vmov	d0, r0, r1
 8005b88:	ee10 3a90 	vmov	r3, s1
 8005b8c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b94:	da2b      	bge.n	8005bee <__ieee754_pow+0x9ce>
 8005b96:	4650      	mov	r0, sl
 8005b98:	f000 f96a 	bl	8005e70 <scalbn>
 8005b9c:	ec51 0b10 	vmov	r0, r1, d0
 8005ba0:	ec53 2b18 	vmov	r2, r3, d8
 8005ba4:	f7ff bbed 	b.w	8005382 <__ieee754_pow+0x162>
 8005ba8:	4b30      	ldr	r3, [pc, #192]	; (8005c6c <__ieee754_pow+0xa4c>)
 8005baa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005bae:	429e      	cmp	r6, r3
 8005bb0:	f77f af0c 	ble.w	80059cc <__ieee754_pow+0x7ac>
 8005bb4:	4b2e      	ldr	r3, [pc, #184]	; (8005c70 <__ieee754_pow+0xa50>)
 8005bb6:	440b      	add	r3, r1
 8005bb8:	4303      	orrs	r3, r0
 8005bba:	d009      	beq.n	8005bd0 <__ieee754_pow+0x9b0>
 8005bbc:	ec51 0b18 	vmov	r0, r1, d8
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f7fa ff4a 	bl	8000a5c <__aeabi_dcmplt>
 8005bc8:	3800      	subs	r0, #0
 8005bca:	bf18      	it	ne
 8005bcc:	2001      	movne	r0, #1
 8005bce:	e447      	b.n	8005460 <__ieee754_pow+0x240>
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	462b      	mov	r3, r5
 8005bd4:	f7fa fb18 	bl	8000208 <__aeabi_dsub>
 8005bd8:	4642      	mov	r2, r8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	f7fa ff52 	bl	8000a84 <__aeabi_dcmpge>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	f43f aef3 	beq.w	80059cc <__ieee754_pow+0x7ac>
 8005be6:	e7e9      	b.n	8005bbc <__ieee754_pow+0x99c>
 8005be8:	f04f 0a00 	mov.w	sl, #0
 8005bec:	e71a      	b.n	8005a24 <__ieee754_pow+0x804>
 8005bee:	ec51 0b10 	vmov	r0, r1, d0
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	e7d4      	b.n	8005ba0 <__ieee754_pow+0x980>
 8005bf6:	491c      	ldr	r1, [pc, #112]	; (8005c68 <__ieee754_pow+0xa48>)
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	f7ff bb30 	b.w	800525e <__ieee754_pow+0x3e>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	2100      	movs	r1, #0
 8005c02:	f7ff bb2c 	b.w	800525e <__ieee754_pow+0x3e>
 8005c06:	4630      	mov	r0, r6
 8005c08:	4639      	mov	r1, r7
 8005c0a:	f7ff bb28 	b.w	800525e <__ieee754_pow+0x3e>
 8005c0e:	9204      	str	r2, [sp, #16]
 8005c10:	f7ff bb7a 	b.w	8005308 <__ieee754_pow+0xe8>
 8005c14:	2300      	movs	r3, #0
 8005c16:	f7ff bb64 	b.w	80052e2 <__ieee754_pow+0xc2>
 8005c1a:	bf00      	nop
 8005c1c:	f3af 8000 	nop.w
 8005c20:	00000000 	.word	0x00000000
 8005c24:	3fe62e43 	.word	0x3fe62e43
 8005c28:	fefa39ef 	.word	0xfefa39ef
 8005c2c:	3fe62e42 	.word	0x3fe62e42
 8005c30:	0ca86c39 	.word	0x0ca86c39
 8005c34:	be205c61 	.word	0xbe205c61
 8005c38:	72bea4d0 	.word	0x72bea4d0
 8005c3c:	3e663769 	.word	0x3e663769
 8005c40:	c5d26bf1 	.word	0xc5d26bf1
 8005c44:	3ebbbd41 	.word	0x3ebbbd41
 8005c48:	af25de2c 	.word	0xaf25de2c
 8005c4c:	3f11566a 	.word	0x3f11566a
 8005c50:	16bebd93 	.word	0x16bebd93
 8005c54:	3f66c16c 	.word	0x3f66c16c
 8005c58:	5555553e 	.word	0x5555553e
 8005c5c:	3fc55555 	.word	0x3fc55555
 8005c60:	3fe00000 	.word	0x3fe00000
 8005c64:	000fffff 	.word	0x000fffff
 8005c68:	3ff00000 	.word	0x3ff00000
 8005c6c:	4090cbff 	.word	0x4090cbff
 8005c70:	3f6f3400 	.word	0x3f6f3400
 8005c74:	652b82fe 	.word	0x652b82fe
 8005c78:	3c971547 	.word	0x3c971547

08005c7c <__ieee754_sqrt>:
 8005c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c80:	ec55 4b10 	vmov	r4, r5, d0
 8005c84:	4e55      	ldr	r6, [pc, #340]	; (8005ddc <__ieee754_sqrt+0x160>)
 8005c86:	43ae      	bics	r6, r5
 8005c88:	ee10 0a10 	vmov	r0, s0
 8005c8c:	ee10 3a10 	vmov	r3, s0
 8005c90:	462a      	mov	r2, r5
 8005c92:	4629      	mov	r1, r5
 8005c94:	d110      	bne.n	8005cb8 <__ieee754_sqrt+0x3c>
 8005c96:	ee10 2a10 	vmov	r2, s0
 8005c9a:	462b      	mov	r3, r5
 8005c9c:	f7fa fc6c 	bl	8000578 <__aeabi_dmul>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	f7fa fab0 	bl	800020c <__adddf3>
 8005cac:	4604      	mov	r4, r0
 8005cae:	460d      	mov	r5, r1
 8005cb0:	ec45 4b10 	vmov	d0, r4, r5
 8005cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	dc10      	bgt.n	8005cde <__ieee754_sqrt+0x62>
 8005cbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005cc0:	4330      	orrs	r0, r6
 8005cc2:	d0f5      	beq.n	8005cb0 <__ieee754_sqrt+0x34>
 8005cc4:	b15d      	cbz	r5, 8005cde <__ieee754_sqrt+0x62>
 8005cc6:	ee10 2a10 	vmov	r2, s0
 8005cca:	462b      	mov	r3, r5
 8005ccc:	ee10 0a10 	vmov	r0, s0
 8005cd0:	f7fa fa9a 	bl	8000208 <__aeabi_dsub>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	f7fa fd78 	bl	80007cc <__aeabi_ddiv>
 8005cdc:	e7e6      	b.n	8005cac <__ieee754_sqrt+0x30>
 8005cde:	1512      	asrs	r2, r2, #20
 8005ce0:	d074      	beq.n	8005dcc <__ieee754_sqrt+0x150>
 8005ce2:	07d4      	lsls	r4, r2, #31
 8005ce4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005ce8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005cec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005cf0:	bf5e      	ittt	pl
 8005cf2:	0fda      	lsrpl	r2, r3, #31
 8005cf4:	005b      	lslpl	r3, r3, #1
 8005cf6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005cfa:	2400      	movs	r4, #0
 8005cfc:	0fda      	lsrs	r2, r3, #31
 8005cfe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005d02:	107f      	asrs	r7, r7, #1
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	2516      	movs	r5, #22
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005d0e:	1886      	adds	r6, r0, r2
 8005d10:	428e      	cmp	r6, r1
 8005d12:	bfde      	ittt	le
 8005d14:	1b89      	suble	r1, r1, r6
 8005d16:	18b0      	addle	r0, r6, r2
 8005d18:	18a4      	addle	r4, r4, r2
 8005d1a:	0049      	lsls	r1, r1, #1
 8005d1c:	3d01      	subs	r5, #1
 8005d1e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005d22:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005d26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d2a:	d1f0      	bne.n	8005d0e <__ieee754_sqrt+0x92>
 8005d2c:	462a      	mov	r2, r5
 8005d2e:	f04f 0e20 	mov.w	lr, #32
 8005d32:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005d36:	4281      	cmp	r1, r0
 8005d38:	eb06 0c05 	add.w	ip, r6, r5
 8005d3c:	dc02      	bgt.n	8005d44 <__ieee754_sqrt+0xc8>
 8005d3e:	d113      	bne.n	8005d68 <__ieee754_sqrt+0xec>
 8005d40:	459c      	cmp	ip, r3
 8005d42:	d811      	bhi.n	8005d68 <__ieee754_sqrt+0xec>
 8005d44:	f1bc 0f00 	cmp.w	ip, #0
 8005d48:	eb0c 0506 	add.w	r5, ip, r6
 8005d4c:	da43      	bge.n	8005dd6 <__ieee754_sqrt+0x15a>
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	db41      	blt.n	8005dd6 <__ieee754_sqrt+0x15a>
 8005d52:	f100 0801 	add.w	r8, r0, #1
 8005d56:	1a09      	subs	r1, r1, r0
 8005d58:	459c      	cmp	ip, r3
 8005d5a:	bf88      	it	hi
 8005d5c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8005d60:	eba3 030c 	sub.w	r3, r3, ip
 8005d64:	4432      	add	r2, r6
 8005d66:	4640      	mov	r0, r8
 8005d68:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005d6c:	f1be 0e01 	subs.w	lr, lr, #1
 8005d70:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005d74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005d7c:	d1db      	bne.n	8005d36 <__ieee754_sqrt+0xba>
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	d006      	beq.n	8005d90 <__ieee754_sqrt+0x114>
 8005d82:	1c50      	adds	r0, r2, #1
 8005d84:	bf13      	iteet	ne
 8005d86:	3201      	addne	r2, #1
 8005d88:	3401      	addeq	r4, #1
 8005d8a:	4672      	moveq	r2, lr
 8005d8c:	f022 0201 	bicne.w	r2, r2, #1
 8005d90:	1063      	asrs	r3, r4, #1
 8005d92:	0852      	lsrs	r2, r2, #1
 8005d94:	07e1      	lsls	r1, r4, #31
 8005d96:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005d9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005d9e:	bf48      	it	mi
 8005da0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005da4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005da8:	4614      	mov	r4, r2
 8005daa:	e781      	b.n	8005cb0 <__ieee754_sqrt+0x34>
 8005dac:	0ad9      	lsrs	r1, r3, #11
 8005dae:	3815      	subs	r0, #21
 8005db0:	055b      	lsls	r3, r3, #21
 8005db2:	2900      	cmp	r1, #0
 8005db4:	d0fa      	beq.n	8005dac <__ieee754_sqrt+0x130>
 8005db6:	02cd      	lsls	r5, r1, #11
 8005db8:	d50a      	bpl.n	8005dd0 <__ieee754_sqrt+0x154>
 8005dba:	f1c2 0420 	rsb	r4, r2, #32
 8005dbe:	fa23 f404 	lsr.w	r4, r3, r4
 8005dc2:	1e55      	subs	r5, r2, #1
 8005dc4:	4093      	lsls	r3, r2
 8005dc6:	4321      	orrs	r1, r4
 8005dc8:	1b42      	subs	r2, r0, r5
 8005dca:	e78a      	b.n	8005ce2 <__ieee754_sqrt+0x66>
 8005dcc:	4610      	mov	r0, r2
 8005dce:	e7f0      	b.n	8005db2 <__ieee754_sqrt+0x136>
 8005dd0:	0049      	lsls	r1, r1, #1
 8005dd2:	3201      	adds	r2, #1
 8005dd4:	e7ef      	b.n	8005db6 <__ieee754_sqrt+0x13a>
 8005dd6:	4680      	mov	r8, r0
 8005dd8:	e7bd      	b.n	8005d56 <__ieee754_sqrt+0xda>
 8005dda:	bf00      	nop
 8005ddc:	7ff00000 	.word	0x7ff00000

08005de0 <__ieee754_sqrtf>:
 8005de0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005de4:	4770      	bx	lr

08005de6 <with_errno>:
 8005de6:	b570      	push	{r4, r5, r6, lr}
 8005de8:	4604      	mov	r4, r0
 8005dea:	460d      	mov	r5, r1
 8005dec:	4616      	mov	r6, r2
 8005dee:	f000 f8c5 	bl	8005f7c <__errno>
 8005df2:	4629      	mov	r1, r5
 8005df4:	6006      	str	r6, [r0, #0]
 8005df6:	4620      	mov	r0, r4
 8005df8:	bd70      	pop	{r4, r5, r6, pc}

08005dfa <xflow>:
 8005dfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dfc:	4614      	mov	r4, r2
 8005dfe:	461d      	mov	r5, r3
 8005e00:	b108      	cbz	r0, 8005e06 <xflow+0xc>
 8005e02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e06:	e9cd 2300 	strd	r2, r3, [sp]
 8005e0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e0e:	4620      	mov	r0, r4
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7fa fbb1 	bl	8000578 <__aeabi_dmul>
 8005e16:	2222      	movs	r2, #34	; 0x22
 8005e18:	b003      	add	sp, #12
 8005e1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e1e:	f7ff bfe2 	b.w	8005de6 <with_errno>

08005e22 <__math_uflow>:
 8005e22:	b508      	push	{r3, lr}
 8005e24:	2200      	movs	r2, #0
 8005e26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e2a:	f7ff ffe6 	bl	8005dfa <xflow>
 8005e2e:	ec41 0b10 	vmov	d0, r0, r1
 8005e32:	bd08      	pop	{r3, pc}

08005e34 <__math_oflow>:
 8005e34:	b508      	push	{r3, lr}
 8005e36:	2200      	movs	r2, #0
 8005e38:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005e3c:	f7ff ffdd 	bl	8005dfa <xflow>
 8005e40:	ec41 0b10 	vmov	d0, r0, r1
 8005e44:	bd08      	pop	{r3, pc}

08005e46 <fabs>:
 8005e46:	ec51 0b10 	vmov	r0, r1, d0
 8005e4a:	ee10 2a10 	vmov	r2, s0
 8005e4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e52:	ec43 2b10 	vmov	d0, r2, r3
 8005e56:	4770      	bx	lr

08005e58 <finite>:
 8005e58:	b082      	sub	sp, #8
 8005e5a:	ed8d 0b00 	vstr	d0, [sp]
 8005e5e:	9801      	ldr	r0, [sp, #4]
 8005e60:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005e64:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005e68:	0fc0      	lsrs	r0, r0, #31
 8005e6a:	b002      	add	sp, #8
 8005e6c:	4770      	bx	lr
	...

08005e70 <scalbn>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	ec55 4b10 	vmov	r4, r5, d0
 8005e76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	462b      	mov	r3, r5
 8005e7e:	b99a      	cbnz	r2, 8005ea8 <scalbn+0x38>
 8005e80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005e84:	4323      	orrs	r3, r4
 8005e86:	d036      	beq.n	8005ef6 <scalbn+0x86>
 8005e88:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <scalbn+0x100>)
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	ee10 0a10 	vmov	r0, s0
 8005e90:	2200      	movs	r2, #0
 8005e92:	f7fa fb71 	bl	8000578 <__aeabi_dmul>
 8005e96:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <scalbn+0x104>)
 8005e98:	429e      	cmp	r6, r3
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	460d      	mov	r5, r1
 8005e9e:	da10      	bge.n	8005ec2 <scalbn+0x52>
 8005ea0:	a32b      	add	r3, pc, #172	; (adr r3, 8005f50 <scalbn+0xe0>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	e03a      	b.n	8005f1e <scalbn+0xae>
 8005ea8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005eac:	428a      	cmp	r2, r1
 8005eae:	d10c      	bne.n	8005eca <scalbn+0x5a>
 8005eb0:	ee10 2a10 	vmov	r2, s0
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	f7fa f9a8 	bl	800020c <__adddf3>
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	460d      	mov	r5, r1
 8005ec0:	e019      	b.n	8005ef6 <scalbn+0x86>
 8005ec2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	3a36      	subs	r2, #54	; 0x36
 8005eca:	4432      	add	r2, r6
 8005ecc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005ed0:	428a      	cmp	r2, r1
 8005ed2:	dd08      	ble.n	8005ee6 <scalbn+0x76>
 8005ed4:	2d00      	cmp	r5, #0
 8005ed6:	a120      	add	r1, pc, #128	; (adr r1, 8005f58 <scalbn+0xe8>)
 8005ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005edc:	da1c      	bge.n	8005f18 <scalbn+0xa8>
 8005ede:	a120      	add	r1, pc, #128	; (adr r1, 8005f60 <scalbn+0xf0>)
 8005ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ee4:	e018      	b.n	8005f18 <scalbn+0xa8>
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	dd08      	ble.n	8005efc <scalbn+0x8c>
 8005eea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005eee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ef2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ef6:	ec45 4b10 	vmov	d0, r4, r5
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
 8005efc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005f00:	da19      	bge.n	8005f36 <scalbn+0xc6>
 8005f02:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005f06:	429e      	cmp	r6, r3
 8005f08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005f0c:	dd0a      	ble.n	8005f24 <scalbn+0xb4>
 8005f0e:	a112      	add	r1, pc, #72	; (adr r1, 8005f58 <scalbn+0xe8>)
 8005f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e2      	bne.n	8005ede <scalbn+0x6e>
 8005f18:	a30f      	add	r3, pc, #60	; (adr r3, 8005f58 <scalbn+0xe8>)
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	f7fa fb2b 	bl	8000578 <__aeabi_dmul>
 8005f22:	e7cb      	b.n	8005ebc <scalbn+0x4c>
 8005f24:	a10a      	add	r1, pc, #40	; (adr r1, 8005f50 <scalbn+0xe0>)
 8005f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0b8      	beq.n	8005ea0 <scalbn+0x30>
 8005f2e:	a10e      	add	r1, pc, #56	; (adr r1, 8005f68 <scalbn+0xf8>)
 8005f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f34:	e7b4      	b.n	8005ea0 <scalbn+0x30>
 8005f36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f3a:	3236      	adds	r2, #54	; 0x36
 8005f3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005f44:	4620      	mov	r0, r4
 8005f46:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <scalbn+0x108>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	e7e8      	b.n	8005f1e <scalbn+0xae>
 8005f4c:	f3af 8000 	nop.w
 8005f50:	c2f8f359 	.word	0xc2f8f359
 8005f54:	01a56e1f 	.word	0x01a56e1f
 8005f58:	8800759c 	.word	0x8800759c
 8005f5c:	7e37e43c 	.word	0x7e37e43c
 8005f60:	8800759c 	.word	0x8800759c
 8005f64:	fe37e43c 	.word	0xfe37e43c
 8005f68:	c2f8f359 	.word	0xc2f8f359
 8005f6c:	81a56e1f 	.word	0x81a56e1f
 8005f70:	43500000 	.word	0x43500000
 8005f74:	ffff3cb0 	.word	0xffff3cb0
 8005f78:	3c900000 	.word	0x3c900000

08005f7c <__errno>:
 8005f7c:	4b01      	ldr	r3, [pc, #4]	; (8005f84 <__errno+0x8>)
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	2000000c 	.word	0x2000000c

08005f88 <__libc_init_array>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	4d0d      	ldr	r5, [pc, #52]	; (8005fc0 <__libc_init_array+0x38>)
 8005f8c:	4c0d      	ldr	r4, [pc, #52]	; (8005fc4 <__libc_init_array+0x3c>)
 8005f8e:	1b64      	subs	r4, r4, r5
 8005f90:	10a4      	asrs	r4, r4, #2
 8005f92:	2600      	movs	r6, #0
 8005f94:	42a6      	cmp	r6, r4
 8005f96:	d109      	bne.n	8005fac <__libc_init_array+0x24>
 8005f98:	4d0b      	ldr	r5, [pc, #44]	; (8005fc8 <__libc_init_array+0x40>)
 8005f9a:	4c0c      	ldr	r4, [pc, #48]	; (8005fcc <__libc_init_array+0x44>)
 8005f9c:	f000 f820 	bl	8005fe0 <_init>
 8005fa0:	1b64      	subs	r4, r4, r5
 8005fa2:	10a4      	asrs	r4, r4, #2
 8005fa4:	2600      	movs	r6, #0
 8005fa6:	42a6      	cmp	r6, r4
 8005fa8:	d105      	bne.n	8005fb6 <__libc_init_array+0x2e>
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb0:	4798      	blx	r3
 8005fb2:	3601      	adds	r6, #1
 8005fb4:	e7ee      	b.n	8005f94 <__libc_init_array+0xc>
 8005fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fba:	4798      	blx	r3
 8005fbc:	3601      	adds	r6, #1
 8005fbe:	e7f2      	b.n	8005fa6 <__libc_init_array+0x1e>
 8005fc0:	08006070 	.word	0x08006070
 8005fc4:	08006070 	.word	0x08006070
 8005fc8:	08006070 	.word	0x08006070
 8005fcc:	08006074 	.word	0x08006074

08005fd0 <memset>:
 8005fd0:	4402      	add	r2, r0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d100      	bne.n	8005fda <memset+0xa>
 8005fd8:	4770      	bx	lr
 8005fda:	f803 1b01 	strb.w	r1, [r3], #1
 8005fde:	e7f9      	b.n	8005fd4 <memset+0x4>

08005fe0 <_init>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	bf00      	nop
 8005fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe6:	bc08      	pop	{r3}
 8005fe8:	469e      	mov	lr, r3
 8005fea:	4770      	bx	lr

08005fec <_fini>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr

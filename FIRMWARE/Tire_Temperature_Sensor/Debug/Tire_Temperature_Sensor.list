
Tire_Temperature_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a04  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c08  08003c08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c08  08003c08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c08  08003c08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08003c1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08003c1c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e89d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002484  00000000  00000000  0002e8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00030d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  000319c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e21c  00000000  00000000  00032508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8be  00000000  00000000  00060724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b7a9  00000000  00000000  0006ffe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017b78b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003164  00000000  00000000  0017b7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003ba8 	.word	0x08003ba8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003ba8 	.word	0x08003ba8

080001fc <_Z15MLX90621_DumpEEPh>:
void ExtractAlphaParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);
void ExtractOffsetParameters(uint8_t *eeData, paramsMLX90621 *mlx90621);


int MLX90621_DumpEE(uint8_t *eeData)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
     return MLX90621_I2CReadEEPROM(0x50, 0, 256, eeData);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800020a:	2100      	movs	r1, #0
 800020c:	2050      	movs	r0, #80	; 0x50
 800020e:	f000 f837 	bl	8000280 <_Z22MLX90621_I2CReadEEPROMhhtPh>
 8000212:	4603      	mov	r3, r0
}
 8000214:	4618      	mov	r0, r3
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <_Z18MLX90621_ConfigurePh>:
       
    return error;    
}

int MLX90621_Configure(uint8_t *eeData)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    int error = 1;
 8000224:	2301      	movs	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
    uint16_t value;
    
    error = MLX90621_I2CWrite(0x60, 0x04, 0xAA, eeData[247]);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	33f7      	adds	r3, #247	; 0xf7
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	b29b      	uxth	r3, r3
 8000230:	22aa      	movs	r2, #170	; 0xaa
 8000232:	2104      	movs	r1, #4
 8000234:	2060      	movs	r0, #96	; 0x60
 8000236:	f000 f953 	bl	80004e0 <_Z17MLX90621_I2CWritehhht>
 800023a:	60f8      	str	r0, [r7, #12]
    
    if (error != 0)
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <_Z18MLX90621_ConfigurePh+0x2a>
    {
        return error;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	e017      	b.n	8000276 <_Z18MLX90621_ConfigurePh+0x5a>
    }
    
    value = 256*eeData[246] + eeData[245];      
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	33f6      	adds	r3, #246	; 0xf6
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	021b      	lsls	r3, r3, #8
 8000250:	b29a      	uxth	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	33f5      	adds	r3, #245	; 0xf5
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	b29b      	uxth	r3, r3
 800025a:	4413      	add	r3, r2
 800025c:	817b      	strh	r3, [r7, #10]
    value = value | 0x0400;
 800025e:	897b      	ldrh	r3, [r7, #10]
 8000260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000264:	817b      	strh	r3, [r7, #10]
    error = MLX90621_I2CWrite(0x60, 0x03, 0x55, value);
 8000266:	897b      	ldrh	r3, [r7, #10]
 8000268:	2255      	movs	r2, #85	; 0x55
 800026a:	2103      	movs	r1, #3
 800026c:	2060      	movs	r0, #96	; 0x60
 800026e:	f000 f937 	bl	80004e0 <_Z17MLX90621_I2CWritehhht>
 8000272:	60f8      	str	r0, [r7, #12]
    
    return error;      
 8000274:	68fb      	ldr	r3, [r7, #12]
    
}   
 8000276:	4618      	mov	r0, r3
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <_Z22MLX90621_I2CReadEEPROMhhtPh>:
	//initialization generated by the .ioc
	//MX_I2C2_Init();
}

int MLX90621_I2CReadEEPROM(uint8_t slaveAddr, uint8_t startAddress, uint16_t nMemAddressRead, uint8_t *data)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b0cb      	sub	sp, #300	; 0x12c
 8000284:	af04      	add	r7, sp, #16
 8000286:	4604      	mov	r4, r0
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000290:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000294:	6013      	str	r3, [r2, #0]
 8000296:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800029a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800029e:	4622      	mov	r2, r4
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002a6:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80002aa:	4602      	mov	r2, r0
 80002ac:	701a      	strb	r2, [r3, #0]
 80002ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80002b6:	460a      	mov	r2, r1
 80002b8:	801a      	strh	r2, [r3, #0]

    uint8_t sa;                           
    int ack = 0;                               
 80002ba:	2300      	movs	r3, #0
 80002bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int cnt = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    uint8_t cmd = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    uint8_t i2cData[256] = {0};
 80002cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	3304      	adds	r3, #4
 80002da:	22fc      	movs	r2, #252	; 0xfc
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f003 fc5a 	bl	8003b98 <memset>
    uint8_t *p;
    
    p = data;
 80002e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    sa = (slaveAddr << 1);
 80002f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002f6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    cmd = startAddress;
 8000302:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000306:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    
    if(HAL_I2C_Mem_Read(&hi2c2, sa, cmd, 1, i2cData, nMemAddressRead, 100) != HAL_OK)
 8000310:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8000314:	b299      	uxth	r1, r3
 8000316:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800031a:	b29a      	uxth	r2, r3
 800031c:	2364      	movs	r3, #100	; 0x64
 800031e:	9302      	str	r3, [sp, #8]
 8000320:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000324:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	f107 0308 	add.w	r3, r7, #8
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2301      	movs	r3, #1
 8000334:	481a      	ldr	r0, [pc, #104]	; (80003a0 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x120>)
 8000336:	f001 fa77 	bl	8001828 <HAL_I2C_Mem_Read>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	bf14      	ite	ne
 8000340:	2301      	movne	r3, #1
 8000342:	2300      	moveq	r3, #0
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <_Z22MLX90621_I2CReadEEPROMhhtPh+0xd0>
    {
    	return -1;
 800034a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800034e:	e021      	b.n	8000394 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x114>
    }          

    i2c.stop();   
    */
    
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8000350:	2300      	movs	r3, #0
 8000352:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000356:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800035a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000364:	429a      	cmp	r2, r3
 8000366:	da14      	bge.n	8000392 <_Z22MLX90621_I2CReadEEPROMhhtPh+0x112>
    {
        *p++ = i2cData[cnt];
 8000368:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800036c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000374:	4413      	add	r3, r2
 8000376:	7819      	ldrb	r1, [r3, #0]
 8000378:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800037c:	1c5a      	adds	r2, r3, #1
 800037e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8000382:	460a      	mov	r2, r1
 8000384:	701a      	strb	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8000386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800038a:	3301      	adds	r3, #1
 800038c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000390:	e7e1      	b.n	8000356 <_Z22MLX90621_I2CReadEEPROMhhtPh+0xd6>
    }
    

    return 0;
 8000392:	2300      	movs	r3, #0
} 
 8000394:	4618      	mov	r0, r3
 8000396:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800039a:	46bd      	mov	sp, r7
 800039c:	bd90      	pop	{r4, r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000054 	.word	0x20000054

080003a4 <_Z16MLX90621_I2CReadhhhhhPt>:

int MLX90621_I2CRead(uint8_t slaveAddr,uint8_t command, uint8_t startAddress, uint8_t addressStep, uint8_t nMemAddressRead, uint16_t *data)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b0ad      	sub	sp, #180	; 0xb4
 80003a8:	af02      	add	r7, sp, #8
 80003aa:	4604      	mov	r4, r0
 80003ac:	4608      	mov	r0, r1
 80003ae:	4611      	mov	r1, r2
 80003b0:	461a      	mov	r2, r3
 80003b2:	4623      	mov	r3, r4
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	4603      	mov	r3, r0
 80003b8:	71bb      	strb	r3, [r7, #6]
 80003ba:	460b      	mov	r3, r1
 80003bc:	717b      	strb	r3, [r7, #5]
 80003be:	4613      	mov	r3, r2
 80003c0:	713b      	strb	r3, [r7, #4]
    uint8_t sa;                           
    int ack = 0;                               
 80003c2:	2300      	movs	r3, #0
 80003c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    int cnt = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    int i = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint8_t cmd[4] = {0,0,0,0};
 80003d4:	2300      	movs	r3, #0
 80003d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint8_t i2cData[132] = {0};
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2280      	movs	r2, #128	; 0x80
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f003 fbd6 	bl	8003b98 <memset>
    uint16_t *p;
    
    p = data;
 80003ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80003f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    sa = (slaveAddr << 1);
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    cmd[0] = command;
 80003fc:	79bb      	ldrb	r3, [r7, #6]
 80003fe:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
    cmd[1] = startAddress;
 8000402:	797b      	ldrb	r3, [r7, #5]
 8000404:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
    cmd[2] = addressStep;
 8000408:	793b      	ldrb	r3, [r7, #4]
 800040a:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    cmd[3] = nMemAddressRead;
 800040e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000412:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    
    if(HAL_I2C_Master_Transmit(&hi2c2, sa, cmd, 4, 100) != HAL_OK)
 8000416:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800041a:	b299      	uxth	r1, r3
 800041c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000420:	2364      	movs	r3, #100	; 0x64
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2304      	movs	r3, #4
 8000426:	482d      	ldr	r0, [pc, #180]	; (80004dc <_Z16MLX90621_I2CReadhhhhhPt+0x138>)
 8000428:	f001 f814 	bl	8001454 <HAL_I2C_Master_Transmit>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	bf14      	ite	ne
 8000432:	2301      	movne	r3, #1
 8000434:	2300      	moveq	r3, #0
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b00      	cmp	r3, #0
 800043a:	d002      	beq.n	8000442 <_Z16MLX90621_I2CReadhhhhhPt+0x9e>
    {
        return -1;
 800043c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000440:	e048      	b.n	80004d4 <_Z16MLX90621_I2CReadhhhhhPt+0x130>
    }

    if(HAL_I2C_Master_Receive(&hi2c2, sa, i2cData, 2*nMemAddressRead, 100) != HAL_OK)
 8000442:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000446:	b299      	uxth	r1, r3
 8000448:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800044c:	b29b      	uxth	r3, r3
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	b29b      	uxth	r3, r3
 8000452:	f107 020c 	add.w	r2, r7, #12
 8000456:	2064      	movs	r0, #100	; 0x64
 8000458:	9000      	str	r0, [sp, #0]
 800045a:	4820      	ldr	r0, [pc, #128]	; (80004dc <_Z16MLX90621_I2CReadhhhhhPt+0x138>)
 800045c:	f001 f8ee 	bl	800163c <HAL_I2C_Master_Receive>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	bf14      	ite	ne
 8000466:	2301      	movne	r3, #1
 8000468:	2300      	moveq	r3, #0
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	d002      	beq.n	8000476 <_Z16MLX90621_I2CReadhhhhhPt+0xd2>
    {
        return -1;
 8000470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000474:	e02e      	b.n	80004d4 <_Z16MLX90621_I2CReadhhhhhPt+0x130>
        return -1; 
    }          
    i2c.stop();
    */
    
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8000476:	2300      	movs	r3, #0
 8000478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800047c:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000480:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000484:	429a      	cmp	r2, r3
 8000486:	da24      	bge.n	80004d2 <_Z16MLX90621_I2CReadhhhhhPt+0x12e>
    {
        i = cnt << 1;
 8000488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        *p++ = (uint16_t)i2cData[i+1]*256 + (uint16_t)i2cData[i];
 8000492:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000496:	3301      	adds	r3, #1
 8000498:	33a8      	adds	r3, #168	; 0xa8
 800049a:	443b      	add	r3, r7
 800049c:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	021b      	lsls	r3, r3, #8
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	f107 010c 	add.w	r1, r7, #12
 80004aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80004ae:	440b      	add	r3, r1
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	4413      	add	r3, r2
 80004b6:	b299      	uxth	r1, r3
 80004b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80004bc:	1c9a      	adds	r2, r3, #2
 80004be:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80004c2:	460a      	mov	r2, r1
 80004c4:	801a      	strh	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 80004c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80004ca:	3301      	adds	r3, #1
 80004cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80004d0:	e7d4      	b.n	800047c <_Z16MLX90621_I2CReadhhhhhPt+0xd8>
    }
    



    return 0;   
 80004d2:	2300      	movs	r3, #0
} 
 80004d4:	4618      	mov	r0, r3
 80004d6:	37ac      	adds	r7, #172	; 0xac
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd90      	pop	{r4, r7, pc}
 80004dc:	20000054 	.word	0x20000054

080004e0 <_Z17MLX90621_I2CWritehhht>:
	//set via the .ioc
    //i2c.frequency(1000*freq);
}

int MLX90621_I2CWrite(uint8_t slaveAddr, uint8_t command, uint8_t checkValue, uint16_t data)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b089      	sub	sp, #36	; 0x24
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	4604      	mov	r4, r0
 80004e8:	4608      	mov	r0, r1
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	4623      	mov	r3, r4
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4603      	mov	r3, r0
 80004f4:	71bb      	strb	r3, [r7, #6]
 80004f6:	460b      	mov	r3, r1
 80004f8:	717b      	strb	r3, [r7, #5]
 80004fa:	4613      	mov	r3, r2
 80004fc:	807b      	strh	r3, [r7, #2]
    uint8_t sa;
    int ack = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
    uint8_t cmd[5] = {0,0,0,0,0};
 8000502:	4a26      	ldr	r2, [pc, #152]	; (800059c <_Z17MLX90621_I2CWritehhht+0xbc>)
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	e892 0003 	ldmia.w	r2, {r0, r1}
 800050c:	6018      	str	r0, [r3, #0]
 800050e:	3304      	adds	r3, #4
 8000510:	7019      	strb	r1, [r3, #0]
    static uint16_t dataCheck;
    

    sa = (slaveAddr << 1);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	74fb      	strb	r3, [r7, #19]
    cmd[0] = command;
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	733b      	strb	r3, [r7, #12]
    cmd[2] = data & 0x00FF;
 800051c:	887b      	ldrh	r3, [r7, #2]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	73bb      	strb	r3, [r7, #14]
    cmd[1] = cmd[2] - checkValue;
 8000522:	7bba      	ldrb	r2, [r7, #14]
 8000524:	797b      	ldrb	r3, [r7, #5]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	737b      	strb	r3, [r7, #13]
    cmd[4] = data >> 8;
 800052c:	887b      	ldrh	r3, [r7, #2]
 800052e:	0a1b      	lsrs	r3, r3, #8
 8000530:	b29b      	uxth	r3, r3
 8000532:	b2db      	uxtb	r3, r3
 8000534:	743b      	strb	r3, [r7, #16]
    cmd[3] = cmd[4] - checkValue;
 8000536:	7c3a      	ldrb	r2, [r7, #16]
 8000538:	797b      	ldrb	r3, [r7, #5]
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	b2db      	uxtb	r3, r3
 800053e:	73fb      	strb	r3, [r7, #15]

    if(HAL_I2C_Master_Transmit(&hi2c2, sa, cmd, 5, 100) != HAL_OK)
 8000540:	7cfb      	ldrb	r3, [r7, #19]
 8000542:	b299      	uxth	r1, r3
 8000544:	f107 020c 	add.w	r2, r7, #12
 8000548:	2364      	movs	r3, #100	; 0x64
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2305      	movs	r3, #5
 800054e:	4814      	ldr	r0, [pc, #80]	; (80005a0 <_Z17MLX90621_I2CWritehhht+0xc0>)
 8000550:	f000 ff80 	bl	8001454 <HAL_I2C_Master_Transmit>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf14      	ite	ne
 800055a:	2301      	movne	r3, #1
 800055c:	2300      	moveq	r3, #0
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <_Z17MLX90621_I2CWritehhht+0x8a>
    {
        return -1;
 8000564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000568:	e014      	b.n	8000594 <_Z17MLX90621_I2CWritehhht+0xb4>
    }         
    i2c.stop();   
    
    */

    	MLX90621_I2CRead(slaveAddr, 0x02, 0x8F+command, 0, 1, &dataCheck);
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	3b71      	subs	r3, #113	; 0x71
 800056e:	b2da      	uxtb	r2, r3
 8000570:	79f8      	ldrb	r0, [r7, #7]
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <_Z17MLX90621_I2CWritehhht+0xc4>)
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2301      	movs	r3, #1
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	2102      	movs	r1, #2
 800057e:	f7ff ff11 	bl	80003a4 <_Z16MLX90621_I2CReadhhhhhPt>
    
    if ( dataCheck != data)
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <_Z17MLX90621_I2CWritehhht+0xc4>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	887a      	ldrh	r2, [r7, #2]
 8000588:	429a      	cmp	r2, r3
 800058a:	d002      	beq.n	8000592 <_Z17MLX90621_I2CWritehhht+0xb2>
    {
        return -2;
 800058c:	f06f 0301 	mvn.w	r3, #1
 8000590:	e000      	b.n	8000594 <_Z17MLX90621_I2CWritehhht+0xb4>
    }    
    
    return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	371c      	adds	r7, #28
 8000598:	46bd      	mov	sp, r7
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	08003bc0 	.word	0x08003bc0
 80005a0:	20000054 	.word	0x20000054
 80005a4:	20000028 	.word	0x20000028

080005a8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_CAN1_Init+0x64>)
 80005ae:	4a18      	ldr	r2, [pc, #96]	; (8000610 <MX_CAN1_Init+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 80005b2:	4b16      	ldr	r3, [pc, #88]	; (800060c <MX_CAN1_Init+0x64>)
 80005b4:	2218      	movs	r2, #24
 80005b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_CAN1_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_CAN1_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_CAN1_Init+0x64>)
 80005c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_CAN1_Init+0x64>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_CAN1_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_CAN1_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_CAN1_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_CAN1_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_CAN1_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_CAN1_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_CAN1_Init+0x64>)
 80005f8:	f000 fb10 	bl	8000c1c <HAL_CAN_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000602:	f000 f9e3 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000002c 	.word	0x2000002c
 8000610:	40006400 	.word	0x40006400

08000614 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a18      	ldr	r2, [pc, #96]	; (8000694 <HAL_CAN_MspInit+0x80>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d129      	bne.n	800068a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_CAN_MspInit+0x84>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	4a17      	ldr	r2, [pc, #92]	; (8000698 <HAL_CAN_MspInit+0x84>)
 800063c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000640:	6593      	str	r3, [r2, #88]	; 0x58
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_CAN_MspInit+0x84>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_CAN_MspInit+0x84>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <HAL_CAN_MspInit+0x84>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <HAL_CAN_MspInit+0x84>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000666:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000678:	2309      	movs	r3, #9
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f000 fcab 	bl	8000fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40006400 	.word	0x40006400
 8000698:	40021000 	.word	0x40021000

0800069c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a36      	ldr	r2, [pc, #216]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006be:	4b34      	ldr	r3, [pc, #208]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a30      	ldr	r2, [pc, #192]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_GPIO_Init+0xf4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <MX_GPIO_Init+0xf4>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <MX_GPIO_Init+0xf4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_WAR2_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2144      	movs	r1, #68	; 0x44
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f000 fdf3 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WAR1_GPIO_Port, LED_WAR1_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2110      	movs	r1, #16
 8000722:	481c      	ldr	r0, [pc, #112]	; (8000794 <MX_GPIO_Init+0xf8>)
 8000724:	f000 fdee 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OK_GPIO_Port, LED_OK_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2101      	movs	r1, #1
 800072c:	481a      	ldr	r0, [pc, #104]	; (8000798 <MX_GPIO_Init+0xfc>)
 800072e:	f000 fde9 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_WAR2_Pin|LED_ERR_Pin;
 8000732:	2344      	movs	r3, #68	; 0x44
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f000 fc48 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WAR1_Pin;
 8000750:	2310      	movs	r3, #16
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_WAR1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0xf8>)
 8000768:	f000 fc3a 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OK_Pin;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OK_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_GPIO_Init+0xfc>)
 8000784:	f000 fc2c 	bl	8000fe0 <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	; 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	48000800 	.word	0x48000800
 8000798:	48000400 	.word	0x48000400

0800079c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C2_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C2_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x302027FF;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C2_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C2_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C2_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C2_Init+0x74>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C2_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_I2C2_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C2_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <MX_I2C2_Init+0x74>)
 80007d8:	f000 fdac 	bl	8001334 <HAL_I2C_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007e2:	f000 f8f3 	bl	80009cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <MX_I2C2_Init+0x74>)
 80007ea:	f001 fc03 	bl	8001ff4 <HAL_I2CEx_ConfigAnalogFilter>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 f8ea 	bl	80009cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_I2C2_Init+0x74>)
 80007fc:	f001 fc45 	bl	800208a <HAL_I2CEx_ConfigDigitalFilter>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 f8e1 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000054 	.word	0x20000054
 8000814:	40005800 	.word	0x40005800
 8000818:	302027ff 	.word	0x302027ff

0800081c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b0b0      	sub	sp, #192	; 0xc0
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2298      	movs	r2, #152	; 0x98
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f003 f9ab 	bl	8003b98 <memset>
  if(i2cHandle->Instance==I2C2)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a21      	ldr	r2, [pc, #132]	; (80008cc <HAL_I2C_MspInit+0xb0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d13b      	bne.n	80008c4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000850:	2300      	movs	r3, #0
 8000852:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4618      	mov	r0, r3
 800085a:	f002 fc25 	bl	80030a8 <HAL_RCCEx_PeriphCLKConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000864:	f000 f8b2 	bl	80009cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 800086e:	f043 0302 	orr.w	r3, r3, #2
 8000872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000880:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000888:	2312      	movs	r3, #18
 800088a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800089a:	2304      	movs	r3, #4
 800089c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008a4:	4619      	mov	r1, r3
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <HAL_I2C_MspInit+0xb8>)
 80008a8:	f000 fb9a 	bl	8000fe0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 80008ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 80008b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b6:	6593      	str	r3, [r2, #88]	; 0x58
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_I2C_MspInit+0xb4>)
 80008ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80008c4:	bf00      	nop
 80008c6:	37c0      	adds	r7, #192	; 0xc0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40005800 	.word	0x40005800
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000400 	.word	0x48000400

080008d8 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0c2      	sub	sp, #264	; 0x108
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008de:	f000 f904 	bl	8000aea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e2:	f000 f816 	bl	8000912 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e6:	f7ff fed9 	bl	800069c <MX_GPIO_Init>
  MX_CAN1_Init();
 80008ea:	f7ff fe5d 	bl	80005a8 <MX_CAN1_Init>
  MX_I2C2_Init();
 80008ee:	f7ff ff55 	bl	800079c <MX_I2C2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(5);
 80008f2:	2005      	movs	r0, #5
 80008f4:	f000 f96e 	bl	8000bd4 <HAL_Delay>
  int status;
  uint8_t eeData[256];

  status = MLX90621_DumpEE(eeData);
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fc7e 	bl	80001fc <_Z15MLX90621_DumpEEPh>
 8000900:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

  status = MLX90621_Configure(eeData);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc88 	bl	800021c <_Z18MLX90621_ConfigurePh>
 800090c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104


  while (1)
 8000910:	e7fe      	b.n	8000910 <main+0x38>

08000912 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b098      	sub	sp, #96	; 0x60
 8000916:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	2248      	movs	r2, #72	; 0x48
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f003 f939 	bl	8003b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000934:	2000      	movs	r0, #0
 8000936:	f001 fc15 	bl	8002164 <HAL_PWREx_ControlVoltageScaling>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	bf14      	ite	ne
 8000940:	2301      	movne	r3, #1
 8000942:	2300      	moveq	r3, #0
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 800094a:	f000 f83f 	bl	80009cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000958:	2302      	movs	r3, #2
 800095a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095c:	2303      	movs	r3, #3
 800095e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000964:	231e      	movs	r3, #30
 8000966:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000968:	2302      	movs	r3, #2
 800096a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0318 	add.w	r3, r7, #24
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fc97 	bl	80022ac <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf14      	ite	ne
 8000984:	2301      	movne	r3, #1
 8000986:	2300      	moveq	r3, #0
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 800098e:	f000 f81d 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	2303      	movs	r3, #3
 8000998:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2105      	movs	r1, #5
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 f8fa 	bl	8002ba4 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 80009c0:	f000 f804 	bl	80009cc <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	3760      	adds	r7, #96	; 0x60
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_MspInit+0x44>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_MspInit+0x44>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_MspInit+0x44>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x44>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x44>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6593      	str	r3, [r2, #88]	; 0x58
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f892 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a9c:	f7ff ffea 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <LoopForever+0xe>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	; (8000ae4 <LoopForever+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f003 f843 	bl	8003b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aca:	f7ff ff05 	bl	80008d8 <main>

08000ace <LoopForever>:

LoopForever:
    b LoopForever
 8000ace:	e7fe      	b.n	8000ace <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000adc:	08003c10 	.word	0x08003c10
  ldr r2, =_sbss
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae4:	200000ac 	.word	0x200000ac

08000ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_2_IRQHandler>

08000aea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 fa3f 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afa:	200f      	movs	r0, #15
 8000afc:	f000 f80e 	bl	8000b1c <HAL_InitTick>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	e001      	b.n	8000b10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b0c:	f7ff ff64 	bl	80009d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_InitTick+0x6c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d023      	beq.n	8000b78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_InitTick+0x70>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_InitTick+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fa3d 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10f      	bne.n	8000b72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d809      	bhi.n	8000b6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b60:	f000 fa15 	bl	8000f8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_InitTick+0x74>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e007      	b.n	8000b7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e004      	b.n	8000b7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e001      	b.n	8000b7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	200000a8 	.word	0x200000a8

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200000a8 	.word	0x200000a8

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff ffee 	bl	8000bbc <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_Delay+0x44>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffde 	bl	8000bbc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008

08000c1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d101      	bne.n	8000c2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e0ed      	b.n	8000e0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fcea 	bl	8000614 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f042 0201 	orr.w	r2, r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c50:	f7ff ffb4 	bl	8000bbc <HAL_GetTick>
 8000c54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c56:	e012      	b.n	8000c7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c58:	f7ff ffb0 	bl	8000bbc <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b0a      	cmp	r3, #10
 8000c64:	d90b      	bls.n	8000c7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2205      	movs	r2, #5
 8000c76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e0c5      	b.n	8000e0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0e5      	beq.n	8000c58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 0202 	bic.w	r2, r2, #2
 8000c9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c9c:	f7ff ff8e 	bl	8000bbc <HAL_GetTick>
 8000ca0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ca2:	e012      	b.n	8000cca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca4:	f7ff ff8a 	bl	8000bbc <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b0a      	cmp	r3, #10
 8000cb0:	d90b      	bls.n	8000cca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2205      	movs	r2, #5
 8000cc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e09f      	b.n	8000e0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1e5      	bne.n	8000ca4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7e1b      	ldrb	r3, [r3, #24]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d108      	bne.n	8000cf2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	e007      	b.n	8000d02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7e5b      	ldrb	r3, [r3, #25]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d108      	bne.n	8000d1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e007      	b.n	8000d2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7e9b      	ldrb	r3, [r3, #26]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d108      	bne.n	8000d46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 0220 	orr.w	r2, r2, #32
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e007      	b.n	8000d56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0220 	bic.w	r2, r2, #32
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7edb      	ldrb	r3, [r3, #27]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d108      	bne.n	8000d70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0210 	bic.w	r2, r2, #16
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e007      	b.n	8000d80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0210 	orr.w	r2, r2, #16
 8000d7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7f1b      	ldrb	r3, [r3, #28]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d108      	bne.n	8000d9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f042 0208 	orr.w	r2, r2, #8
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	e007      	b.n	8000daa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0208 	bic.w	r2, r2, #8
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7f5b      	ldrb	r3, [r3, #29]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d108      	bne.n	8000dc4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 0204 	orr.w	r2, r2, #4
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e007      	b.n	8000dd4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 0204 	bic.w	r2, r2, #4
 8000dd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	ea42 0103 	orr.w	r1, r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	1e5a      	subs	r2, r3, #1
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff47 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff5c 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ff8e 	bl	8000ecc <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff5d 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffb0 	bl	8000f34 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e166      	b.n	80012be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8158 	beq.w	80012b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 0201 	and.w	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	6939      	ldr	r1, [r7, #16]
 800110e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0203 	and.w	r2, r3, #3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80b2 	beq.w	80012b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b61      	ldr	r3, [pc, #388]	; (80012dc <HAL_GPIO_Init+0x2fc>)
 8001156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001158:	4a60      	ldr	r2, [pc, #384]	; (80012dc <HAL_GPIO_Init+0x2fc>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6613      	str	r3, [r2, #96]	; 0x60
 8001160:	4b5e      	ldr	r3, [pc, #376]	; (80012dc <HAL_GPIO_Init+0x2fc>)
 8001162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116c:	4a5c      	ldr	r2, [pc, #368]	; (80012e0 <HAL_GPIO_Init+0x300>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001196:	d02b      	beq.n	80011f0 <HAL_GPIO_Init+0x210>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x304>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d025      	beq.n	80011ec <HAL_GPIO_Init+0x20c>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_GPIO_Init+0x308>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d01f      	beq.n	80011e8 <HAL_GPIO_Init+0x208>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a50      	ldr	r2, [pc, #320]	; (80012ec <HAL_GPIO_Init+0x30c>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d019      	beq.n	80011e4 <HAL_GPIO_Init+0x204>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_GPIO_Init+0x310>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d013      	beq.n	80011e0 <HAL_GPIO_Init+0x200>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <HAL_GPIO_Init+0x314>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d00d      	beq.n	80011dc <HAL_GPIO_Init+0x1fc>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4d      	ldr	r2, [pc, #308]	; (80012f8 <HAL_GPIO_Init+0x318>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_Init+0x1f8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a4c      	ldr	r2, [pc, #304]	; (80012fc <HAL_GPIO_Init+0x31c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d101      	bne.n	80011d4 <HAL_GPIO_Init+0x1f4>
 80011d0:	2307      	movs	r3, #7
 80011d2:	e00e      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011d4:	2308      	movs	r3, #8
 80011d6:	e00c      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011d8:	2306      	movs	r3, #6
 80011da:	e00a      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011dc:	2305      	movs	r3, #5
 80011de:	e008      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011e0:	2304      	movs	r3, #4
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011e4:	2303      	movs	r3, #3
 80011e6:	e004      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011f0:	2300      	movs	r3, #0
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	f002 0203 	and.w	r2, r2, #3
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	4093      	lsls	r3, r2
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001202:	4937      	ldr	r1, [pc, #220]	; (80012e0 <HAL_GPIO_Init+0x300>)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001210:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_GPIO_Init+0x320>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001234:	4a32      	ldr	r2, [pc, #200]	; (8001300 <HAL_GPIO_Init+0x320>)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <HAL_GPIO_Init+0x320>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800125e:	4a28      	ldr	r2, [pc, #160]	; (8001300 <HAL_GPIO_Init+0x320>)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x320>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001288:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_GPIO_Init+0x320>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_GPIO_Init+0x320>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <HAL_GPIO_Init+0x320>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f47f ae91 	bne.w	8000ff0 <HAL_GPIO_Init+0x10>
  }
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	48000800 	.word	0x48000800
 80012ec:	48000c00 	.word	0x48000c00
 80012f0:	48001000 	.word	0x48001000
 80012f4:	48001400 	.word	0x48001400
 80012f8:	48001800 	.word	0x48001800
 80012fc:	48001c00 	.word	0x48001c00
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001320:	e002      	b.n	8001328 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e081      	b.n	800144a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fa5e 	bl	800081c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2224      	movs	r2, #36	; 0x24
 8001364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001384:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001394:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d107      	bne.n	80013ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	e006      	b.n	80013bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d104      	bne.n	80013ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69d9      	ldr	r1, [r3, #28]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0201 	orr.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2220      	movs	r2, #32
 8001436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	461a      	mov	r2, r3
 8001460:	460b      	mov	r3, r1
 8001462:	817b      	strh	r3, [r7, #10]
 8001464:	4613      	mov	r3, r2
 8001466:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b20      	cmp	r3, #32
 8001472:	f040 80da 	bne.w	800162a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_I2C_Master_Transmit+0x30>
 8001480:	2302      	movs	r3, #2
 8001482:	e0d3      	b.n	800162c <HAL_I2C_Master_Transmit+0x1d8>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800148c:	f7ff fb96 	bl	8000bbc <HAL_GetTick>
 8001490:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2319      	movs	r3, #25
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 fb54 	bl	8001b4c <I2C_WaitOnFlagUntilTimeout>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0be      	b.n	800162c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2221      	movs	r2, #33	; 0x21
 80014b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2210      	movs	r2, #16
 80014ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	893a      	ldrh	r2, [r7, #8]
 80014ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014da:	b29b      	uxth	r3, r3
 80014dc:	2bff      	cmp	r3, #255	; 0xff
 80014de:	d90e      	bls.n	80014fe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	22ff      	movs	r2, #255	; 0xff
 80014e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	8979      	ldrh	r1, [r7, #10]
 80014ee:	4b51      	ldr	r3, [pc, #324]	; (8001634 <HAL_I2C_Master_Transmit+0x1e0>)
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 fd4a 	bl	8001f90 <I2C_TransferConfig>
 80014fc:	e06c      	b.n	80015d8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150c:	b2da      	uxtb	r2, r3
 800150e:	8979      	ldrh	r1, [r7, #10]
 8001510:	4b48      	ldr	r3, [pc, #288]	; (8001634 <HAL_I2C_Master_Transmit+0x1e0>)
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 fd39 	bl	8001f90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800151e:	e05b      	b.n	80015d8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	6a39      	ldr	r1, [r7, #32]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 fb51 	bl	8001bcc <I2C_WaitOnTXISFlagUntilTimeout>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e07b      	b.n	800162c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001568:	b29b      	uxth	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d034      	beq.n	80015d8 <HAL_I2C_Master_Transmit+0x184>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001572:	2b00      	cmp	r3, #0
 8001574:	d130      	bne.n	80015d8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	2200      	movs	r2, #0
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 fae3 	bl	8001b4c <I2C_WaitOnFlagUntilTimeout>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e04d      	b.n	800162c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001594:	b29b      	uxth	r3, r3
 8001596:	2bff      	cmp	r3, #255	; 0xff
 8001598:	d90e      	bls.n	80015b8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	22ff      	movs	r2, #255	; 0xff
 800159e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	8979      	ldrh	r1, [r7, #10]
 80015a8:	2300      	movs	r3, #0
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 fced 	bl	8001f90 <I2C_TransferConfig>
 80015b6:	e00f      	b.n	80015d8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	8979      	ldrh	r1, [r7, #10]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 fcdc 	bl	8001f90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015dc:	b29b      	uxth	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d19e      	bne.n	8001520 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	6a39      	ldr	r1, [r7, #32]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 fb30 	bl	8001c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e01a      	b.n	800162c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2220      	movs	r2, #32
 80015fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_I2C_Master_Transmit+0x1e4>)
 800160a:	400b      	ands	r3, r1
 800160c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2220      	movs	r2, #32
 8001612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800162a:	2302      	movs	r3, #2
  }
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	80002000 	.word	0x80002000
 8001638:	fe00e800 	.word	0xfe00e800

0800163c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	461a      	mov	r2, r3
 8001648:	460b      	mov	r3, r1
 800164a:	817b      	strh	r3, [r7, #10]
 800164c:	4613      	mov	r3, r2
 800164e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b20      	cmp	r3, #32
 800165a:	f040 80db 	bne.w	8001814 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_I2C_Master_Receive+0x30>
 8001668:	2302      	movs	r3, #2
 800166a:	e0d4      	b.n	8001816 <HAL_I2C_Master_Receive+0x1da>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001674:	f7ff faa2 	bl	8000bbc <HAL_GetTick>
 8001678:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2319      	movs	r3, #25
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f000 fa60 	bl	8001b4c <I2C_WaitOnFlagUntilTimeout>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0bf      	b.n	8001816 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2222      	movs	r2, #34	; 0x22
 800169a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2210      	movs	r2, #16
 80016a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	893a      	ldrh	r2, [r7, #8]
 80016b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	2bff      	cmp	r3, #255	; 0xff
 80016c6:	d90e      	bls.n	80016e6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	22ff      	movs	r2, #255	; 0xff
 80016cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	8979      	ldrh	r1, [r7, #10]
 80016d6:	4b52      	ldr	r3, [pc, #328]	; (8001820 <HAL_I2C_Master_Receive+0x1e4>)
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 fc56 	bl	8001f90 <I2C_TransferConfig>
 80016e4:	e06d      	b.n	80017c2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	8979      	ldrh	r1, [r7, #10]
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <HAL_I2C_Master_Receive+0x1e4>)
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 fc45 	bl	8001f90 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001706:	e05c      	b.n	80017c2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	6a39      	ldr	r1, [r7, #32]
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 fad9 	bl	8001cc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e07c      	b.n	8001816 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001738:	3b01      	subs	r3, #1
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d034      	beq.n	80017c2 <HAL_I2C_Master_Receive+0x186>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	2b00      	cmp	r3, #0
 800175e:	d130      	bne.n	80017c2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	2200      	movs	r2, #0
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f9ee 	bl	8001b4c <I2C_WaitOnFlagUntilTimeout>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e04d      	b.n	8001816 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	2bff      	cmp	r3, #255	; 0xff
 8001782:	d90e      	bls.n	80017a2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	22ff      	movs	r2, #255	; 0xff
 8001788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	b2da      	uxtb	r2, r3
 8001790:	8979      	ldrh	r1, [r7, #10]
 8001792:	2300      	movs	r3, #0
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 fbf8 	bl	8001f90 <I2C_TransferConfig>
 80017a0:	e00f      	b.n	80017c2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	8979      	ldrh	r1, [r7, #10]
 80017b4:	2300      	movs	r3, #0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fbe7 	bl	8001f90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d19d      	bne.n	8001708 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	6a39      	ldr	r1, [r7, #32]
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 fa3b 	bl	8001c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e01a      	b.n	8001816 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2220      	movs	r2, #32
 80017e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6859      	ldr	r1, [r3, #4]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_I2C_Master_Receive+0x1e8>)
 80017f4:	400b      	ands	r3, r1
 80017f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2220      	movs	r2, #32
 80017fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	e000      	b.n	8001816 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001814:	2302      	movs	r3, #2
  }
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	80002400 	.word	0x80002400
 8001824:	fe00e800 	.word	0xfe00e800

08001828 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af02      	add	r7, sp, #8
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	461a      	mov	r2, r3
 8001836:	4603      	mov	r3, r0
 8001838:	817b      	strh	r3, [r7, #10]
 800183a:	460b      	mov	r3, r1
 800183c:	813b      	strh	r3, [r7, #8]
 800183e:	4613      	mov	r3, r2
 8001840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b20      	cmp	r3, #32
 800184c:	f040 80fd 	bne.w	8001a4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HAL_I2C_Mem_Read+0x34>
 8001856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001862:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0f1      	b.n	8001a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_I2C_Mem_Read+0x4e>
 8001872:	2302      	movs	r3, #2
 8001874:	e0ea      	b.n	8001a4c <HAL_I2C_Mem_Read+0x224>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800187e:	f7ff f99d 	bl	8000bbc <HAL_GetTick>
 8001882:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2319      	movs	r3, #25
 800188a:	2201      	movs	r2, #1
 800188c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f95b 	bl	8001b4c <I2C_WaitOnFlagUntilTimeout>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0d5      	b.n	8001a4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2222      	movs	r2, #34	; 0x22
 80018a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2240      	movs	r2, #64	; 0x40
 80018ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a3a      	ldr	r2, [r7, #32]
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018c8:	88f8      	ldrh	r0, [r7, #6]
 80018ca:	893a      	ldrh	r2, [r7, #8]
 80018cc:	8979      	ldrh	r1, [r7, #10]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	4603      	mov	r3, r0
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f8bf 	bl	8001a5c <I2C_RequestMemoryRead>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0ad      	b.n	8001a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d90e      	bls.n	8001918 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	22ff      	movs	r2, #255	; 0xff
 80018fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001904:	b2da      	uxtb	r2, r3
 8001906:	8979      	ldrh	r1, [r7, #10]
 8001908:	4b52      	ldr	r3, [pc, #328]	; (8001a54 <HAL_I2C_Mem_Read+0x22c>)
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 fb3d 	bl	8001f90 <I2C_TransferConfig>
 8001916:	e00f      	b.n	8001938 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001926:	b2da      	uxtb	r2, r3
 8001928:	8979      	ldrh	r1, [r7, #10]
 800192a:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <HAL_I2C_Mem_Read+0x22c>)
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 fb2c 	bl	8001f90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	2200      	movs	r2, #0
 8001940:	2104      	movs	r1, #4
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f902 	bl	8001b4c <I2C_WaitOnFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07c      	b.n	8001a4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197a:	b29b      	uxth	r3, r3
 800197c:	3b01      	subs	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001988:	b29b      	uxth	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d034      	beq.n	80019f8 <HAL_I2C_Mem_Read+0x1d0>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001992:	2b00      	cmp	r3, #0
 8001994:	d130      	bne.n	80019f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199c:	2200      	movs	r2, #0
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 f8d3 	bl	8001b4c <I2C_WaitOnFlagUntilTimeout>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e04d      	b.n	8001a4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2bff      	cmp	r3, #255	; 0xff
 80019b8:	d90e      	bls.n	80019d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	22ff      	movs	r2, #255	; 0xff
 80019be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	8979      	ldrh	r1, [r7, #10]
 80019c8:	2300      	movs	r3, #0
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 fadd 	bl	8001f90 <I2C_TransferConfig>
 80019d6:	e00f      	b.n	80019f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	8979      	ldrh	r1, [r7, #10]
 80019ea:	2300      	movs	r3, #0
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 facc 	bl	8001f90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d19a      	bne.n	8001938 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f920 	bl	8001c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e01a      	b.n	8001a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_I2C_Mem_Read+0x230>)
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2220      	movs	r2, #32
 8001a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a4a:	2302      	movs	r3, #2
  }
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	80002400 	.word	0x80002400
 8001a58:	fe00e800 	.word	0xfe00e800

08001a5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	4608      	mov	r0, r1
 8001a66:	4611      	mov	r1, r2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	817b      	strh	r3, [r7, #10]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	813b      	strh	r3, [r7, #8]
 8001a72:	4613      	mov	r3, r2
 8001a74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	8979      	ldrh	r1, [r7, #10]
 8001a7c:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <I2C_RequestMemoryRead+0xa4>)
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2300      	movs	r3, #0
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fa84 	bl	8001f90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	69b9      	ldr	r1, [r7, #24]
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f89d 	bl	8001bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e02c      	b.n	8001af6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d105      	bne.n	8001aae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aa2:	893b      	ldrh	r3, [r7, #8]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8001aac:	e015      	b.n	8001ada <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001aae:	893b      	ldrh	r3, [r7, #8]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f883 	bl	8001bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e012      	b.n	8001af6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ad0:	893b      	ldrh	r3, [r7, #8]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2140      	movs	r1, #64	; 0x40
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f831 	bl	8001b4c <I2C_WaitOnFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	80002000 	.word	0x80002000

08001b04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d103      	bne.n	8001b22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d007      	beq.n	8001b40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	619a      	str	r2, [r3, #24]
  }
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b5c:	e022      	b.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b64:	d01e      	beq.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b66:	f7ff f829 	bl	8000bbc <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d302      	bcc.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d113      	bne.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e00f      	b.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699a      	ldr	r2, [r3, #24]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	4013      	ands	r3, r2
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d0cd      	beq.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd8:	e02c      	b.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f8ea 	bl	8001db8 <I2C_IsErrorOccurred>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e02a      	b.n	8001c44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf4:	d01e      	beq.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf6:	f7fe ffe1 	bl	8000bbc <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d302      	bcc.n	8001c0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d113      	bne.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e007      	b.n	8001c44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d1cb      	bne.n	8001bda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c58:	e028      	b.n	8001cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f8aa 	bl	8001db8 <I2C_IsErrorOccurred>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e026      	b.n	8001cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6e:	f7fe ffa5 	bl	8000bbc <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d302      	bcc.n	8001c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d113      	bne.n	8001cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	f043 0220 	orr.w	r2, r3, #32
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e007      	b.n	8001cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d1cf      	bne.n	8001c5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cd0:	e064      	b.n	8001d9c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f86e 	bl	8001db8 <I2C_IsErrorOccurred>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e062      	b.n	8001dac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d138      	bne.n	8001d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d105      	bne.n	8001d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e04e      	b.n	8001dac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d107      	bne.n	8001d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2210      	movs	r2, #16
 8001d22:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2204      	movs	r2, #4
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
 8001d2a:	e002      	b.n	8001d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2220      	movs	r2, #32
 8001d38:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001d46:	400b      	ands	r3, r1
 8001d48:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e022      	b.n	8001dac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d66:	f7fe ff29 	bl	8000bbc <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d302      	bcc.n	8001d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10f      	bne.n	8001d9c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e007      	b.n	8001dac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d193      	bne.n	8001cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	fe00e800 	.word	0xfe00e800

08001db8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d075      	beq.n	8001ed0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2210      	movs	r2, #16
 8001dea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dec:	e056      	b.n	8001e9c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df4:	d052      	beq.n	8001e9c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001df6:	f7fe fee1 	bl	8000bbc <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d302      	bcc.n	8001e0c <I2C_IsErrorOccurred+0x54>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d147      	bne.n	8001e9c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e2e:	d12e      	bne.n	8001e8e <I2C_IsErrorOccurred+0xd6>
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e36:	d02a      	beq.n	8001e8e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001e38:	7cfb      	ldrb	r3, [r7, #19]
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d027      	beq.n	8001e8e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e4e:	f7fe feb5 	bl	8000bbc <HAL_GetTick>
 8001e52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e54:	e01b      	b.n	8001e8e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e56:	f7fe feb1 	bl	8000bbc <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b19      	cmp	r3, #25
 8001e62:	d914      	bls.n	8001e8e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	f043 0220 	orr.w	r2, r3, #32
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d1dc      	bne.n	8001e56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d003      	beq.n	8001eb2 <I2C_IsErrorOccurred+0xfa>
 8001eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d09d      	beq.n	8001dee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d103      	bne.n	8001ec2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00b      	beq.n	8001f1c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d01c      	beq.n	8001f80 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f7ff fddc 	bl	8001b04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6859      	ldr	r1, [r3, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <I2C_IsErrorOccurred+0x1d4>)
 8001f58:	400b      	ands	r3, r1
 8001f5a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	fe00e800 	.word	0xfe00e800

08001f90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	817b      	strh	r3, [r7, #10]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fa2:	897b      	ldrh	r3, [r7, #10]
 8001fa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fa8:	7a7b      	ldrb	r3, [r7, #9]
 8001faa:	041b      	lsls	r3, r3, #16
 8001fac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fb0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	0d5b      	lsrs	r3, r3, #21
 8001fca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <I2C_TransferConfig+0x60>)
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	ea02 0103 	and.w	r1, r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	03ff63ff 	.word	0x03ff63ff

08001ff4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b20      	cmp	r3, #32
 8002008:	d138      	bne.n	800207c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002014:	2302      	movs	r3, #2
 8002016:	e032      	b.n	800207e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	; 0x24
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002046:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6819      	ldr	r1, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b20      	cmp	r3, #32
 800209e:	d139      	bne.n	8002114 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e033      	b.n	8002116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2224      	movs	r2, #36	; 0x24
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <HAL_PWREx_GetVoltageRange+0x3c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002134:	d102      	bne.n	800213c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213a:	e00b      	b.n	8002154 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_PWREx_GetVoltageRange+0x3c>)
 800213e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800214a:	d102      	bne.n	8002152 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800214c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002150:	e000      	b.n	8002154 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002152:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40007000 	.word	0x40007000

08002164 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d141      	bne.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002172:	4b4b      	ldr	r3, [pc, #300]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217e:	d131      	bne.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002180:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002186:	4a46      	ldr	r2, [pc, #280]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800218c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002190:	4b43      	ldr	r3, [pc, #268]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002198:	4a41      	ldr	r2, [pc, #260]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80021a0:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2232      	movs	r2, #50	; 0x32
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	0c9b      	lsrs	r3, r3, #18
 80021b2:	3301      	adds	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b6:	e002      	b.n	80021be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021be:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	d102      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f2      	bne.n	80021b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021d2:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021de:	d158      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e057      	b.n	8002294 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021e4:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ea:	4a2d      	ldr	r2, [pc, #180]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021f4:	e04d      	b.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d141      	bne.n	8002282 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220a:	d131      	bne.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002218:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002224:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2232      	movs	r2, #50	; 0x32
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	0c9b      	lsrs	r3, r3, #18
 800223e:	3301      	adds	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002242:	e002      	b.n	800224a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3b01      	subs	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002256:	d102      	bne.n	800225e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f2      	bne.n	8002244 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226a:	d112      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e011      	b.n	8002294 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002280:	e007      	b.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002290:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40007000 	.word	0x40007000
 80022a4:	20000000 	.word	0x20000000
 80022a8:	431bde83 	.word	0x431bde83

080022ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f000 bc68 	b.w	8002b90 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c0:	4b97      	ldr	r3, [pc, #604]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ca:	4b95      	ldr	r3, [pc, #596]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80e6 	beq.w	80024ae <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4c>
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	f040 808d 	bne.w	800240a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	f040 8089 	bne.w	800240a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022f8:	4b89      	ldr	r3, [pc, #548]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_RCC_OscConfig+0x66>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	f000 bc3f 	b.w	8002b90 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002316:	4b82      	ldr	r3, [pc, #520]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HAL_RCC_OscConfig+0x80>
 8002322:	4b7f      	ldr	r3, [pc, #508]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800232a:	e005      	b.n	8002338 <HAL_RCC_OscConfig+0x8c>
 800232c:	4b7c      	ldr	r3, [pc, #496]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 800232e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002338:	4293      	cmp	r3, r2
 800233a:	d224      	bcs.n	8002386 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fdf3 	bl	8002f2c <RCC_SetFlashLatencyFromMSIRange>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	f000 bc1f 	b.w	8002b90 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002352:	4b73      	ldr	r3, [pc, #460]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a72      	ldr	r2, [pc, #456]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b70      	ldr	r3, [pc, #448]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	496d      	ldr	r1, [pc, #436]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002370:	4b6b      	ldr	r3, [pc, #428]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	4968      	ldr	r1, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
 8002384:	e025      	b.n	80023d2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002386:	4b66      	ldr	r3, [pc, #408]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a65      	ldr	r2, [pc, #404]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	4960      	ldr	r1, [pc, #384]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a4:	4b5e      	ldr	r3, [pc, #376]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	495b      	ldr	r1, [pc, #364]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fdb2 	bl	8002f2c <RCC_SetFlashLatencyFromMSIRange>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e3de      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023d2:	f000 fd21 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 80023d6:	4602      	mov	r2, r0
 80023d8:	4b51      	ldr	r3, [pc, #324]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	4950      	ldr	r1, [pc, #320]	; (8002524 <HAL_RCC_OscConfig+0x278>)
 80023e4:	5ccb      	ldrb	r3, [r1, r3]
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	4a4e      	ldr	r2, [pc, #312]	; (8002528 <HAL_RCC_OscConfig+0x27c>)
 80023f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023f2:	4b4e      	ldr	r3, [pc, #312]	; (800252c <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fb90 	bl	8000b1c <HAL_InitTick>
 80023fc:	4603      	mov	r3, r0
 80023fe:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d052      	beq.n	80024ac <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	e3c2      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d032      	beq.n	8002478 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a42      	ldr	r2, [pc, #264]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800241e:	f7fe fbcd 	bl	8000bbc <HAL_GetTick>
 8002422:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002426:	f7fe fbc9 	bl	8000bbc <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e3ab      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002444:	4b36      	ldr	r3, [pc, #216]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a35      	ldr	r2, [pc, #212]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 800244a:	f043 0308 	orr.w	r3, r3, #8
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b33      	ldr	r3, [pc, #204]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	4930      	ldr	r1, [pc, #192]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002462:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	492b      	ldr	r1, [pc, #172]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
 8002476:	e01a      	b.n	80024ae <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a28      	ldr	r2, [pc, #160]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002484:	f7fe fb9a 	bl	8000bbc <HAL_GetTick>
 8002488:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800248c:	f7fe fb96 	bl	8000bbc <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e378      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x1e0>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d073      	beq.n	80025a2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d005      	beq.n	80024cc <HAL_RCC_OscConfig+0x220>
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d10e      	bne.n	80024e4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d10b      	bne.n	80024e4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d063      	beq.n	80025a0 <HAL_RCC_OscConfig+0x2f4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d15f      	bne.n	80025a0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e355      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d106      	bne.n	80024fc <HAL_RCC_OscConfig+0x250>
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e025      	b.n	8002548 <HAL_RCC_OscConfig+0x29c>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002504:	d114      	bne.n	8002530 <HAL_RCC_OscConfig+0x284>
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 800250c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a02      	ldr	r2, [pc, #8]	; (8002520 <HAL_RCC_OscConfig+0x274>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e013      	b.n	8002548 <HAL_RCC_OscConfig+0x29c>
 8002520:	40021000 	.word	0x40021000
 8002524:	08003bc8 	.word	0x08003bc8
 8002528:	20000000 	.word	0x20000000
 800252c:	20000004 	.word	0x20000004
 8002530:	4b8f      	ldr	r3, [pc, #572]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a8e      	ldr	r2, [pc, #568]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b8c      	ldr	r3, [pc, #560]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a8b      	ldr	r2, [pc, #556]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fb34 	bl	8000bbc <HAL_GetTick>
 8002554:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fb30 	bl	8000bbc <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e312      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800256a:	4b81      	ldr	r3, [pc, #516]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x2ac>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fb20 	bl	8000bbc <HAL_GetTick>
 800257c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7fe fb1c 	bl	8000bbc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e2fe      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002592:	4b77      	ldr	r3, [pc, #476]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x2d4>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d060      	beq.n	8002670 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_OscConfig+0x314>
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d119      	bne.n	80025ee <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d116      	bne.n	80025ee <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c0:	4b6b      	ldr	r3, [pc, #428]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_OscConfig+0x32c>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e2db      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d8:	4b65      	ldr	r3, [pc, #404]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	4962      	ldr	r1, [pc, #392]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ec:	e040      	b.n	8002670 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d023      	beq.n	800263e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f6:	4b5e      	ldr	r3, [pc, #376]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a5d      	ldr	r2, [pc, #372]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe fadb 	bl	8000bbc <HAL_GetTick>
 8002606:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260a:	f7fe fad7 	bl	8000bbc <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e2b9      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261c:	4b54      	ldr	r3, [pc, #336]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b51      	ldr	r3, [pc, #324]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	494e      	ldr	r1, [pc, #312]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
 800263c:	e018      	b.n	8002670 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263e:	4b4c      	ldr	r3, [pc, #304]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a4b      	ldr	r2, [pc, #300]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fab7 	bl	8000bbc <HAL_GetTick>
 800264e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002652:	f7fe fab3 	bl	8000bbc <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e295      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002664:	4b42      	ldr	r3, [pc, #264]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8082 	beq.w	8002782 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d05f      	beq.n	8002746 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002686:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	429a      	cmp	r2, r3
 800269a:	d037      	beq.n	800270c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d006      	beq.n	80026b4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e26d      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01b      	beq.n	80026f6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80026be:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c4:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026ce:	f7fe fa75 	bl	8000bbc <HAL_GetTick>
 80026d2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d6:	f7fe fa71 	bl	8000bbc <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b11      	cmp	r3, #17
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e253      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1ef      	bne.n	80026d6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fc:	f023 0210 	bic.w	r2, r3, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	491a      	ldr	r1, [pc, #104]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800270e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002712:	4a17      	ldr	r2, [pc, #92]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7fe fa4e 	bl	8000bbc <HAL_GetTick>
 8002720:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002724:	f7fe fa4a 	bl	8000bbc <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b11      	cmp	r3, #17
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e22c      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ef      	beq.n	8002724 <HAL_RCC_OscConfig+0x478>
 8002744:	e01d      	b.n	8002782 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274c:	4a08      	ldr	r2, [pc, #32]	; (8002770 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002756:	f7fe fa31 	bl	8000bbc <HAL_GetTick>
 800275a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275e:	f7fe fa2d 	bl	8000bbc <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b11      	cmp	r3, #17
 800276a:	d903      	bls.n	8002774 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e20f      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
 8002770:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002774:	4b83      	ldr	r3, [pc, #524]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ed      	bne.n	800275e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80bd 	beq.w	800290a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002796:	4b7b      	ldr	r3, [pc, #492]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10e      	bne.n	80027c0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b78      	ldr	r3, [pc, #480]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	4a77      	ldr	r2, [pc, #476]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ac:	6593      	str	r3, [r2, #88]	; 0x58
 80027ae:	4b75      	ldr	r3, [pc, #468]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c0:	4b71      	ldr	r3, [pc, #452]	; (8002988 <HAL_RCC_OscConfig+0x6dc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d118      	bne.n	80027fe <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027cc:	4b6e      	ldr	r3, [pc, #440]	; (8002988 <HAL_RCC_OscConfig+0x6dc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6d      	ldr	r2, [pc, #436]	; (8002988 <HAL_RCC_OscConfig+0x6dc>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d8:	f7fe f9f0 	bl	8000bbc <HAL_GetTick>
 80027dc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e0:	f7fe f9ec 	bl	8000bbc <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1ce      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_RCC_OscConfig+0x6dc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d02c      	beq.n	8002864 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800280a:	4b5e      	ldr	r3, [pc, #376]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281c:	4959      	ldr	r1, [pc, #356]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d010      	beq.n	8002852 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002830:	4b54      	ldr	r3, [pc, #336]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002836:	4a53      	ldr	r2, [pc, #332]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	4a4f      	ldr	r2, [pc, #316]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002850:	e018      	b.n	8002884 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002852:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	4a4a      	ldr	r2, [pc, #296]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002862:	e00f      	b.n	8002884 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002864:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	4a46      	ldr	r2, [pc, #280]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002874:	4b43      	ldr	r3, [pc, #268]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	4a42      	ldr	r2, [pc, #264]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 800287c:	f023 0304 	bic.w	r3, r3, #4
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d016      	beq.n	80028ba <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7fe f996 	bl	8000bbc <HAL_GetTick>
 8002890:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7fe f992 	bl	8000bbc <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e172      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028aa:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ed      	beq.n	8002894 <HAL_RCC_OscConfig+0x5e8>
 80028b8:	e01d      	b.n	80028f6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe f97f 	bl	8000bbc <HAL_GetTick>
 80028be:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe f97b 	bl	8000bbc <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e15b      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d8:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ed      	bne.n	80028c2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80028e6:	4b27      	ldr	r3, [pc, #156]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	4a25      	ldr	r2, [pc, #148]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 80028ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4b21      	ldr	r3, [pc, #132]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	4a20      	ldr	r2, [pc, #128]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002908:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d041      	beq.n	800299a <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01c      	beq.n	8002958 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002924:	4a17      	ldr	r2, [pc, #92]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe f945 	bl	8000bbc <HAL_GetTick>
 8002932:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002936:	f7fe f941 	bl	8000bbc <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e123      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002948:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 800294a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ef      	beq.n	8002936 <HAL_RCC_OscConfig+0x68a>
 8002956:	e020      	b.n	800299a <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 800295a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800295e:	4a09      	ldr	r2, [pc, #36]	; (8002984 <HAL_RCC_OscConfig+0x6d8>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe f928 	bl	8000bbc <HAL_GetTick>
 800296c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800296e:	e00d      	b.n	800298c <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002970:	f7fe f924 	bl	8000bbc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d906      	bls.n	800298c <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e106      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800298c:	4b82      	ldr	r3, [pc, #520]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 800298e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ea      	bne.n	8002970 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 80f5 	beq.w	8002b8e <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	f040 80cb 	bne.w	8002b44 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029ae:	4b7a      	ldr	r3, [pc, #488]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0203 	and.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	429a      	cmp	r2, r3
 80029c0:	d12c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	3b01      	subs	r3, #1
 80029ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d123      	bne.n	8002a1c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d11b      	bne.n	8002a1c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d113      	bne.n	8002a1c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	3b01      	subs	r3, #1
 8002a02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d109      	bne.n	8002a1c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	3b01      	subs	r3, #1
 8002a16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d06d      	beq.n	8002af8 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d068      	beq.n	8002af4 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a22:	4b5d      	ldr	r3, [pc, #372]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a2e:	4b5a      	ldr	r3, [pc, #360]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0a8      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b56      	ldr	r3, [pc, #344]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a55      	ldr	r2, [pc, #340]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a4a:	f7fe f8b7 	bl	8000bbc <HAL_GetTick>
 8002a4e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a52:	f7fe f8b3 	bl	8000bbc <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e095      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a64:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a70:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <HAL_RCC_OscConfig+0x8f0>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a80:	3a01      	subs	r2, #1
 8002a82:	0112      	lsls	r2, r2, #4
 8002a84:	4311      	orrs	r1, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a8a:	0212      	lsls	r2, r2, #8
 8002a8c:	4311      	orrs	r1, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a92:	0852      	lsrs	r2, r2, #1
 8002a94:	3a01      	subs	r2, #1
 8002a96:	0552      	lsls	r2, r2, #21
 8002a98:	4311      	orrs	r1, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a9e:	0852      	lsrs	r2, r2, #1
 8002aa0:	3a01      	subs	r2, #1
 8002aa2:	0652      	lsls	r2, r2, #25
 8002aa4:	4311      	orrs	r1, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002aaa:	06d2      	lsls	r2, r2, #27
 8002aac:	430a      	orrs	r2, r1
 8002aae:	493a      	ldr	r1, [pc, #232]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a37      	ldr	r2, [pc, #220]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac0:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a34      	ldr	r2, [pc, #208]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002acc:	f7fe f876 	bl	8000bbc <HAL_GetTick>
 8002ad0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe f872 	bl	8000bbc <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e054      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae6:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af2:	e04c      	b.n	8002b8e <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e04b      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d144      	bne.n	8002b8e <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b10:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b1c:	f7fe f84e 	bl	8000bbc <HAL_GetTick>
 8002b20:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe f84a 	bl	8000bbc <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e02c      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x878>
 8002b42:	e024      	b.n	8002b8e <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d01f      	beq.n	8002b8a <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002b50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe f831 	bl	8000bbc <HAL_GetTick>
 8002b5a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe f82d 	bl	8000bbc <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e00f      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f0      	bne.n	8002b5e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	4905      	ldr	r1, [pc, #20]	; (8002b98 <HAL_RCC_OscConfig+0x8ec>)
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <HAL_RCC_OscConfig+0x8f4>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	60cb      	str	r3, [r1, #12]
 8002b88:	e001      	b.n	8002b8e <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3728      	adds	r7, #40	; 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	019d800c 	.word	0x019d800c
 8002ba0:	feeefffc 	.word	0xfeeefffc

08002ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e11d      	b.n	8002df8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b90      	ldr	r3, [pc, #576]	; (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d910      	bls.n	8002bec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b8d      	ldr	r3, [pc, #564]	; (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 020f 	bic.w	r2, r3, #15
 8002bd2:	498b      	ldr	r1, [pc, #556]	; (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b89      	ldr	r3, [pc, #548]	; (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e105      	b.n	8002df8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d010      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	4b81      	ldr	r3, [pc, #516]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d908      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b7e      	ldr	r3, [pc, #504]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	497b      	ldr	r1, [pc, #492]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d079      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d11e      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2e:	4b75      	ldr	r3, [pc, #468]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0dc      	b.n	8002df8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c3e:	f000 f9cf 	bl	8002fe0 <RCC_GetSysClockFreqFromPLLSource>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4a70      	ldr	r2, [pc, #448]	; (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d946      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c4a:	4b6e      	ldr	r3, [pc, #440]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d140      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c56:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c5e:	4a69      	ldr	r2, [pc, #420]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e035      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c74:	4b63      	ldr	r3, [pc, #396]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d115      	bne.n	8002cac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0b9      	b.n	8002df8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c8c:	4b5d      	ldr	r3, [pc, #372]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0ad      	b.n	8002df8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c9c:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0a5      	b.n	8002df8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002cac:	f000 f8b4 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4a55      	ldr	r2, [pc, #340]	; (8002e08 <HAL_RCC_ClockConfig+0x264>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d90f      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cb8:	4b52      	ldr	r3, [pc, #328]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cc4:	4b4f      	ldr	r3, [pc, #316]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ccc:	4a4d      	ldr	r2, [pc, #308]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cd8:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 0203 	bic.w	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4947      	ldr	r1, [pc, #284]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cea:	f7fd ff67 	bl	8000bbc <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf2:	f7fd ff63 	bl	8000bbc <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e077      	b.n	8002df8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d08:	4b3e      	ldr	r3, [pc, #248]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 020c 	and.w	r2, r3, #12
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d1eb      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d20:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a37      	ldr	r2, [pc, #220]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	4b31      	ldr	r3, [pc, #196]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d208      	bcs.n	8002d5a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d48:	4b2e      	ldr	r3, [pc, #184]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	492b      	ldr	r1, [pc, #172]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5a:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d210      	bcs.n	8002d8a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 020f 	bic.w	r2, r3, #15
 8002d70:	4923      	ldr	r1, [pc, #140]	; (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_RCC_ClockConfig+0x25c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e036      	b.n	8002df8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d96:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4918      	ldr	r1, [pc, #96]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4910      	ldr	r1, [pc, #64]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dc8:	f000 f826 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <HAL_RCC_ClockConfig+0x260>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <HAL_RCC_ClockConfig+0x268>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_RCC_ClockConfig+0x26c>)
 8002de6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x270>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fe95 	bl	8000b1c <HAL_InitTick>
 8002df2:	4603      	mov	r3, r0
 8002df4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40022000 	.word	0x40022000
 8002e04:	40021000 	.word	0x40021000
 8002e08:	04c4b400 	.word	0x04c4b400
 8002e0c:	08003bc8 	.word	0x08003bc8
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e26:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e30:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x34>
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d121      	bne.n	8002e8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d11e      	bne.n	8002e8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e4c:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e58:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	e005      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e68:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e74:	4a2b      	ldr	r2, [pc, #172]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10d      	bne.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d102      	bne.n	8002e96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	e004      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d134      	bne.n	8002f10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ea6:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d003      	beq.n	8002ebe <HAL_RCC_GetSysClockFreq+0xa6>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d003      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xac>
 8002ebc:	e005      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ec0:	617b      	str	r3, [r7, #20]
      break;
 8002ec2:	e005      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ec6:	617b      	str	r3, [r7, #20]
      break;
 8002ec8:	e002      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	617b      	str	r3, [r7, #20]
      break;
 8002ece:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3301      	adds	r3, #1
 8002edc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	fb03 f202 	mul.w	r2, r3, r2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	0e5b      	lsrs	r3, r3, #25
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	3301      	adds	r3, #1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f10:	69bb      	ldr	r3, [r7, #24]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3724      	adds	r7, #36	; 0x24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	08003bd8 	.word	0x08003bd8
 8002f28:	00f42400 	.word	0x00f42400

08002f2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f38:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f44:	f7ff f8ee 	bl	8002124 <HAL_PWREx_GetVoltageRange>
 8002f48:	6178      	str	r0, [r7, #20]
 8002f4a:	e014      	b.n	8002f76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f56:	6593      	str	r3, [r2, #88]	; 0x58
 8002f58:	4b1f      	ldr	r3, [pc, #124]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f64:	f7ff f8de 	bl	8002124 <HAL_PWREx_GetVoltageRange>
 8002f68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7c:	d10b      	bne.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b80      	cmp	r3, #128	; 0x80
 8002f82:	d913      	bls.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2ba0      	cmp	r3, #160	; 0xa0
 8002f88:	d902      	bls.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	e00d      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f90:	2301      	movs	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e00a      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b7f      	cmp	r3, #127	; 0x7f
 8002f9a:	d902      	bls.n	8002fa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e004      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b70      	cmp	r3, #112	; 0x70
 8002fa6:	d101      	bne.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa8:	2301      	movs	r3, #1
 8002faa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 020f 	bic.w	r2, r3, #15
 8002fb4:	4909      	ldr	r1, [pc, #36]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d001      	beq.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40022000 	.word	0x40022000

08002fe0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d00b      	beq.n	800300e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d825      	bhi.n	8003048 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d008      	beq.n	8003014 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d11f      	bne.n	8003048 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003008:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800300a:	613b      	str	r3, [r7, #16]
    break;
 800300c:	e01f      	b.n	800304e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003010:	613b      	str	r3, [r7, #16]
    break;
 8003012:	e01c      	b.n	800304e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003014:	4b21      	ldr	r3, [pc, #132]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d107      	bne.n	8003030 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e005      	b.n	800303c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800303c:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003044:	613b      	str	r3, [r7, #16]
    break;
 8003046:	e002      	b.n	800304e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]
    break;
 800304c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	3301      	adds	r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	fb03 f202 	mul.w	r2, r3, r2
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	0e5b      	lsrs	r3, r3, #25
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	3301      	adds	r3, #1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800308e:	683b      	ldr	r3, [r7, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40021000 	.word	0x40021000
 80030a0:	00f42400 	.word	0x00f42400
 80030a4:	08003bd8 	.word	0x08003bd8

080030a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030b0:	2300      	movs	r3, #0
 80030b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030b4:	2300      	movs	r3, #0
 80030b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d040      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d02a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030cc:	2b80      	cmp	r3, #128	; 0x80
 80030ce:	d825      	bhi.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030d0:	2b60      	cmp	r3, #96	; 0x60
 80030d2:	d026      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030d4:	2b60      	cmp	r3, #96	; 0x60
 80030d6:	d821      	bhi.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d006      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x42>
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d81d      	bhi.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d009      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d010      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80030e8:	e018      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030ea:	4b89      	ldr	r3, [pc, #548]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	4a88      	ldr	r2, [pc, #544]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f6:	e015      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fb3e 	bl	8003780 <RCCEx_PLLSAI1_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003108:	e00c      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3320      	adds	r3, #32
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fc29 	bl	8003968 <RCCEx_PLLSAI2_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800311a:	e003      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	74fb      	strb	r3, [r7, #19]
      break;
 8003120:	e000      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10b      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800312a:	4b79      	ldr	r3, [pc, #484]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800312c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003130:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003138:	4975      	ldr	r1, [pc, #468]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003140:	e001      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003142:	7cfb      	ldrb	r3, [r7, #19]
 8003144:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d047      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315a:	d030      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x116>
 800315c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003160:	d82a      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003166:	d02a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003168:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800316c:	d824      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800316e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003172:	d008      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003178:	d81e      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800317e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003182:	d010      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003184:	e018      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003186:	4b62      	ldr	r3, [pc, #392]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	4a61      	ldr	r2, [pc, #388]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003192:	e015      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f000 faf0 	bl	8003780 <RCCEx_PLLSAI1_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031a4:	e00c      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3320      	adds	r3, #32
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fbdb 	bl	8003968 <RCCEx_PLLSAI2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031b6:	e003      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	74fb      	strb	r3, [r7, #19]
      break;
 80031bc:	e000      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80031be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10b      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031c6:	4b52      	ldr	r3, [pc, #328]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	494e      	ldr	r1, [pc, #312]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80031dc:	e001      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031de:	7cfb      	ldrb	r3, [r7, #19]
 80031e0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 809f 	beq.w	800332e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f0:	2300      	movs	r3, #0
 80031f2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031f4:	4b46      	ldr	r3, [pc, #280]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003204:	2300      	movs	r3, #0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	4a40      	ldr	r2, [pc, #256]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6593      	str	r3, [r2, #88]	; 0x58
 8003216:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003222:	2301      	movs	r3, #1
 8003224:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a3a      	ldr	r2, [pc, #232]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003232:	f7fd fcc3 	bl	8000bbc <HAL_GetTick>
 8003236:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003238:	e009      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7fd fcbf 	bl	8000bbc <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d902      	bls.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	74fb      	strb	r3, [r7, #19]
        break;
 800324c:	e005      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ef      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d15b      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01f      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	429a      	cmp	r2, r3
 800327c:	d019      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003288:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003290:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a0:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032aa:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d016      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fd fc7e 	bl	8000bbc <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c2:	e00b      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f7fd fc7a 	bl	8000bbc <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d902      	bls.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	74fb      	strb	r3, [r7, #19]
            break;
 80032da:	e006      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0ec      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10c      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003300:	4903      	ldr	r1, [pc, #12]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003308:	e008      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	74bb      	strb	r3, [r7, #18]
 800330e:	e005      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003310:	40021000 	.word	0x40021000
 8003314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	7cfb      	ldrb	r3, [r7, #19]
 800331a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800331c:	7c7b      	ldrb	r3, [r7, #17]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d105      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003322:	4ba0      	ldr	r3, [pc, #640]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	4a9f      	ldr	r2, [pc, #636]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800333a:	4b9a      	ldr	r3, [pc, #616]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	f023 0203 	bic.w	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	4996      	ldr	r1, [pc, #600]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800335c:	4b91      	ldr	r3, [pc, #580]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	f023 020c 	bic.w	r2, r3, #12
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	498e      	ldr	r1, [pc, #568]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800337e:	4b89      	ldr	r3, [pc, #548]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	4985      	ldr	r1, [pc, #532]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033a0:	4b80      	ldr	r3, [pc, #512]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ae:	497d      	ldr	r1, [pc, #500]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033c2:	4b78      	ldr	r3, [pc, #480]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d0:	4974      	ldr	r1, [pc, #464]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033e4:	4b6f      	ldr	r3, [pc, #444]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f2:	496c      	ldr	r1, [pc, #432]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003406:	4b67      	ldr	r3, [pc, #412]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003414:	4963      	ldr	r1, [pc, #396]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003428:	4b5e      	ldr	r3, [pc, #376]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003436:	495b      	ldr	r1, [pc, #364]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800344a:	4b56      	ldr	r3, [pc, #344]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	4952      	ldr	r1, [pc, #328]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800346c:	4b4d      	ldr	r3, [pc, #308]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	494a      	ldr	r1, [pc, #296]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800348e:	4b45      	ldr	r3, [pc, #276]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	4941      	ldr	r1, [pc, #260]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034b0:	4b3c      	ldr	r3, [pc, #240]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034be:	4939      	ldr	r1, [pc, #228]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d028      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034d2:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e0:	4930      	ldr	r1, [pc, #192]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f0:	d106      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f2:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fc:	60d3      	str	r3, [r2, #12]
 80034fe:	e011      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003508:	d10c      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2101      	movs	r1, #1
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f935 	bl	8003780 <RCCEx_PLLSAI1_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d04d      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003538:	d108      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003540:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003546:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800354a:	e012      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003552:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003558:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800356a:	490e      	ldr	r1, [pc, #56]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357a:	d106      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4a08      	ldr	r2, [pc, #32]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003586:	60d3      	str	r3, [r2, #12]
 8003588:	e020      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003592:	d109      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a02      	ldr	r2, [pc, #8]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359e:	60d3      	str	r3, [r2, #12]
 80035a0:	e014      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2101      	movs	r1, #1
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f8e1 	bl	8003780 <RCCEx_PLLSAI1_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d028      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035d8:	4b68      	ldr	r3, [pc, #416]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e6:	4965      	ldr	r1, [pc, #404]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f6:	d106      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f8:	4b60      	ldr	r3, [pc, #384]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4a5f      	ldr	r2, [pc, #380]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003602:	60d3      	str	r3, [r2, #12]
 8003604:	e011      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800360e:	d10c      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	2101      	movs	r1, #1
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f8b2 	bl	8003780 <RCCEx_PLLSAI1_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01e      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003636:	4b51      	ldr	r3, [pc, #324]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003646:	494d      	ldr	r1, [pc, #308]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003654:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003658:	d10c      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3304      	adds	r3, #4
 800365e:	2102      	movs	r1, #2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f88d 	bl	8003780 <RCCEx_PLLSAI1_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00b      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003680:	4b3e      	ldr	r3, [pc, #248]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003686:	f023 0204 	bic.w	r2, r3, #4
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003690:	493a      	ldr	r1, [pc, #232]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036a4:	4b35      	ldr	r3, [pc, #212]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036aa:	f023 0218 	bic.w	r2, r3, #24
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	4931      	ldr	r1, [pc, #196]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d035      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036c8:	4b2c      	ldr	r3, [pc, #176]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a2b      	ldr	r2, [pc, #172]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d4:	f7fd fa72 	bl	8000bbc <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036da:	e009      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036dc:	f7fd fa6e 	bl	8000bbc <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d902      	bls.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	74fb      	strb	r3, [r7, #19]
        break;
 80036ee:	e005      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036f0:	4b22      	ldr	r3, [pc, #136]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ef      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003702:	4b1e      	ldr	r3, [pc, #120]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003704:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003708:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003712:	491a      	ldr	r1, [pc, #104]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3320      	adds	r3, #32
 800371e:	2102      	movs	r1, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f921 	bl	8003968 <RCCEx_PLLSAI2_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d017      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003746:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003750:	490a      	ldr	r1, [pc, #40]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003762:	d105      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800376a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800376e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003770:	7cbb      	ldrb	r3, [r7, #18]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000

08003780 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800378e:	4b72      	ldr	r3, [pc, #456]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00e      	beq.n	80037b8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800379a:	4b6f      	ldr	r3, [pc, #444]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0203 	and.w	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d103      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
       ||
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d142      	bne.n	8003838 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
 80037b6:	e03f      	b.n	8003838 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d018      	beq.n	80037f2 <RCCEx_PLLSAI1_Config+0x72>
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d825      	bhi.n	8003810 <RCCEx_PLLSAI1_Config+0x90>
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d002      	beq.n	80037ce <RCCEx_PLLSAI1_Config+0x4e>
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d009      	beq.n	80037e0 <RCCEx_PLLSAI1_Config+0x60>
 80037cc:	e020      	b.n	8003810 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037ce:	4b62      	ldr	r3, [pc, #392]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11d      	bne.n	8003816 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037de:	e01a      	b.n	8003816 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037e0:	4b5d      	ldr	r3, [pc, #372]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d116      	bne.n	800381a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f0:	e013      	b.n	800381a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037f2:	4b59      	ldr	r3, [pc, #356]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10f      	bne.n	800381e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037fe:	4b56      	ldr	r3, [pc, #344]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800380e:	e006      	b.n	800381e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      break;
 8003814:	e004      	b.n	8003820 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003816:	bf00      	nop
 8003818:	e002      	b.n	8003820 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800381a:	bf00      	nop
 800381c:	e000      	b.n	8003820 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800381e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003826:	4b4c      	ldr	r3, [pc, #304]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f023 0203 	bic.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4949      	ldr	r1, [pc, #292]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003834:	4313      	orrs	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f040 8086 	bne.w	800394c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003840:	4b45      	ldr	r3, [pc, #276]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a44      	ldr	r2, [pc, #272]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800384a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fd f9b6 	bl	8000bbc <HAL_GetTick>
 8003850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003852:	e009      	b.n	8003868 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003854:	f7fd f9b2 	bl	8000bbc <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	73fb      	strb	r3, [r7, #15]
        break;
 8003866:	e005      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003868:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ef      	bne.n	8003854 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d168      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d113      	bne.n	80038a8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003880:	4b35      	ldr	r3, [pc, #212]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	4b35      	ldr	r3, [pc, #212]	; (800395c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003886:	4013      	ands	r3, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6892      	ldr	r2, [r2, #8]
 800388c:	0211      	lsls	r1, r2, #8
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68d2      	ldr	r2, [r2, #12]
 8003892:	06d2      	lsls	r2, r2, #27
 8003894:	4311      	orrs	r1, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6852      	ldr	r2, [r2, #4]
 800389a:	3a01      	subs	r2, #1
 800389c:	0112      	lsls	r2, r2, #4
 800389e:	430a      	orrs	r2, r1
 80038a0:	492d      	ldr	r1, [pc, #180]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	610b      	str	r3, [r1, #16]
 80038a6:	e02d      	b.n	8003904 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d115      	bne.n	80038da <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ae:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6892      	ldr	r2, [r2, #8]
 80038ba:	0211      	lsls	r1, r2, #8
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6912      	ldr	r2, [r2, #16]
 80038c0:	0852      	lsrs	r2, r2, #1
 80038c2:	3a01      	subs	r2, #1
 80038c4:	0552      	lsls	r2, r2, #21
 80038c6:	4311      	orrs	r1, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6852      	ldr	r2, [r2, #4]
 80038cc:	3a01      	subs	r2, #1
 80038ce:	0112      	lsls	r2, r2, #4
 80038d0:	430a      	orrs	r2, r1
 80038d2:	4921      	ldr	r1, [pc, #132]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	610b      	str	r3, [r1, #16]
 80038d8:	e014      	b.n	8003904 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038da:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	4b21      	ldr	r3, [pc, #132]	; (8003964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6892      	ldr	r2, [r2, #8]
 80038e6:	0211      	lsls	r1, r2, #8
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6952      	ldr	r2, [r2, #20]
 80038ec:	0852      	lsrs	r2, r2, #1
 80038ee:	3a01      	subs	r2, #1
 80038f0:	0652      	lsls	r2, r2, #25
 80038f2:	4311      	orrs	r1, r2
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6852      	ldr	r2, [r2, #4]
 80038f8:	3a01      	subs	r2, #1
 80038fa:	0112      	lsls	r2, r2, #4
 80038fc:	430a      	orrs	r2, r1
 80038fe:	4916      	ldr	r1, [pc, #88]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003900:	4313      	orrs	r3, r2
 8003902:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a13      	ldr	r2, [pc, #76]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 800390a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800390e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fd f954 	bl	8000bbc <HAL_GetTick>
 8003914:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003916:	e009      	b.n	800392c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003918:	f7fd f950 	bl	8000bbc <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d902      	bls.n	800392c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	73fb      	strb	r3, [r7, #15]
          break;
 800392a:	e005      	b.n	8003938 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ef      	beq.n	8003918 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	4904      	ldr	r1, [pc, #16]	; (8003958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003948:	4313      	orrs	r3, r2
 800394a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	07ff800f 	.word	0x07ff800f
 8003960:	ff9f800f 	.word	0xff9f800f
 8003964:	f9ff800f 	.word	0xf9ff800f

08003968 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003976:	4b72      	ldr	r3, [pc, #456]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00e      	beq.n	80039a0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003982:	4b6f      	ldr	r3, [pc, #444]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0203 	and.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d103      	bne.n	800399a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
       ||
 8003996:	2b00      	cmp	r3, #0
 8003998:	d142      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	e03f      	b.n	8003a20 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d018      	beq.n	80039da <RCCEx_PLLSAI2_Config+0x72>
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d825      	bhi.n	80039f8 <RCCEx_PLLSAI2_Config+0x90>
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d002      	beq.n	80039b6 <RCCEx_PLLSAI2_Config+0x4e>
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d009      	beq.n	80039c8 <RCCEx_PLLSAI2_Config+0x60>
 80039b4:	e020      	b.n	80039f8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039b6:	4b62      	ldr	r3, [pc, #392]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d11d      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c6:	e01a      	b.n	80039fe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c8:	4b5d      	ldr	r3, [pc, #372]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d116      	bne.n	8003a02 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d8:	e013      	b.n	8003a02 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039da:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10f      	bne.n	8003a06 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039e6:	4b56      	ldr	r3, [pc, #344]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039f6:	e006      	b.n	8003a06 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      break;
 80039fc:	e004      	b.n	8003a08 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80039fe:	bf00      	nop
 8003a00:	e002      	b.n	8003a08 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003a0e:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f023 0203 	bic.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4949      	ldr	r1, [pc, #292]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f040 8086 	bne.w	8003b34 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a28:	4b45      	ldr	r3, [pc, #276]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a44      	ldr	r2, [pc, #272]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a34:	f7fd f8c2 	bl	8000bbc <HAL_GetTick>
 8003a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a3a:	e009      	b.n	8003a50 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a3c:	f7fd f8be 	bl	8000bbc <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d902      	bls.n	8003a50 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4e:	e005      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ef      	bne.n	8003a3c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d168      	bne.n	8003b34 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d113      	bne.n	8003a90 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a68:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6892      	ldr	r2, [r2, #8]
 8003a74:	0211      	lsls	r1, r2, #8
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68d2      	ldr	r2, [r2, #12]
 8003a7a:	06d2      	lsls	r2, r2, #27
 8003a7c:	4311      	orrs	r1, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6852      	ldr	r2, [r2, #4]
 8003a82:	3a01      	subs	r2, #1
 8003a84:	0112      	lsls	r2, r2, #4
 8003a86:	430a      	orrs	r2, r1
 8003a88:	492d      	ldr	r1, [pc, #180]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	614b      	str	r3, [r1, #20]
 8003a8e:	e02d      	b.n	8003aec <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d115      	bne.n	8003ac2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a96:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6892      	ldr	r2, [r2, #8]
 8003aa2:	0211      	lsls	r1, r2, #8
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6912      	ldr	r2, [r2, #16]
 8003aa8:	0852      	lsrs	r2, r2, #1
 8003aaa:	3a01      	subs	r2, #1
 8003aac:	0552      	lsls	r2, r2, #21
 8003aae:	4311      	orrs	r1, r2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6852      	ldr	r2, [r2, #4]
 8003ab4:	3a01      	subs	r2, #1
 8003ab6:	0112      	lsls	r2, r2, #4
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	4921      	ldr	r1, [pc, #132]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	614b      	str	r3, [r1, #20]
 8003ac0:	e014      	b.n	8003aec <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ac2:	4b1f      	ldr	r3, [pc, #124]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6892      	ldr	r2, [r2, #8]
 8003ace:	0211      	lsls	r1, r2, #8
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6952      	ldr	r2, [r2, #20]
 8003ad4:	0852      	lsrs	r2, r2, #1
 8003ad6:	3a01      	subs	r2, #1
 8003ad8:	0652      	lsls	r2, r2, #25
 8003ada:	4311      	orrs	r1, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6852      	ldr	r2, [r2, #4]
 8003ae0:	3a01      	subs	r2, #1
 8003ae2:	0112      	lsls	r2, r2, #4
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	4916      	ldr	r1, [pc, #88]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fd f860 	bl	8000bbc <HAL_GetTick>
 8003afc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003afe:	e009      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b00:	f7fd f85c 	bl	8000bbc <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d902      	bls.n	8003b14 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	73fb      	strb	r3, [r7, #15]
          break;
 8003b12:	e005      	b.n	8003b20 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ef      	beq.n	8003b00 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	4904      	ldr	r1, [pc, #16]	; (8003b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	07ff800f 	.word	0x07ff800f
 8003b48:	ff9f800f 	.word	0xff9f800f
 8003b4c:	f9ff800f 	.word	0xf9ff800f

08003b50 <__libc_init_array>:
 8003b50:	b570      	push	{r4, r5, r6, lr}
 8003b52:	4d0d      	ldr	r5, [pc, #52]	; (8003b88 <__libc_init_array+0x38>)
 8003b54:	4c0d      	ldr	r4, [pc, #52]	; (8003b8c <__libc_init_array+0x3c>)
 8003b56:	1b64      	subs	r4, r4, r5
 8003b58:	10a4      	asrs	r4, r4, #2
 8003b5a:	2600      	movs	r6, #0
 8003b5c:	42a6      	cmp	r6, r4
 8003b5e:	d109      	bne.n	8003b74 <__libc_init_array+0x24>
 8003b60:	4d0b      	ldr	r5, [pc, #44]	; (8003b90 <__libc_init_array+0x40>)
 8003b62:	4c0c      	ldr	r4, [pc, #48]	; (8003b94 <__libc_init_array+0x44>)
 8003b64:	f000 f820 	bl	8003ba8 <_init>
 8003b68:	1b64      	subs	r4, r4, r5
 8003b6a:	10a4      	asrs	r4, r4, #2
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	42a6      	cmp	r6, r4
 8003b70:	d105      	bne.n	8003b7e <__libc_init_array+0x2e>
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b78:	4798      	blx	r3
 8003b7a:	3601      	adds	r6, #1
 8003b7c:	e7ee      	b.n	8003b5c <__libc_init_array+0xc>
 8003b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b82:	4798      	blx	r3
 8003b84:	3601      	adds	r6, #1
 8003b86:	e7f2      	b.n	8003b6e <__libc_init_array+0x1e>
 8003b88:	08003c08 	.word	0x08003c08
 8003b8c:	08003c08 	.word	0x08003c08
 8003b90:	08003c08 	.word	0x08003c08
 8003b94:	08003c0c 	.word	0x08003c0c

08003b98 <memset>:
 8003b98:	4402      	add	r2, r0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <_init>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	bf00      	nop
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr

08003bb4 <_fini>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	bf00      	nop
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr
